
EEPROM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f04  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08000fc4  08000fc4  00010fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000ff4  08000ff4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08000ff4  08000ff4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000ff4  08000ff4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000ff4  08000ff4  00010ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000ff8  08000ff8  00010ff8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08000ffc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000420  2000000c  08001008  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  08001008  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00002390  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000e0e  00000000  00000000  000223c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000348  00000000  00000000  000231d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000002c0  00000000  00000000  00023520  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000e6cf  00000000  00000000  000237e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00004656  00000000  00000000  00031eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000561a9  00000000  00000000  00036505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0008c6ae  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000009d4  00000000  00000000  0008c700  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08000fac 	.word	0x08000fac

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08000fac 	.word	0x08000fac

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <ee_init>:
uint8_t ee_ram[_EE_USE_RAM_BYTE];
#endif

//##########################################################################################################
bool ee_init(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
#if (_EE_USE_RAM_BYTE > 0)
  return ee_read(0, _EE_USE_RAM_BYTE, NULL);
 8000224:	2380      	movs	r3, #128	; 0x80
 8000226:	00db      	lsls	r3, r3, #3
 8000228:	2200      	movs	r2, #0
 800022a:	0019      	movs	r1, r3
 800022c:	2000      	movs	r0, #0
 800022e:	f000 f805 	bl	800023c <ee_read>
 8000232:	0003      	movs	r3, r0
#else
  return true;
#endif
}
 8000234:	0018      	movs	r0, r3
 8000236:	46bd      	mov	sp, r7
 8000238:	bd80      	pop	{r7, pc}
	...

0800023c <ee_read>:
  HAL_FLASH_Lock();
  return false;
}
//##########################################################################################################
bool ee_read(uint32_t startVirtualAddress, uint32_t len, uint8_t* data)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b086      	sub	sp, #24
 8000240:	af00      	add	r7, sp, #0
 8000242:	60f8      	str	r0, [r7, #12]
 8000244:	60b9      	str	r1, [r7, #8]
 8000246:	607a      	str	r2, [r7, #4]
  if ((startVirtualAddress + len) > _EE_SIZE)
 8000248:	68fa      	ldr	r2, [r7, #12]
 800024a:	68bb      	ldr	r3, [r7, #8]
 800024c:	18d2      	adds	r2, r2, r3
 800024e:	2380      	movs	r3, #128	; 0x80
 8000250:	00db      	lsls	r3, r3, #3
 8000252:	429a      	cmp	r2, r3
 8000254:	d901      	bls.n	800025a <ee_read+0x1e>
    return false;
 8000256:	2300      	movs	r3, #0
 8000258:	e02a      	b.n	80002b0 <ee_read+0x74>
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 800025a:	68fb      	ldr	r3, [r7, #12]
 800025c:	617b      	str	r3, [r7, #20]
 800025e:	e020      	b.n	80002a2 <ee_read+0x66>
  {
    if (data != NULL)
 8000260:	687b      	ldr	r3, [r7, #4]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d00a      	beq.n	800027c <ee_read+0x40>
    {
      *data = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8000266:	697b      	ldr	r3, [r7, #20]
 8000268:	4a13      	ldr	r2, [pc, #76]	; (80002b8 <ee_read+0x7c>)
 800026a:	4694      	mov	ip, r2
 800026c:	4463      	add	r3, ip
 800026e:	781b      	ldrb	r3, [r3, #0]
 8000270:	b2da      	uxtb	r2, r3
 8000272:	687b      	ldr	r3, [r7, #4]
 8000274:	701a      	strb	r2, [r3, #0]
      data++;
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	3301      	adds	r3, #1
 800027a:	607b      	str	r3, [r7, #4]
    }
#if (_EE_USE_RAM_BYTE > 0)
    if (i < _EE_USE_RAM_BYTE)
 800027c:	697a      	ldr	r2, [r7, #20]
 800027e:	2380      	movs	r3, #128	; 0x80
 8000280:	00db      	lsls	r3, r3, #3
 8000282:	429a      	cmp	r2, r3
 8000284:	d20a      	bcs.n	800029c <ee_read+0x60>
      ee_ram[i] = (*(__IO uint8_t*) (i + _EE_ADDR_INUSE));
 8000286:	697b      	ldr	r3, [r7, #20]
 8000288:	4a0b      	ldr	r2, [pc, #44]	; (80002b8 <ee_read+0x7c>)
 800028a:	4694      	mov	ip, r2
 800028c:	4463      	add	r3, ip
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	b2d9      	uxtb	r1, r3
 8000292:	4a0a      	ldr	r2, [pc, #40]	; (80002bc <ee_read+0x80>)
 8000294:	697b      	ldr	r3, [r7, #20]
 8000296:	18d3      	adds	r3, r2, r3
 8000298:	1c0a      	adds	r2, r1, #0
 800029a:	701a      	strb	r2, [r3, #0]
  for (uint32_t i = startVirtualAddress; i < len + startVirtualAddress; i++)
 800029c:	697b      	ldr	r3, [r7, #20]
 800029e:	3301      	adds	r3, #1
 80002a0:	617b      	str	r3, [r7, #20]
 80002a2:	68ba      	ldr	r2, [r7, #8]
 80002a4:	68fb      	ldr	r3, [r7, #12]
 80002a6:	18d3      	adds	r3, r2, r3
 80002a8:	697a      	ldr	r2, [r7, #20]
 80002aa:	429a      	cmp	r2, r3
 80002ac:	d3d8      	bcc.n	8000260 <ee_read+0x24>
#endif
  }
  return true;
 80002ae:	2301      	movs	r3, #1
}
 80002b0:	0018      	movs	r0, r3
 80002b2:	46bd      	mov	sp, r7
 80002b4:	b006      	add	sp, #24
 80002b6:	bd80      	pop	{r7, pc}
 80002b8:	08002800 	.word	0x08002800
 80002bc:	20000028 	.word	0x20000028

080002c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80002c6:	f000 f8df 	bl	8000488 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80002ca:	f000 f80b 	bl	80002e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80002ce:	f000 f845 	bl	800035c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  ee_init();
 80002d2:	f7ff ffa5 	bl	8000220 <ee_init>
  //uint8_t dataWrite[4] = {13,15,17,41};
  uint8_t dataRead[4];
  //ee_writeToRam(0,4,dataWrite);
  //ee_commit();
  ee_read(0,4,dataRead);
 80002d6:	1d3b      	adds	r3, r7, #4
 80002d8:	001a      	movs	r2, r3
 80002da:	2104      	movs	r1, #4
 80002dc:	2000      	movs	r0, #0
 80002de:	f7ff ffad 	bl	800023c <ee_read>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80002e2:	e7fe      	b.n	80002e2 <main+0x22>

080002e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e4:	b590      	push	{r4, r7, lr}
 80002e6:	b091      	sub	sp, #68	; 0x44
 80002e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ea:	2410      	movs	r4, #16
 80002ec:	193b      	adds	r3, r7, r4
 80002ee:	0018      	movs	r0, r3
 80002f0:	2330      	movs	r3, #48	; 0x30
 80002f2:	001a      	movs	r2, r3
 80002f4:	2100      	movs	r1, #0
 80002f6:	f000 fe51 	bl	8000f9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002fa:	003b      	movs	r3, r7
 80002fc:	0018      	movs	r0, r3
 80002fe:	2310      	movs	r3, #16
 8000300:	001a      	movs	r2, r3
 8000302:	2100      	movs	r1, #0
 8000304:	f000 fe4a 	bl	8000f9c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2201      	movs	r2, #1
 800030c:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800030e:	193b      	adds	r3, r7, r4
 8000310:	2201      	movs	r2, #1
 8000312:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000314:	193b      	adds	r3, r7, r4
 8000316:	2200      	movs	r2, #0
 8000318:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800031a:	193b      	adds	r3, r7, r4
 800031c:	0018      	movs	r0, r3
 800031e:	f000 f9cb 	bl	80006b8 <HAL_RCC_OscConfig>
 8000322:	1e03      	subs	r3, r0, #0
 8000324:	d001      	beq.n	800032a <SystemClock_Config+0x46>
  {
    Error_Handler();
 8000326:	f000 f83f 	bl	80003a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800032a:	003b      	movs	r3, r7
 800032c:	2207      	movs	r2, #7
 800032e:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000330:	003b      	movs	r3, r7
 8000332:	2201      	movs	r2, #1
 8000334:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000336:	003b      	movs	r3, r7
 8000338:	2200      	movs	r2, #0
 800033a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800033c:	003b      	movs	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000342:	003b      	movs	r3, r7
 8000344:	2100      	movs	r1, #0
 8000346:	0018      	movs	r0, r3
 8000348:	f000 fcd0 	bl	8000cec <HAL_RCC_ClockConfig>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000350:	f000 f82a 	bl	80003a8 <Error_Handler>
  }
}
 8000354:	46c0      	nop			; (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b011      	add	sp, #68	; 0x44
 800035a:	bd90      	pop	{r4, r7, pc}

0800035c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800035c:	b580      	push	{r7, lr}
 800035e:	b082      	sub	sp, #8
 8000360:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000362:	4b10      	ldr	r3, [pc, #64]	; (80003a4 <MX_GPIO_Init+0x48>)
 8000364:	695a      	ldr	r2, [r3, #20]
 8000366:	4b0f      	ldr	r3, [pc, #60]	; (80003a4 <MX_GPIO_Init+0x48>)
 8000368:	2180      	movs	r1, #128	; 0x80
 800036a:	03c9      	lsls	r1, r1, #15
 800036c:	430a      	orrs	r2, r1
 800036e:	615a      	str	r2, [r3, #20]
 8000370:	4b0c      	ldr	r3, [pc, #48]	; (80003a4 <MX_GPIO_Init+0x48>)
 8000372:	695a      	ldr	r2, [r3, #20]
 8000374:	2380      	movs	r3, #128	; 0x80
 8000376:	03db      	lsls	r3, r3, #15
 8000378:	4013      	ands	r3, r2
 800037a:	607b      	str	r3, [r7, #4]
 800037c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800037e:	4b09      	ldr	r3, [pc, #36]	; (80003a4 <MX_GPIO_Init+0x48>)
 8000380:	695a      	ldr	r2, [r3, #20]
 8000382:	4b08      	ldr	r3, [pc, #32]	; (80003a4 <MX_GPIO_Init+0x48>)
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	0289      	lsls	r1, r1, #10
 8000388:	430a      	orrs	r2, r1
 800038a:	615a      	str	r2, [r3, #20]
 800038c:	4b05      	ldr	r3, [pc, #20]	; (80003a4 <MX_GPIO_Init+0x48>)
 800038e:	695a      	ldr	r2, [r3, #20]
 8000390:	2380      	movs	r3, #128	; 0x80
 8000392:	029b      	lsls	r3, r3, #10
 8000394:	4013      	ands	r3, r2
 8000396:	603b      	str	r3, [r7, #0]
 8000398:	683b      	ldr	r3, [r7, #0]

}
 800039a:	46c0      	nop			; (mov r8, r8)
 800039c:	46bd      	mov	sp, r7
 800039e:	b002      	add	sp, #8
 80003a0:	bd80      	pop	{r7, pc}
 80003a2:	46c0      	nop			; (mov r8, r8)
 80003a4:	40021000 	.word	0x40021000

080003a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80003ac:	b672      	cpsid	i
}
 80003ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80003b0:	e7fe      	b.n	80003b0 <Error_Handler+0x8>
	...

080003b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003ba:	4b0f      	ldr	r3, [pc, #60]	; (80003f8 <HAL_MspInit+0x44>)
 80003bc:	699a      	ldr	r2, [r3, #24]
 80003be:	4b0e      	ldr	r3, [pc, #56]	; (80003f8 <HAL_MspInit+0x44>)
 80003c0:	2101      	movs	r1, #1
 80003c2:	430a      	orrs	r2, r1
 80003c4:	619a      	str	r2, [r3, #24]
 80003c6:	4b0c      	ldr	r3, [pc, #48]	; (80003f8 <HAL_MspInit+0x44>)
 80003c8:	699b      	ldr	r3, [r3, #24]
 80003ca:	2201      	movs	r2, #1
 80003cc:	4013      	ands	r3, r2
 80003ce:	607b      	str	r3, [r7, #4]
 80003d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80003d2:	4b09      	ldr	r3, [pc, #36]	; (80003f8 <HAL_MspInit+0x44>)
 80003d4:	69da      	ldr	r2, [r3, #28]
 80003d6:	4b08      	ldr	r3, [pc, #32]	; (80003f8 <HAL_MspInit+0x44>)
 80003d8:	2180      	movs	r1, #128	; 0x80
 80003da:	0549      	lsls	r1, r1, #21
 80003dc:	430a      	orrs	r2, r1
 80003de:	61da      	str	r2, [r3, #28]
 80003e0:	4b05      	ldr	r3, [pc, #20]	; (80003f8 <HAL_MspInit+0x44>)
 80003e2:	69da      	ldr	r2, [r3, #28]
 80003e4:	2380      	movs	r3, #128	; 0x80
 80003e6:	055b      	lsls	r3, r3, #21
 80003e8:	4013      	ands	r3, r2
 80003ea:	603b      	str	r3, [r7, #0]
 80003ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80003ee:	46c0      	nop			; (mov r8, r8)
 80003f0:	46bd      	mov	sp, r7
 80003f2:	b002      	add	sp, #8
 80003f4:	bd80      	pop	{r7, pc}
 80003f6:	46c0      	nop			; (mov r8, r8)
 80003f8:	40021000 	.word	0x40021000

080003fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003fc:	b580      	push	{r7, lr}
 80003fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000400:	e7fe      	b.n	8000400 <NMI_Handler+0x4>

08000402 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000402:	b580      	push	{r7, lr}
 8000404:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000406:	e7fe      	b.n	8000406 <HardFault_Handler+0x4>

08000408 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800040c:	46c0      	nop			; (mov r8, r8)
 800040e:	46bd      	mov	sp, r7
 8000410:	bd80      	pop	{r7, pc}

08000412 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000412:	b580      	push	{r7, lr}
 8000414:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	bd80      	pop	{r7, pc}

0800041c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000420:	f000 f87a 	bl	8000518 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000424:	46c0      	nop			; (mov r8, r8)
 8000426:	46bd      	mov	sp, r7
 8000428:	bd80      	pop	{r7, pc}

0800042a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800042a:	b580      	push	{r7, lr}
 800042c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800042e:	46c0      	nop			; (mov r8, r8)
 8000430:	46bd      	mov	sp, r7
 8000432:	bd80      	pop	{r7, pc}

08000434 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000434:	480d      	ldr	r0, [pc, #52]	; (800046c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000436:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000438:	480d      	ldr	r0, [pc, #52]	; (8000470 <LoopForever+0x6>)
  ldr r1, =_edata
 800043a:	490e      	ldr	r1, [pc, #56]	; (8000474 <LoopForever+0xa>)
  ldr r2, =_sidata
 800043c:	4a0e      	ldr	r2, [pc, #56]	; (8000478 <LoopForever+0xe>)
  movs r3, #0
 800043e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000440:	e002      	b.n	8000448 <LoopCopyDataInit>

08000442 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000442:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000444:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000446:	3304      	adds	r3, #4

08000448 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000448:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800044a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800044c:	d3f9      	bcc.n	8000442 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800044e:	4a0b      	ldr	r2, [pc, #44]	; (800047c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000450:	4c0b      	ldr	r4, [pc, #44]	; (8000480 <LoopForever+0x16>)
  movs r3, #0
 8000452:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000454:	e001      	b.n	800045a <LoopFillZerobss>

08000456 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000456:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000458:	3204      	adds	r2, #4

0800045a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800045a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800045c:	d3fb      	bcc.n	8000456 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800045e:	f7ff ffe4 	bl	800042a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000462:	f000 fd77 	bl	8000f54 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000466:	f7ff ff2b 	bl	80002c0 <main>

0800046a <LoopForever>:

LoopForever:
    b LoopForever
 800046a:	e7fe      	b.n	800046a <LoopForever>
  ldr   r0, =_estack
 800046c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000470:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000474:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000478:	08000ffc 	.word	0x08000ffc
  ldr r2, =_sbss
 800047c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000480:	2000042c 	.word	0x2000042c

08000484 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000484:	e7fe      	b.n	8000484 <ADC1_IRQHandler>
	...

08000488 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800048c:	4b07      	ldr	r3, [pc, #28]	; (80004ac <HAL_Init+0x24>)
 800048e:	681a      	ldr	r2, [r3, #0]
 8000490:	4b06      	ldr	r3, [pc, #24]	; (80004ac <HAL_Init+0x24>)
 8000492:	2110      	movs	r1, #16
 8000494:	430a      	orrs	r2, r1
 8000496:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000498:	2003      	movs	r0, #3
 800049a:	f000 f809 	bl	80004b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800049e:	f7ff ff89 	bl	80003b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80004a2:	2300      	movs	r3, #0
}
 80004a4:	0018      	movs	r0, r3
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	46c0      	nop			; (mov r8, r8)
 80004ac:	40022000 	.word	0x40022000

080004b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004b0:	b590      	push	{r4, r7, lr}
 80004b2:	b083      	sub	sp, #12
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80004b8:	4b14      	ldr	r3, [pc, #80]	; (800050c <HAL_InitTick+0x5c>)
 80004ba:	681c      	ldr	r4, [r3, #0]
 80004bc:	4b14      	ldr	r3, [pc, #80]	; (8000510 <HAL_InitTick+0x60>)
 80004be:	781b      	ldrb	r3, [r3, #0]
 80004c0:	0019      	movs	r1, r3
 80004c2:	23fa      	movs	r3, #250	; 0xfa
 80004c4:	0098      	lsls	r0, r3, #2
 80004c6:	f7ff fe1f 	bl	8000108 <__udivsi3>
 80004ca:	0003      	movs	r3, r0
 80004cc:	0019      	movs	r1, r3
 80004ce:	0020      	movs	r0, r4
 80004d0:	f7ff fe1a 	bl	8000108 <__udivsi3>
 80004d4:	0003      	movs	r3, r0
 80004d6:	0018      	movs	r0, r3
 80004d8:	f000 f8e1 	bl	800069e <HAL_SYSTICK_Config>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80004e0:	2301      	movs	r3, #1
 80004e2:	e00f      	b.n	8000504 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	2b03      	cmp	r3, #3
 80004e8:	d80b      	bhi.n	8000502 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80004ea:	6879      	ldr	r1, [r7, #4]
 80004ec:	2301      	movs	r3, #1
 80004ee:	425b      	negs	r3, r3
 80004f0:	2200      	movs	r2, #0
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 f8be 	bl	8000674 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <HAL_InitTick+0x64>)
 80004fa:	687a      	ldr	r2, [r7, #4]
 80004fc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80004fe:	2300      	movs	r3, #0
 8000500:	e000      	b.n	8000504 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000502:	2301      	movs	r3, #1
}
 8000504:	0018      	movs	r0, r3
 8000506:	46bd      	mov	sp, r7
 8000508:	b003      	add	sp, #12
 800050a:	bd90      	pop	{r4, r7, pc}
 800050c:	20000000 	.word	0x20000000
 8000510:	20000008 	.word	0x20000008
 8000514:	20000004 	.word	0x20000004

08000518 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800051c:	4b05      	ldr	r3, [pc, #20]	; (8000534 <HAL_IncTick+0x1c>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	001a      	movs	r2, r3
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <HAL_IncTick+0x20>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	18d2      	adds	r2, r2, r3
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <HAL_IncTick+0x20>)
 800052a:	601a      	str	r2, [r3, #0]
}
 800052c:	46c0      	nop			; (mov r8, r8)
 800052e:	46bd      	mov	sp, r7
 8000530:	bd80      	pop	{r7, pc}
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	20000008 	.word	0x20000008
 8000538:	20000428 	.word	0x20000428

0800053c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  return uwTick;
 8000540:	4b02      	ldr	r3, [pc, #8]	; (800054c <HAL_GetTick+0x10>)
 8000542:	681b      	ldr	r3, [r3, #0]
}
 8000544:	0018      	movs	r0, r3
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	20000428 	.word	0x20000428

08000550 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000550:	b590      	push	{r4, r7, lr}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	0002      	movs	r2, r0
 8000558:	6039      	str	r1, [r7, #0]
 800055a:	1dfb      	adds	r3, r7, #7
 800055c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800055e:	1dfb      	adds	r3, r7, #7
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b7f      	cmp	r3, #127	; 0x7f
 8000564:	d828      	bhi.n	80005b8 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000566:	4a2f      	ldr	r2, [pc, #188]	; (8000624 <__NVIC_SetPriority+0xd4>)
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	b25b      	sxtb	r3, r3
 800056e:	089b      	lsrs	r3, r3, #2
 8000570:	33c0      	adds	r3, #192	; 0xc0
 8000572:	009b      	lsls	r3, r3, #2
 8000574:	589b      	ldr	r3, [r3, r2]
 8000576:	1dfa      	adds	r2, r7, #7
 8000578:	7812      	ldrb	r2, [r2, #0]
 800057a:	0011      	movs	r1, r2
 800057c:	2203      	movs	r2, #3
 800057e:	400a      	ands	r2, r1
 8000580:	00d2      	lsls	r2, r2, #3
 8000582:	21ff      	movs	r1, #255	; 0xff
 8000584:	4091      	lsls	r1, r2
 8000586:	000a      	movs	r2, r1
 8000588:	43d2      	mvns	r2, r2
 800058a:	401a      	ands	r2, r3
 800058c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800058e:	683b      	ldr	r3, [r7, #0]
 8000590:	019b      	lsls	r3, r3, #6
 8000592:	22ff      	movs	r2, #255	; 0xff
 8000594:	401a      	ands	r2, r3
 8000596:	1dfb      	adds	r3, r7, #7
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	0018      	movs	r0, r3
 800059c:	2303      	movs	r3, #3
 800059e:	4003      	ands	r3, r0
 80005a0:	00db      	lsls	r3, r3, #3
 80005a2:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005a4:	481f      	ldr	r0, [pc, #124]	; (8000624 <__NVIC_SetPriority+0xd4>)
 80005a6:	1dfb      	adds	r3, r7, #7
 80005a8:	781b      	ldrb	r3, [r3, #0]
 80005aa:	b25b      	sxtb	r3, r3
 80005ac:	089b      	lsrs	r3, r3, #2
 80005ae:	430a      	orrs	r2, r1
 80005b0:	33c0      	adds	r3, #192	; 0xc0
 80005b2:	009b      	lsls	r3, r3, #2
 80005b4:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80005b6:	e031      	b.n	800061c <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80005b8:	4a1b      	ldr	r2, [pc, #108]	; (8000628 <__NVIC_SetPriority+0xd8>)
 80005ba:	1dfb      	adds	r3, r7, #7
 80005bc:	781b      	ldrb	r3, [r3, #0]
 80005be:	0019      	movs	r1, r3
 80005c0:	230f      	movs	r3, #15
 80005c2:	400b      	ands	r3, r1
 80005c4:	3b08      	subs	r3, #8
 80005c6:	089b      	lsrs	r3, r3, #2
 80005c8:	3306      	adds	r3, #6
 80005ca:	009b      	lsls	r3, r3, #2
 80005cc:	18d3      	adds	r3, r2, r3
 80005ce:	3304      	adds	r3, #4
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	1dfa      	adds	r2, r7, #7
 80005d4:	7812      	ldrb	r2, [r2, #0]
 80005d6:	0011      	movs	r1, r2
 80005d8:	2203      	movs	r2, #3
 80005da:	400a      	ands	r2, r1
 80005dc:	00d2      	lsls	r2, r2, #3
 80005de:	21ff      	movs	r1, #255	; 0xff
 80005e0:	4091      	lsls	r1, r2
 80005e2:	000a      	movs	r2, r1
 80005e4:	43d2      	mvns	r2, r2
 80005e6:	401a      	ands	r2, r3
 80005e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80005ea:	683b      	ldr	r3, [r7, #0]
 80005ec:	019b      	lsls	r3, r3, #6
 80005ee:	22ff      	movs	r2, #255	; 0xff
 80005f0:	401a      	ands	r2, r3
 80005f2:	1dfb      	adds	r3, r7, #7
 80005f4:	781b      	ldrb	r3, [r3, #0]
 80005f6:	0018      	movs	r0, r3
 80005f8:	2303      	movs	r3, #3
 80005fa:	4003      	ands	r3, r0
 80005fc:	00db      	lsls	r3, r3, #3
 80005fe:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <__NVIC_SetPriority+0xd8>)
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	001c      	movs	r4, r3
 8000608:	230f      	movs	r3, #15
 800060a:	4023      	ands	r3, r4
 800060c:	3b08      	subs	r3, #8
 800060e:	089b      	lsrs	r3, r3, #2
 8000610:	430a      	orrs	r2, r1
 8000612:	3306      	adds	r3, #6
 8000614:	009b      	lsls	r3, r3, #2
 8000616:	18c3      	adds	r3, r0, r3
 8000618:	3304      	adds	r3, #4
 800061a:	601a      	str	r2, [r3, #0]
}
 800061c:	46c0      	nop			; (mov r8, r8)
 800061e:	46bd      	mov	sp, r7
 8000620:	b003      	add	sp, #12
 8000622:	bd90      	pop	{r4, r7, pc}
 8000624:	e000e100 	.word	0xe000e100
 8000628:	e000ed00 	.word	0xe000ed00

0800062c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	1e5a      	subs	r2, r3, #1
 8000638:	2380      	movs	r3, #128	; 0x80
 800063a:	045b      	lsls	r3, r3, #17
 800063c:	429a      	cmp	r2, r3
 800063e:	d301      	bcc.n	8000644 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000640:	2301      	movs	r3, #1
 8000642:	e010      	b.n	8000666 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000644:	4b0a      	ldr	r3, [pc, #40]	; (8000670 <SysTick_Config+0x44>)
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	3a01      	subs	r2, #1
 800064a:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800064c:	2301      	movs	r3, #1
 800064e:	425b      	negs	r3, r3
 8000650:	2103      	movs	r1, #3
 8000652:	0018      	movs	r0, r3
 8000654:	f7ff ff7c 	bl	8000550 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000658:	4b05      	ldr	r3, [pc, #20]	; (8000670 <SysTick_Config+0x44>)
 800065a:	2200      	movs	r2, #0
 800065c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800065e:	4b04      	ldr	r3, [pc, #16]	; (8000670 <SysTick_Config+0x44>)
 8000660:	2207      	movs	r2, #7
 8000662:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000664:	2300      	movs	r3, #0
}
 8000666:	0018      	movs	r0, r3
 8000668:	46bd      	mov	sp, r7
 800066a:	b002      	add	sp, #8
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	e000e010 	.word	0xe000e010

08000674 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000674:	b580      	push	{r7, lr}
 8000676:	b084      	sub	sp, #16
 8000678:	af00      	add	r7, sp, #0
 800067a:	60b9      	str	r1, [r7, #8]
 800067c:	607a      	str	r2, [r7, #4]
 800067e:	210f      	movs	r1, #15
 8000680:	187b      	adds	r3, r7, r1
 8000682:	1c02      	adds	r2, r0, #0
 8000684:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8000686:	68ba      	ldr	r2, [r7, #8]
 8000688:	187b      	adds	r3, r7, r1
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	b25b      	sxtb	r3, r3
 800068e:	0011      	movs	r1, r2
 8000690:	0018      	movs	r0, r3
 8000692:	f7ff ff5d 	bl	8000550 <__NVIC_SetPriority>
}
 8000696:	46c0      	nop			; (mov r8, r8)
 8000698:	46bd      	mov	sp, r7
 800069a:	b004      	add	sp, #16
 800069c:	bd80      	pop	{r7, pc}

0800069e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800069e:	b580      	push	{r7, lr}
 80006a0:	b082      	sub	sp, #8
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	0018      	movs	r0, r3
 80006aa:	f7ff ffbf 	bl	800062c <SysTick_Config>
 80006ae:	0003      	movs	r3, r0
}
 80006b0:	0018      	movs	r0, r3
 80006b2:	46bd      	mov	sp, r7
 80006b4:	b002      	add	sp, #8
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b088      	sub	sp, #32
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80006c0:	687b      	ldr	r3, [r7, #4]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d101      	bne.n	80006ca <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80006c6:	2301      	movs	r3, #1
 80006c8:	e301      	b.n	8000cce <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	2201      	movs	r2, #1
 80006d0:	4013      	ands	r3, r2
 80006d2:	d100      	bne.n	80006d6 <HAL_RCC_OscConfig+0x1e>
 80006d4:	e08d      	b.n	80007f2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80006d6:	4bc3      	ldr	r3, [pc, #780]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	220c      	movs	r2, #12
 80006dc:	4013      	ands	r3, r2
 80006de:	2b04      	cmp	r3, #4
 80006e0:	d00e      	beq.n	8000700 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80006e2:	4bc0      	ldr	r3, [pc, #768]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80006e4:	685b      	ldr	r3, [r3, #4]
 80006e6:	220c      	movs	r2, #12
 80006e8:	4013      	ands	r3, r2
 80006ea:	2b08      	cmp	r3, #8
 80006ec:	d116      	bne.n	800071c <HAL_RCC_OscConfig+0x64>
 80006ee:	4bbd      	ldr	r3, [pc, #756]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80006f0:	685a      	ldr	r2, [r3, #4]
 80006f2:	2380      	movs	r3, #128	; 0x80
 80006f4:	025b      	lsls	r3, r3, #9
 80006f6:	401a      	ands	r2, r3
 80006f8:	2380      	movs	r3, #128	; 0x80
 80006fa:	025b      	lsls	r3, r3, #9
 80006fc:	429a      	cmp	r2, r3
 80006fe:	d10d      	bne.n	800071c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000700:	4bb8      	ldr	r3, [pc, #736]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000702:	681a      	ldr	r2, [r3, #0]
 8000704:	2380      	movs	r3, #128	; 0x80
 8000706:	029b      	lsls	r3, r3, #10
 8000708:	4013      	ands	r3, r2
 800070a:	d100      	bne.n	800070e <HAL_RCC_OscConfig+0x56>
 800070c:	e070      	b.n	80007f0 <HAL_RCC_OscConfig+0x138>
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	2b00      	cmp	r3, #0
 8000714:	d000      	beq.n	8000718 <HAL_RCC_OscConfig+0x60>
 8000716:	e06b      	b.n	80007f0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8000718:	2301      	movs	r3, #1
 800071a:	e2d8      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	685b      	ldr	r3, [r3, #4]
 8000720:	2b01      	cmp	r3, #1
 8000722:	d107      	bne.n	8000734 <HAL_RCC_OscConfig+0x7c>
 8000724:	4baf      	ldr	r3, [pc, #700]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000726:	681a      	ldr	r2, [r3, #0]
 8000728:	4bae      	ldr	r3, [pc, #696]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800072a:	2180      	movs	r1, #128	; 0x80
 800072c:	0249      	lsls	r1, r1, #9
 800072e:	430a      	orrs	r2, r1
 8000730:	601a      	str	r2, [r3, #0]
 8000732:	e02f      	b.n	8000794 <HAL_RCC_OscConfig+0xdc>
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	2b00      	cmp	r3, #0
 800073a:	d10c      	bne.n	8000756 <HAL_RCC_OscConfig+0x9e>
 800073c:	4ba9      	ldr	r3, [pc, #676]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800073e:	681a      	ldr	r2, [r3, #0]
 8000740:	4ba8      	ldr	r3, [pc, #672]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000742:	49a9      	ldr	r1, [pc, #676]	; (80009e8 <HAL_RCC_OscConfig+0x330>)
 8000744:	400a      	ands	r2, r1
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	4ba6      	ldr	r3, [pc, #664]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800074a:	681a      	ldr	r2, [r3, #0]
 800074c:	4ba5      	ldr	r3, [pc, #660]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800074e:	49a7      	ldr	r1, [pc, #668]	; (80009ec <HAL_RCC_OscConfig+0x334>)
 8000750:	400a      	ands	r2, r1
 8000752:	601a      	str	r2, [r3, #0]
 8000754:	e01e      	b.n	8000794 <HAL_RCC_OscConfig+0xdc>
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	685b      	ldr	r3, [r3, #4]
 800075a:	2b05      	cmp	r3, #5
 800075c:	d10e      	bne.n	800077c <HAL_RCC_OscConfig+0xc4>
 800075e:	4ba1      	ldr	r3, [pc, #644]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4ba0      	ldr	r3, [pc, #640]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000764:	2180      	movs	r1, #128	; 0x80
 8000766:	02c9      	lsls	r1, r1, #11
 8000768:	430a      	orrs	r2, r1
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	4b9d      	ldr	r3, [pc, #628]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800076e:	681a      	ldr	r2, [r3, #0]
 8000770:	4b9c      	ldr	r3, [pc, #624]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000772:	2180      	movs	r1, #128	; 0x80
 8000774:	0249      	lsls	r1, r1, #9
 8000776:	430a      	orrs	r2, r1
 8000778:	601a      	str	r2, [r3, #0]
 800077a:	e00b      	b.n	8000794 <HAL_RCC_OscConfig+0xdc>
 800077c:	4b99      	ldr	r3, [pc, #612]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	4b98      	ldr	r3, [pc, #608]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000782:	4999      	ldr	r1, [pc, #612]	; (80009e8 <HAL_RCC_OscConfig+0x330>)
 8000784:	400a      	ands	r2, r1
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	4b96      	ldr	r3, [pc, #600]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	4b95      	ldr	r3, [pc, #596]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800078e:	4997      	ldr	r1, [pc, #604]	; (80009ec <HAL_RCC_OscConfig+0x334>)
 8000790:	400a      	ands	r2, r1
 8000792:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	685b      	ldr	r3, [r3, #4]
 8000798:	2b00      	cmp	r3, #0
 800079a:	d014      	beq.n	80007c6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800079c:	f7ff fece 	bl	800053c <HAL_GetTick>
 80007a0:	0003      	movs	r3, r0
 80007a2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007a4:	e008      	b.n	80007b8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007a6:	f7ff fec9 	bl	800053c <HAL_GetTick>
 80007aa:	0002      	movs	r2, r0
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	1ad3      	subs	r3, r2, r3
 80007b0:	2b64      	cmp	r3, #100	; 0x64
 80007b2:	d901      	bls.n	80007b8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 80007b4:	2303      	movs	r3, #3
 80007b6:	e28a      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80007b8:	4b8a      	ldr	r3, [pc, #552]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	2380      	movs	r3, #128	; 0x80
 80007be:	029b      	lsls	r3, r3, #10
 80007c0:	4013      	ands	r3, r2
 80007c2:	d0f0      	beq.n	80007a6 <HAL_RCC_OscConfig+0xee>
 80007c4:	e015      	b.n	80007f2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80007c6:	f7ff feb9 	bl	800053c <HAL_GetTick>
 80007ca:	0003      	movs	r3, r0
 80007cc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007ce:	e008      	b.n	80007e2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80007d0:	f7ff feb4 	bl	800053c <HAL_GetTick>
 80007d4:	0002      	movs	r2, r0
 80007d6:	69bb      	ldr	r3, [r7, #24]
 80007d8:	1ad3      	subs	r3, r2, r3
 80007da:	2b64      	cmp	r3, #100	; 0x64
 80007dc:	d901      	bls.n	80007e2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 80007de:	2303      	movs	r3, #3
 80007e0:	e275      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80007e2:	4b80      	ldr	r3, [pc, #512]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	2380      	movs	r3, #128	; 0x80
 80007e8:	029b      	lsls	r3, r3, #10
 80007ea:	4013      	ands	r3, r2
 80007ec:	d1f0      	bne.n	80007d0 <HAL_RCC_OscConfig+0x118>
 80007ee:	e000      	b.n	80007f2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80007f0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	2202      	movs	r2, #2
 80007f8:	4013      	ands	r3, r2
 80007fa:	d100      	bne.n	80007fe <HAL_RCC_OscConfig+0x146>
 80007fc:	e069      	b.n	80008d2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80007fe:	4b79      	ldr	r3, [pc, #484]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000800:	685b      	ldr	r3, [r3, #4]
 8000802:	220c      	movs	r2, #12
 8000804:	4013      	ands	r3, r2
 8000806:	d00b      	beq.n	8000820 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000808:	4b76      	ldr	r3, [pc, #472]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800080a:	685b      	ldr	r3, [r3, #4]
 800080c:	220c      	movs	r2, #12
 800080e:	4013      	ands	r3, r2
 8000810:	2b08      	cmp	r3, #8
 8000812:	d11c      	bne.n	800084e <HAL_RCC_OscConfig+0x196>
 8000814:	4b73      	ldr	r3, [pc, #460]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000816:	685a      	ldr	r2, [r3, #4]
 8000818:	2380      	movs	r3, #128	; 0x80
 800081a:	025b      	lsls	r3, r3, #9
 800081c:	4013      	ands	r3, r2
 800081e:	d116      	bne.n	800084e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000820:	4b70      	ldr	r3, [pc, #448]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2202      	movs	r2, #2
 8000826:	4013      	ands	r3, r2
 8000828:	d005      	beq.n	8000836 <HAL_RCC_OscConfig+0x17e>
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	68db      	ldr	r3, [r3, #12]
 800082e:	2b01      	cmp	r3, #1
 8000830:	d001      	beq.n	8000836 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8000832:	2301      	movs	r3, #1
 8000834:	e24b      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000836:	4b6b      	ldr	r3, [pc, #428]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	22f8      	movs	r2, #248	; 0xf8
 800083c:	4393      	bics	r3, r2
 800083e:	0019      	movs	r1, r3
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	691b      	ldr	r3, [r3, #16]
 8000844:	00da      	lsls	r2, r3, #3
 8000846:	4b67      	ldr	r3, [pc, #412]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000848:	430a      	orrs	r2, r1
 800084a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800084c:	e041      	b.n	80008d2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	2b00      	cmp	r3, #0
 8000854:	d024      	beq.n	80008a0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000856:	4b63      	ldr	r3, [pc, #396]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000858:	681a      	ldr	r2, [r3, #0]
 800085a:	4b62      	ldr	r3, [pc, #392]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800085c:	2101      	movs	r1, #1
 800085e:	430a      	orrs	r2, r1
 8000860:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000862:	f7ff fe6b 	bl	800053c <HAL_GetTick>
 8000866:	0003      	movs	r3, r0
 8000868:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800086a:	e008      	b.n	800087e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800086c:	f7ff fe66 	bl	800053c <HAL_GetTick>
 8000870:	0002      	movs	r2, r0
 8000872:	69bb      	ldr	r3, [r7, #24]
 8000874:	1ad3      	subs	r3, r2, r3
 8000876:	2b02      	cmp	r3, #2
 8000878:	d901      	bls.n	800087e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800087a:	2303      	movs	r3, #3
 800087c:	e227      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800087e:	4b59      	ldr	r3, [pc, #356]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	2202      	movs	r2, #2
 8000884:	4013      	ands	r3, r2
 8000886:	d0f1      	beq.n	800086c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000888:	4b56      	ldr	r3, [pc, #344]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	22f8      	movs	r2, #248	; 0xf8
 800088e:	4393      	bics	r3, r2
 8000890:	0019      	movs	r1, r3
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	691b      	ldr	r3, [r3, #16]
 8000896:	00da      	lsls	r2, r3, #3
 8000898:	4b52      	ldr	r3, [pc, #328]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800089a:	430a      	orrs	r2, r1
 800089c:	601a      	str	r2, [r3, #0]
 800089e:	e018      	b.n	80008d2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80008a0:	4b50      	ldr	r3, [pc, #320]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b4f      	ldr	r3, [pc, #316]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80008a6:	2101      	movs	r1, #1
 80008a8:	438a      	bics	r2, r1
 80008aa:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80008ac:	f7ff fe46 	bl	800053c <HAL_GetTick>
 80008b0:	0003      	movs	r3, r0
 80008b2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008b4:	e008      	b.n	80008c8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80008b6:	f7ff fe41 	bl	800053c <HAL_GetTick>
 80008ba:	0002      	movs	r2, r0
 80008bc:	69bb      	ldr	r3, [r7, #24]
 80008be:	1ad3      	subs	r3, r2, r3
 80008c0:	2b02      	cmp	r3, #2
 80008c2:	d901      	bls.n	80008c8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80008c4:	2303      	movs	r3, #3
 80008c6:	e202      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80008c8:	4b46      	ldr	r3, [pc, #280]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2202      	movs	r2, #2
 80008ce:	4013      	ands	r3, r2
 80008d0:	d1f1      	bne.n	80008b6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	2208      	movs	r2, #8
 80008d8:	4013      	ands	r3, r2
 80008da:	d036      	beq.n	800094a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	69db      	ldr	r3, [r3, #28]
 80008e0:	2b00      	cmp	r3, #0
 80008e2:	d019      	beq.n	8000918 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80008e4:	4b3f      	ldr	r3, [pc, #252]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80008e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80008e8:	4b3e      	ldr	r3, [pc, #248]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80008ea:	2101      	movs	r1, #1
 80008ec:	430a      	orrs	r2, r1
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80008f0:	f7ff fe24 	bl	800053c <HAL_GetTick>
 80008f4:	0003      	movs	r3, r0
 80008f6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008f8:	e008      	b.n	800090c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80008fa:	f7ff fe1f 	bl	800053c <HAL_GetTick>
 80008fe:	0002      	movs	r2, r0
 8000900:	69bb      	ldr	r3, [r7, #24]
 8000902:	1ad3      	subs	r3, r2, r3
 8000904:	2b02      	cmp	r3, #2
 8000906:	d901      	bls.n	800090c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8000908:	2303      	movs	r3, #3
 800090a:	e1e0      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800090c:	4b35      	ldr	r3, [pc, #212]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800090e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000910:	2202      	movs	r2, #2
 8000912:	4013      	ands	r3, r2
 8000914:	d0f1      	beq.n	80008fa <HAL_RCC_OscConfig+0x242>
 8000916:	e018      	b.n	800094a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000918:	4b32      	ldr	r3, [pc, #200]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800091a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800091c:	4b31      	ldr	r3, [pc, #196]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800091e:	2101      	movs	r1, #1
 8000920:	438a      	bics	r2, r1
 8000922:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000924:	f7ff fe0a 	bl	800053c <HAL_GetTick>
 8000928:	0003      	movs	r3, r0
 800092a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800092c:	e008      	b.n	8000940 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800092e:	f7ff fe05 	bl	800053c <HAL_GetTick>
 8000932:	0002      	movs	r2, r0
 8000934:	69bb      	ldr	r3, [r7, #24]
 8000936:	1ad3      	subs	r3, r2, r3
 8000938:	2b02      	cmp	r3, #2
 800093a:	d901      	bls.n	8000940 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800093c:	2303      	movs	r3, #3
 800093e:	e1c6      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000940:	4b28      	ldr	r3, [pc, #160]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000942:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000944:	2202      	movs	r2, #2
 8000946:	4013      	ands	r3, r2
 8000948:	d1f1      	bne.n	800092e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	681b      	ldr	r3, [r3, #0]
 800094e:	2204      	movs	r2, #4
 8000950:	4013      	ands	r3, r2
 8000952:	d100      	bne.n	8000956 <HAL_RCC_OscConfig+0x29e>
 8000954:	e0b4      	b.n	8000ac0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000956:	201f      	movs	r0, #31
 8000958:	183b      	adds	r3, r7, r0
 800095a:	2200      	movs	r2, #0
 800095c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800095e:	4b21      	ldr	r3, [pc, #132]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000960:	69da      	ldr	r2, [r3, #28]
 8000962:	2380      	movs	r3, #128	; 0x80
 8000964:	055b      	lsls	r3, r3, #21
 8000966:	4013      	ands	r3, r2
 8000968:	d110      	bne.n	800098c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800096a:	4b1e      	ldr	r3, [pc, #120]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800096c:	69da      	ldr	r2, [r3, #28]
 800096e:	4b1d      	ldr	r3, [pc, #116]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 8000970:	2180      	movs	r1, #128	; 0x80
 8000972:	0549      	lsls	r1, r1, #21
 8000974:	430a      	orrs	r2, r1
 8000976:	61da      	str	r2, [r3, #28]
 8000978:	4b1a      	ldr	r3, [pc, #104]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 800097a:	69da      	ldr	r2, [r3, #28]
 800097c:	2380      	movs	r3, #128	; 0x80
 800097e:	055b      	lsls	r3, r3, #21
 8000980:	4013      	ands	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]
 8000984:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000986:	183b      	adds	r3, r7, r0
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800098c:	4b18      	ldr	r3, [pc, #96]	; (80009f0 <HAL_RCC_OscConfig+0x338>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	2380      	movs	r3, #128	; 0x80
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	4013      	ands	r3, r2
 8000996:	d11a      	bne.n	80009ce <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000998:	4b15      	ldr	r3, [pc, #84]	; (80009f0 <HAL_RCC_OscConfig+0x338>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b14      	ldr	r3, [pc, #80]	; (80009f0 <HAL_RCC_OscConfig+0x338>)
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	0049      	lsls	r1, r1, #1
 80009a2:	430a      	orrs	r2, r1
 80009a4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80009a6:	f7ff fdc9 	bl	800053c <HAL_GetTick>
 80009aa:	0003      	movs	r3, r0
 80009ac:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009ae:	e008      	b.n	80009c2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009b0:	f7ff fdc4 	bl	800053c <HAL_GetTick>
 80009b4:	0002      	movs	r2, r0
 80009b6:	69bb      	ldr	r3, [r7, #24]
 80009b8:	1ad3      	subs	r3, r2, r3
 80009ba:	2b64      	cmp	r3, #100	; 0x64
 80009bc:	d901      	bls.n	80009c2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80009be:	2303      	movs	r3, #3
 80009c0:	e185      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009c2:	4b0b      	ldr	r3, [pc, #44]	; (80009f0 <HAL_RCC_OscConfig+0x338>)
 80009c4:	681a      	ldr	r2, [r3, #0]
 80009c6:	2380      	movs	r3, #128	; 0x80
 80009c8:	005b      	lsls	r3, r3, #1
 80009ca:	4013      	ands	r3, r2
 80009cc:	d0f0      	beq.n	80009b0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	689b      	ldr	r3, [r3, #8]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	d10e      	bne.n	80009f4 <HAL_RCC_OscConfig+0x33c>
 80009d6:	4b03      	ldr	r3, [pc, #12]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80009d8:	6a1a      	ldr	r2, [r3, #32]
 80009da:	4b02      	ldr	r3, [pc, #8]	; (80009e4 <HAL_RCC_OscConfig+0x32c>)
 80009dc:	2101      	movs	r1, #1
 80009de:	430a      	orrs	r2, r1
 80009e0:	621a      	str	r2, [r3, #32]
 80009e2:	e035      	b.n	8000a50 <HAL_RCC_OscConfig+0x398>
 80009e4:	40021000 	.word	0x40021000
 80009e8:	fffeffff 	.word	0xfffeffff
 80009ec:	fffbffff 	.word	0xfffbffff
 80009f0:	40007000 	.word	0x40007000
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	689b      	ldr	r3, [r3, #8]
 80009f8:	2b00      	cmp	r3, #0
 80009fa:	d10c      	bne.n	8000a16 <HAL_RCC_OscConfig+0x35e>
 80009fc:	4bb6      	ldr	r3, [pc, #728]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 80009fe:	6a1a      	ldr	r2, [r3, #32]
 8000a00:	4bb5      	ldr	r3, [pc, #724]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a02:	2101      	movs	r1, #1
 8000a04:	438a      	bics	r2, r1
 8000a06:	621a      	str	r2, [r3, #32]
 8000a08:	4bb3      	ldr	r3, [pc, #716]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a0a:	6a1a      	ldr	r2, [r3, #32]
 8000a0c:	4bb2      	ldr	r3, [pc, #712]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a0e:	2104      	movs	r1, #4
 8000a10:	438a      	bics	r2, r1
 8000a12:	621a      	str	r2, [r3, #32]
 8000a14:	e01c      	b.n	8000a50 <HAL_RCC_OscConfig+0x398>
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	689b      	ldr	r3, [r3, #8]
 8000a1a:	2b05      	cmp	r3, #5
 8000a1c:	d10c      	bne.n	8000a38 <HAL_RCC_OscConfig+0x380>
 8000a1e:	4bae      	ldr	r3, [pc, #696]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a20:	6a1a      	ldr	r2, [r3, #32]
 8000a22:	4bad      	ldr	r3, [pc, #692]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a24:	2104      	movs	r1, #4
 8000a26:	430a      	orrs	r2, r1
 8000a28:	621a      	str	r2, [r3, #32]
 8000a2a:	4bab      	ldr	r3, [pc, #684]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a2c:	6a1a      	ldr	r2, [r3, #32]
 8000a2e:	4baa      	ldr	r3, [pc, #680]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a30:	2101      	movs	r1, #1
 8000a32:	430a      	orrs	r2, r1
 8000a34:	621a      	str	r2, [r3, #32]
 8000a36:	e00b      	b.n	8000a50 <HAL_RCC_OscConfig+0x398>
 8000a38:	4ba7      	ldr	r3, [pc, #668]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a3a:	6a1a      	ldr	r2, [r3, #32]
 8000a3c:	4ba6      	ldr	r3, [pc, #664]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a3e:	2101      	movs	r1, #1
 8000a40:	438a      	bics	r2, r1
 8000a42:	621a      	str	r2, [r3, #32]
 8000a44:	4ba4      	ldr	r3, [pc, #656]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a46:	6a1a      	ldr	r2, [r3, #32]
 8000a48:	4ba3      	ldr	r3, [pc, #652]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a4a:	2104      	movs	r1, #4
 8000a4c:	438a      	bics	r2, r1
 8000a4e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	689b      	ldr	r3, [r3, #8]
 8000a54:	2b00      	cmp	r3, #0
 8000a56:	d014      	beq.n	8000a82 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a58:	f7ff fd70 	bl	800053c <HAL_GetTick>
 8000a5c:	0003      	movs	r3, r0
 8000a5e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a60:	e009      	b.n	8000a76 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a62:	f7ff fd6b 	bl	800053c <HAL_GetTick>
 8000a66:	0002      	movs	r2, r0
 8000a68:	69bb      	ldr	r3, [r7, #24]
 8000a6a:	1ad3      	subs	r3, r2, r3
 8000a6c:	4a9b      	ldr	r2, [pc, #620]	; (8000cdc <HAL_RCC_OscConfig+0x624>)
 8000a6e:	4293      	cmp	r3, r2
 8000a70:	d901      	bls.n	8000a76 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8000a72:	2303      	movs	r3, #3
 8000a74:	e12b      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000a76:	4b98      	ldr	r3, [pc, #608]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000a78:	6a1b      	ldr	r3, [r3, #32]
 8000a7a:	2202      	movs	r2, #2
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	d0f0      	beq.n	8000a62 <HAL_RCC_OscConfig+0x3aa>
 8000a80:	e013      	b.n	8000aaa <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000a82:	f7ff fd5b 	bl	800053c <HAL_GetTick>
 8000a86:	0003      	movs	r3, r0
 8000a88:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a8a:	e009      	b.n	8000aa0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a8c:	f7ff fd56 	bl	800053c <HAL_GetTick>
 8000a90:	0002      	movs	r2, r0
 8000a92:	69bb      	ldr	r3, [r7, #24]
 8000a94:	1ad3      	subs	r3, r2, r3
 8000a96:	4a91      	ldr	r2, [pc, #580]	; (8000cdc <HAL_RCC_OscConfig+0x624>)
 8000a98:	4293      	cmp	r3, r2
 8000a9a:	d901      	bls.n	8000aa0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8000a9c:	2303      	movs	r3, #3
 8000a9e:	e116      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000aa0:	4b8d      	ldr	r3, [pc, #564]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000aa2:	6a1b      	ldr	r3, [r3, #32]
 8000aa4:	2202      	movs	r2, #2
 8000aa6:	4013      	ands	r3, r2
 8000aa8:	d1f0      	bne.n	8000a8c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000aaa:	231f      	movs	r3, #31
 8000aac:	18fb      	adds	r3, r7, r3
 8000aae:	781b      	ldrb	r3, [r3, #0]
 8000ab0:	2b01      	cmp	r3, #1
 8000ab2:	d105      	bne.n	8000ac0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000ab4:	4b88      	ldr	r3, [pc, #544]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000ab6:	69da      	ldr	r2, [r3, #28]
 8000ab8:	4b87      	ldr	r3, [pc, #540]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000aba:	4989      	ldr	r1, [pc, #548]	; (8000ce0 <HAL_RCC_OscConfig+0x628>)
 8000abc:	400a      	ands	r2, r1
 8000abe:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	2210      	movs	r2, #16
 8000ac6:	4013      	ands	r3, r2
 8000ac8:	d063      	beq.n	8000b92 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	695b      	ldr	r3, [r3, #20]
 8000ace:	2b01      	cmp	r3, #1
 8000ad0:	d12a      	bne.n	8000b28 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000ad2:	4b81      	ldr	r3, [pc, #516]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000ad4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ad6:	4b80      	ldr	r3, [pc, #512]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000ad8:	2104      	movs	r1, #4
 8000ada:	430a      	orrs	r2, r1
 8000adc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8000ade:	4b7e      	ldr	r3, [pc, #504]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000ae0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ae2:	4b7d      	ldr	r3, [pc, #500]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000ae4:	2101      	movs	r1, #1
 8000ae6:	430a      	orrs	r2, r1
 8000ae8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000aea:	f7ff fd27 	bl	800053c <HAL_GetTick>
 8000aee:	0003      	movs	r3, r0
 8000af0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000af2:	e008      	b.n	8000b06 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000af4:	f7ff fd22 	bl	800053c <HAL_GetTick>
 8000af8:	0002      	movs	r2, r0
 8000afa:	69bb      	ldr	r3, [r7, #24]
 8000afc:	1ad3      	subs	r3, r2, r3
 8000afe:	2b02      	cmp	r3, #2
 8000b00:	d901      	bls.n	8000b06 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8000b02:	2303      	movs	r3, #3
 8000b04:	e0e3      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8000b06:	4b74      	ldr	r3, [pc, #464]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b0a:	2202      	movs	r2, #2
 8000b0c:	4013      	ands	r3, r2
 8000b0e:	d0f1      	beq.n	8000af4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b10:	4b71      	ldr	r3, [pc, #452]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b12:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b14:	22f8      	movs	r2, #248	; 0xf8
 8000b16:	4393      	bics	r3, r2
 8000b18:	0019      	movs	r1, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	699b      	ldr	r3, [r3, #24]
 8000b1e:	00da      	lsls	r2, r3, #3
 8000b20:	4b6d      	ldr	r3, [pc, #436]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b22:	430a      	orrs	r2, r1
 8000b24:	635a      	str	r2, [r3, #52]	; 0x34
 8000b26:	e034      	b.n	8000b92 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	695b      	ldr	r3, [r3, #20]
 8000b2c:	3305      	adds	r3, #5
 8000b2e:	d111      	bne.n	8000b54 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8000b30:	4b69      	ldr	r3, [pc, #420]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b34:	4b68      	ldr	r3, [pc, #416]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b36:	2104      	movs	r1, #4
 8000b38:	438a      	bics	r2, r1
 8000b3a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8000b3c:	4b66      	ldr	r3, [pc, #408]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b40:	22f8      	movs	r2, #248	; 0xf8
 8000b42:	4393      	bics	r3, r2
 8000b44:	0019      	movs	r1, r3
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	699b      	ldr	r3, [r3, #24]
 8000b4a:	00da      	lsls	r2, r3, #3
 8000b4c:	4b62      	ldr	r3, [pc, #392]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b4e:	430a      	orrs	r2, r1
 8000b50:	635a      	str	r2, [r3, #52]	; 0x34
 8000b52:	e01e      	b.n	8000b92 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8000b54:	4b60      	ldr	r3, [pc, #384]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b58:	4b5f      	ldr	r3, [pc, #380]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b5a:	2104      	movs	r1, #4
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8000b60:	4b5d      	ldr	r3, [pc, #372]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b64:	4b5c      	ldr	r3, [pc, #368]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b66:	2101      	movs	r1, #1
 8000b68:	438a      	bics	r2, r1
 8000b6a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000b6c:	f7ff fce6 	bl	800053c <HAL_GetTick>
 8000b70:	0003      	movs	r3, r0
 8000b72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000b74:	e008      	b.n	8000b88 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8000b76:	f7ff fce1 	bl	800053c <HAL_GetTick>
 8000b7a:	0002      	movs	r2, r0
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	1ad3      	subs	r3, r2, r3
 8000b80:	2b02      	cmp	r3, #2
 8000b82:	d901      	bls.n	8000b88 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8000b84:	2303      	movs	r3, #3
 8000b86:	e0a2      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8000b88:	4b53      	ldr	r3, [pc, #332]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b8c:	2202      	movs	r2, #2
 8000b8e:	4013      	ands	r3, r2
 8000b90:	d1f1      	bne.n	8000b76 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	6a1b      	ldr	r3, [r3, #32]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d100      	bne.n	8000b9c <HAL_RCC_OscConfig+0x4e4>
 8000b9a:	e097      	b.n	8000ccc <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000b9c:	4b4e      	ldr	r3, [pc, #312]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000b9e:	685b      	ldr	r3, [r3, #4]
 8000ba0:	220c      	movs	r2, #12
 8000ba2:	4013      	ands	r3, r2
 8000ba4:	2b08      	cmp	r3, #8
 8000ba6:	d100      	bne.n	8000baa <HAL_RCC_OscConfig+0x4f2>
 8000ba8:	e06b      	b.n	8000c82 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6a1b      	ldr	r3, [r3, #32]
 8000bae:	2b02      	cmp	r3, #2
 8000bb0:	d14c      	bne.n	8000c4c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000bb2:	4b49      	ldr	r3, [pc, #292]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000bb4:	681a      	ldr	r2, [r3, #0]
 8000bb6:	4b48      	ldr	r3, [pc, #288]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000bb8:	494a      	ldr	r1, [pc, #296]	; (8000ce4 <HAL_RCC_OscConfig+0x62c>)
 8000bba:	400a      	ands	r2, r1
 8000bbc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bbe:	f7ff fcbd 	bl	800053c <HAL_GetTick>
 8000bc2:	0003      	movs	r3, r0
 8000bc4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bc6:	e008      	b.n	8000bda <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000bc8:	f7ff fcb8 	bl	800053c <HAL_GetTick>
 8000bcc:	0002      	movs	r2, r0
 8000bce:	69bb      	ldr	r3, [r7, #24]
 8000bd0:	1ad3      	subs	r3, r2, r3
 8000bd2:	2b02      	cmp	r3, #2
 8000bd4:	d901      	bls.n	8000bda <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	e079      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000bda:	4b3f      	ldr	r3, [pc, #252]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000bdc:	681a      	ldr	r2, [r3, #0]
 8000bde:	2380      	movs	r3, #128	; 0x80
 8000be0:	049b      	lsls	r3, r3, #18
 8000be2:	4013      	ands	r3, r2
 8000be4:	d1f0      	bne.n	8000bc8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000be6:	4b3c      	ldr	r3, [pc, #240]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000be8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bea:	220f      	movs	r2, #15
 8000bec:	4393      	bics	r3, r2
 8000bee:	0019      	movs	r1, r3
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000bf4:	4b38      	ldr	r3, [pc, #224]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000bf6:	430a      	orrs	r2, r1
 8000bf8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bfa:	4b37      	ldr	r3, [pc, #220]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000bfc:	685b      	ldr	r3, [r3, #4]
 8000bfe:	4a3a      	ldr	r2, [pc, #232]	; (8000ce8 <HAL_RCC_OscConfig+0x630>)
 8000c00:	4013      	ands	r3, r2
 8000c02:	0019      	movs	r1, r3
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c0c:	431a      	orrs	r2, r3
 8000c0e:	4b32      	ldr	r3, [pc, #200]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000c10:	430a      	orrs	r2, r1
 8000c12:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000c14:	4b30      	ldr	r3, [pc, #192]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000c16:	681a      	ldr	r2, [r3, #0]
 8000c18:	4b2f      	ldr	r3, [pc, #188]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000c1a:	2180      	movs	r1, #128	; 0x80
 8000c1c:	0449      	lsls	r1, r1, #17
 8000c1e:	430a      	orrs	r2, r1
 8000c20:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c22:	f7ff fc8b 	bl	800053c <HAL_GetTick>
 8000c26:	0003      	movs	r3, r0
 8000c28:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c2a:	e008      	b.n	8000c3e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c2c:	f7ff fc86 	bl	800053c <HAL_GetTick>
 8000c30:	0002      	movs	r2, r0
 8000c32:	69bb      	ldr	r3, [r7, #24]
 8000c34:	1ad3      	subs	r3, r2, r3
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	d901      	bls.n	8000c3e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8000c3a:	2303      	movs	r3, #3
 8000c3c:	e047      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000c3e:	4b26      	ldr	r3, [pc, #152]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000c40:	681a      	ldr	r2, [r3, #0]
 8000c42:	2380      	movs	r3, #128	; 0x80
 8000c44:	049b      	lsls	r3, r3, #18
 8000c46:	4013      	ands	r3, r2
 8000c48:	d0f0      	beq.n	8000c2c <HAL_RCC_OscConfig+0x574>
 8000c4a:	e03f      	b.n	8000ccc <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	4b21      	ldr	r3, [pc, #132]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000c52:	4924      	ldr	r1, [pc, #144]	; (8000ce4 <HAL_RCC_OscConfig+0x62c>)
 8000c54:	400a      	ands	r2, r1
 8000c56:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c58:	f7ff fc70 	bl	800053c <HAL_GetTick>
 8000c5c:	0003      	movs	r3, r0
 8000c5e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c60:	e008      	b.n	8000c74 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000c62:	f7ff fc6b 	bl	800053c <HAL_GetTick>
 8000c66:	0002      	movs	r2, r0
 8000c68:	69bb      	ldr	r3, [r7, #24]
 8000c6a:	1ad3      	subs	r3, r2, r3
 8000c6c:	2b02      	cmp	r3, #2
 8000c6e:	d901      	bls.n	8000c74 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8000c70:	2303      	movs	r3, #3
 8000c72:	e02c      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000c74:	4b18      	ldr	r3, [pc, #96]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000c76:	681a      	ldr	r2, [r3, #0]
 8000c78:	2380      	movs	r3, #128	; 0x80
 8000c7a:	049b      	lsls	r3, r3, #18
 8000c7c:	4013      	ands	r3, r2
 8000c7e:	d1f0      	bne.n	8000c62 <HAL_RCC_OscConfig+0x5aa>
 8000c80:	e024      	b.n	8000ccc <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	6a1b      	ldr	r3, [r3, #32]
 8000c86:	2b01      	cmp	r3, #1
 8000c88:	d101      	bne.n	8000c8e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8000c8a:	2301      	movs	r3, #1
 8000c8c:	e01f      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000c90:	685b      	ldr	r3, [r3, #4]
 8000c92:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8000c94:	4b10      	ldr	r3, [pc, #64]	; (8000cd8 <HAL_RCC_OscConfig+0x620>)
 8000c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000c98:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000c9a:	697a      	ldr	r2, [r7, #20]
 8000c9c:	2380      	movs	r3, #128	; 0x80
 8000c9e:	025b      	lsls	r3, r3, #9
 8000ca0:	401a      	ands	r2, r3
 8000ca2:	687b      	ldr	r3, [r7, #4]
 8000ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d10e      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000caa:	693b      	ldr	r3, [r7, #16]
 8000cac:	220f      	movs	r2, #15
 8000cae:	401a      	ands	r2, r3
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8000cb4:	429a      	cmp	r2, r3
 8000cb6:	d107      	bne.n	8000cc8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8000cb8:	697a      	ldr	r2, [r7, #20]
 8000cba:	23f0      	movs	r3, #240	; 0xf0
 8000cbc:	039b      	lsls	r3, r3, #14
 8000cbe:	401a      	ands	r2, r3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d001      	beq.n	8000ccc <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	e000      	b.n	8000cce <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8000ccc:	2300      	movs	r3, #0
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b008      	add	sp, #32
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	46c0      	nop			; (mov r8, r8)
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	00001388 	.word	0x00001388
 8000ce0:	efffffff 	.word	0xefffffff
 8000ce4:	feffffff 	.word	0xfeffffff
 8000ce8:	ffc2ffff 	.word	0xffc2ffff

08000cec <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8000cec:	b580      	push	{r7, lr}
 8000cee:	b084      	sub	sp, #16
 8000cf0:	af00      	add	r7, sp, #0
 8000cf2:	6078      	str	r0, [r7, #4]
 8000cf4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d101      	bne.n	8000d00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8000cfc:	2301      	movs	r3, #1
 8000cfe:	e0b3      	b.n	8000e68 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000d00:	4b5b      	ldr	r3, [pc, #364]	; (8000e70 <HAL_RCC_ClockConfig+0x184>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2201      	movs	r2, #1
 8000d06:	4013      	ands	r3, r2
 8000d08:	683a      	ldr	r2, [r7, #0]
 8000d0a:	429a      	cmp	r2, r3
 8000d0c:	d911      	bls.n	8000d32 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d0e:	4b58      	ldr	r3, [pc, #352]	; (8000e70 <HAL_RCC_ClockConfig+0x184>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2201      	movs	r2, #1
 8000d14:	4393      	bics	r3, r2
 8000d16:	0019      	movs	r1, r3
 8000d18:	4b55      	ldr	r3, [pc, #340]	; (8000e70 <HAL_RCC_ClockConfig+0x184>)
 8000d1a:	683a      	ldr	r2, [r7, #0]
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000d20:	4b53      	ldr	r3, [pc, #332]	; (8000e70 <HAL_RCC_ClockConfig+0x184>)
 8000d22:	681b      	ldr	r3, [r3, #0]
 8000d24:	2201      	movs	r2, #1
 8000d26:	4013      	ands	r3, r2
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	429a      	cmp	r2, r3
 8000d2c:	d001      	beq.n	8000d32 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	e09a      	b.n	8000e68 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	2202      	movs	r2, #2
 8000d38:	4013      	ands	r3, r2
 8000d3a:	d015      	beq.n	8000d68 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	2204      	movs	r2, #4
 8000d42:	4013      	ands	r3, r2
 8000d44:	d006      	beq.n	8000d54 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8000d46:	4b4b      	ldr	r3, [pc, #300]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	4b4a      	ldr	r3, [pc, #296]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000d4c:	21e0      	movs	r1, #224	; 0xe0
 8000d4e:	00c9      	lsls	r1, r1, #3
 8000d50:	430a      	orrs	r2, r1
 8000d52:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000d54:	4b47      	ldr	r3, [pc, #284]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000d56:	685b      	ldr	r3, [r3, #4]
 8000d58:	22f0      	movs	r2, #240	; 0xf0
 8000d5a:	4393      	bics	r3, r2
 8000d5c:	0019      	movs	r1, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	4b44      	ldr	r3, [pc, #272]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000d64:	430a      	orrs	r2, r1
 8000d66:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	4013      	ands	r3, r2
 8000d70:	d040      	beq.n	8000df4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	2b01      	cmp	r3, #1
 8000d78:	d107      	bne.n	8000d8a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d7a:	4b3e      	ldr	r3, [pc, #248]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000d7c:	681a      	ldr	r2, [r3, #0]
 8000d7e:	2380      	movs	r3, #128	; 0x80
 8000d80:	029b      	lsls	r3, r3, #10
 8000d82:	4013      	ands	r3, r2
 8000d84:	d114      	bne.n	8000db0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000d86:	2301      	movs	r3, #1
 8000d88:	e06e      	b.n	8000e68 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	685b      	ldr	r3, [r3, #4]
 8000d8e:	2b02      	cmp	r3, #2
 8000d90:	d107      	bne.n	8000da2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000d92:	4b38      	ldr	r3, [pc, #224]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	2380      	movs	r3, #128	; 0x80
 8000d98:	049b      	lsls	r3, r3, #18
 8000d9a:	4013      	ands	r3, r2
 8000d9c:	d108      	bne.n	8000db0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000d9e:	2301      	movs	r3, #1
 8000da0:	e062      	b.n	8000e68 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000da2:	4b34      	ldr	r3, [pc, #208]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	2202      	movs	r2, #2
 8000da8:	4013      	ands	r3, r2
 8000daa:	d101      	bne.n	8000db0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	e05b      	b.n	8000e68 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000db0:	4b30      	ldr	r3, [pc, #192]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	2203      	movs	r2, #3
 8000db6:	4393      	bics	r3, r2
 8000db8:	0019      	movs	r1, r3
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	685a      	ldr	r2, [r3, #4]
 8000dbe:	4b2d      	ldr	r3, [pc, #180]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000dc0:	430a      	orrs	r2, r1
 8000dc2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8000dc4:	f7ff fbba 	bl	800053c <HAL_GetTick>
 8000dc8:	0003      	movs	r3, r0
 8000dca:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000dcc:	e009      	b.n	8000de2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000dce:	f7ff fbb5 	bl	800053c <HAL_GetTick>
 8000dd2:	0002      	movs	r2, r0
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	4a27      	ldr	r2, [pc, #156]	; (8000e78 <HAL_RCC_ClockConfig+0x18c>)
 8000dda:	4293      	cmp	r3, r2
 8000ddc:	d901      	bls.n	8000de2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8000dde:	2303      	movs	r3, #3
 8000de0:	e042      	b.n	8000e68 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000de2:	4b24      	ldr	r3, [pc, #144]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	220c      	movs	r2, #12
 8000de8:	401a      	ands	r2, r3
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	009b      	lsls	r3, r3, #2
 8000df0:	429a      	cmp	r2, r3
 8000df2:	d1ec      	bne.n	8000dce <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <HAL_RCC_ClockConfig+0x184>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	683a      	ldr	r2, [r7, #0]
 8000dfe:	429a      	cmp	r2, r3
 8000e00:	d211      	bcs.n	8000e26 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000e02:	4b1b      	ldr	r3, [pc, #108]	; (8000e70 <HAL_RCC_ClockConfig+0x184>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2201      	movs	r2, #1
 8000e08:	4393      	bics	r3, r2
 8000e0a:	0019      	movs	r1, r3
 8000e0c:	4b18      	ldr	r3, [pc, #96]	; (8000e70 <HAL_RCC_ClockConfig+0x184>)
 8000e0e:	683a      	ldr	r2, [r7, #0]
 8000e10:	430a      	orrs	r2, r1
 8000e12:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000e14:	4b16      	ldr	r3, [pc, #88]	; (8000e70 <HAL_RCC_ClockConfig+0x184>)
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	2201      	movs	r2, #1
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	683a      	ldr	r2, [r7, #0]
 8000e1e:	429a      	cmp	r2, r3
 8000e20:	d001      	beq.n	8000e26 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8000e22:	2301      	movs	r3, #1
 8000e24:	e020      	b.n	8000e68 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	2204      	movs	r2, #4
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	d009      	beq.n	8000e44 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8000e30:	4b10      	ldr	r3, [pc, #64]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000e32:	685b      	ldr	r3, [r3, #4]
 8000e34:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <HAL_RCC_ClockConfig+0x190>)
 8000e36:	4013      	ands	r3, r2
 8000e38:	0019      	movs	r1, r3
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	68da      	ldr	r2, [r3, #12]
 8000e3e:	4b0d      	ldr	r3, [pc, #52]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000e40:	430a      	orrs	r2, r1
 8000e42:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000e44:	f000 f820 	bl	8000e88 <HAL_RCC_GetSysClockFreq>
 8000e48:	0001      	movs	r1, r0
 8000e4a:	4b0a      	ldr	r3, [pc, #40]	; (8000e74 <HAL_RCC_ClockConfig+0x188>)
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	091b      	lsrs	r3, r3, #4
 8000e50:	220f      	movs	r2, #15
 8000e52:	4013      	ands	r3, r2
 8000e54:	4a0a      	ldr	r2, [pc, #40]	; (8000e80 <HAL_RCC_ClockConfig+0x194>)
 8000e56:	5cd3      	ldrb	r3, [r2, r3]
 8000e58:	000a      	movs	r2, r1
 8000e5a:	40da      	lsrs	r2, r3
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <HAL_RCC_ClockConfig+0x198>)
 8000e5e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8000e60:	2003      	movs	r0, #3
 8000e62:	f7ff fb25 	bl	80004b0 <HAL_InitTick>
  
  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	0018      	movs	r0, r3
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	b004      	add	sp, #16
 8000e6e:	bd80      	pop	{r7, pc}
 8000e70:	40022000 	.word	0x40022000
 8000e74:	40021000 	.word	0x40021000
 8000e78:	00001388 	.word	0x00001388
 8000e7c:	fffff8ff 	.word	0xfffff8ff
 8000e80:	08000fe4 	.word	0x08000fe4
 8000e84:	20000000 	.word	0x20000000

08000e88 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000e88:	b590      	push	{r4, r7, lr}
 8000e8a:	b08f      	sub	sp, #60	; 0x3c
 8000e8c:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8000e8e:	2314      	movs	r3, #20
 8000e90:	18fb      	adds	r3, r7, r3
 8000e92:	4a2b      	ldr	r2, [pc, #172]	; (8000f40 <HAL_RCC_GetSysClockFreq+0xb8>)
 8000e94:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000e96:	c313      	stmia	r3!, {r0, r1, r4}
 8000e98:	6812      	ldr	r2, [r2, #0]
 8000e9a:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8000e9c:	1d3b      	adds	r3, r7, #4
 8000e9e:	4a29      	ldr	r2, [pc, #164]	; (8000f44 <HAL_RCC_GetSysClockFreq+0xbc>)
 8000ea0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8000ea2:	c313      	stmia	r3!, {r0, r1, r4}
 8000ea4:	6812      	ldr	r2, [r2, #0]
 8000ea6:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000eac:	2300      	movs	r3, #0
 8000eae:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	637b      	str	r3, [r7, #52]	; 0x34
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8000ebc:	4b22      	ldr	r3, [pc, #136]	; (8000f48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ec4:	220c      	movs	r2, #12
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d002      	beq.n	8000ed2 <HAL_RCC_GetSysClockFreq+0x4a>
 8000ecc:	2b08      	cmp	r3, #8
 8000ece:	d003      	beq.n	8000ed8 <HAL_RCC_GetSysClockFreq+0x50>
 8000ed0:	e02d      	b.n	8000f2e <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8000ed2:	4b1e      	ldr	r3, [pc, #120]	; (8000f4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000ed4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000ed6:	e02d      	b.n	8000f34 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000ed8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000eda:	0c9b      	lsrs	r3, r3, #18
 8000edc:	220f      	movs	r2, #15
 8000ede:	4013      	ands	r3, r2
 8000ee0:	2214      	movs	r2, #20
 8000ee2:	18ba      	adds	r2, r7, r2
 8000ee4:	5cd3      	ldrb	r3, [r2, r3]
 8000ee6:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8000ee8:	4b17      	ldr	r3, [pc, #92]	; (8000f48 <HAL_RCC_GetSysClockFreq+0xc0>)
 8000eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000eec:	220f      	movs	r2, #15
 8000eee:	4013      	ands	r3, r2
 8000ef0:	1d3a      	adds	r2, r7, #4
 8000ef2:	5cd3      	ldrb	r3, [r2, r3]
 8000ef4:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8000ef6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000ef8:	2380      	movs	r3, #128	; 0x80
 8000efa:	025b      	lsls	r3, r3, #9
 8000efc:	4013      	ands	r3, r2
 8000efe:	d009      	beq.n	8000f14 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8000f00:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8000f02:	4812      	ldr	r0, [pc, #72]	; (8000f4c <HAL_RCC_GetSysClockFreq+0xc4>)
 8000f04:	f7ff f900 	bl	8000108 <__udivsi3>
 8000f08:	0003      	movs	r3, r0
 8000f0a:	001a      	movs	r2, r3
 8000f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f0e:	4353      	muls	r3, r2
 8000f10:	637b      	str	r3, [r7, #52]	; 0x34
 8000f12:	e009      	b.n	8000f28 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8000f14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8000f16:	000a      	movs	r2, r1
 8000f18:	0152      	lsls	r2, r2, #5
 8000f1a:	1a52      	subs	r2, r2, r1
 8000f1c:	0193      	lsls	r3, r2, #6
 8000f1e:	1a9b      	subs	r3, r3, r2
 8000f20:	00db      	lsls	r3, r3, #3
 8000f22:	185b      	adds	r3, r3, r1
 8000f24:	021b      	lsls	r3, r3, #8
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8000f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f2a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f2c:	e002      	b.n	8000f34 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8000f2e:	4b08      	ldr	r3, [pc, #32]	; (8000f50 <HAL_RCC_GetSysClockFreq+0xc8>)
 8000f30:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8000f32:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8000f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8000f36:	0018      	movs	r0, r3
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	b00f      	add	sp, #60	; 0x3c
 8000f3c:	bd90      	pop	{r4, r7, pc}
 8000f3e:	46c0      	nop			; (mov r8, r8)
 8000f40:	08000fc4 	.word	0x08000fc4
 8000f44:	08000fd4 	.word	0x08000fd4
 8000f48:	40021000 	.word	0x40021000
 8000f4c:	00f42400 	.word	0x00f42400
 8000f50:	007a1200 	.word	0x007a1200

08000f54 <__libc_init_array>:
 8000f54:	b570      	push	{r4, r5, r6, lr}
 8000f56:	2600      	movs	r6, #0
 8000f58:	4d0c      	ldr	r5, [pc, #48]	; (8000f8c <__libc_init_array+0x38>)
 8000f5a:	4c0d      	ldr	r4, [pc, #52]	; (8000f90 <__libc_init_array+0x3c>)
 8000f5c:	1b64      	subs	r4, r4, r5
 8000f5e:	10a4      	asrs	r4, r4, #2
 8000f60:	42a6      	cmp	r6, r4
 8000f62:	d109      	bne.n	8000f78 <__libc_init_array+0x24>
 8000f64:	2600      	movs	r6, #0
 8000f66:	f000 f821 	bl	8000fac <_init>
 8000f6a:	4d0a      	ldr	r5, [pc, #40]	; (8000f94 <__libc_init_array+0x40>)
 8000f6c:	4c0a      	ldr	r4, [pc, #40]	; (8000f98 <__libc_init_array+0x44>)
 8000f6e:	1b64      	subs	r4, r4, r5
 8000f70:	10a4      	asrs	r4, r4, #2
 8000f72:	42a6      	cmp	r6, r4
 8000f74:	d105      	bne.n	8000f82 <__libc_init_array+0x2e>
 8000f76:	bd70      	pop	{r4, r5, r6, pc}
 8000f78:	00b3      	lsls	r3, r6, #2
 8000f7a:	58eb      	ldr	r3, [r5, r3]
 8000f7c:	4798      	blx	r3
 8000f7e:	3601      	adds	r6, #1
 8000f80:	e7ee      	b.n	8000f60 <__libc_init_array+0xc>
 8000f82:	00b3      	lsls	r3, r6, #2
 8000f84:	58eb      	ldr	r3, [r5, r3]
 8000f86:	4798      	blx	r3
 8000f88:	3601      	adds	r6, #1
 8000f8a:	e7f2      	b.n	8000f72 <__libc_init_array+0x1e>
 8000f8c:	08000ff4 	.word	0x08000ff4
 8000f90:	08000ff4 	.word	0x08000ff4
 8000f94:	08000ff4 	.word	0x08000ff4
 8000f98:	08000ff8 	.word	0x08000ff8

08000f9c <memset>:
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	1882      	adds	r2, r0, r2
 8000fa0:	4293      	cmp	r3, r2
 8000fa2:	d100      	bne.n	8000fa6 <memset+0xa>
 8000fa4:	4770      	bx	lr
 8000fa6:	7019      	strb	r1, [r3, #0]
 8000fa8:	3301      	adds	r3, #1
 8000faa:	e7f9      	b.n	8000fa0 <memset+0x4>

08000fac <_init>:
 8000fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fb2:	bc08      	pop	{r3}
 8000fb4:	469e      	mov	lr, r3
 8000fb6:	4770      	bx	lr

08000fb8 <_fini>:
 8000fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fba:	46c0      	nop			; (mov r8, r8)
 8000fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000fbe:	bc08      	pop	{r3}
 8000fc0:	469e      	mov	lr, r3
 8000fc2:	4770      	bx	lr
