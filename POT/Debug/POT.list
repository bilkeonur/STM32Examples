
POT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000285c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  0800291c  0800291c  0001291c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080029a0  080029a0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080029a0  080029a0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080029a0  080029a0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080029a0  080029a0  000129a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080029a4  080029a4  000129a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080029a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000070  08002a18  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08002a18  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   00004496  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001270  00000000  00000000  0002452e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000004f8  00000000  00000000  000257a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000440  00000000  00000000  00025c98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000eb4b  00000000  00000000  000260d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00006ae6  00000000  00000000  00034c23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00058257  00000000  00000000  0003b709  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00093960  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000137c  00000000  00000000  000939b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000070 	.word	0x20000070
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002904 	.word	0x08002904

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000074 	.word	0x20000074
 8000104:	08002904 	.word	0x08002904

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <delay>:
#include "stm32f0xx_hal.h"
#include "main.h"
#include "LCD.h"

void delay(uint32_t i)
{
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
	for(; i != 0; i--);
 800023c:	e002      	b.n	8000244 <delay+0x10>
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	3b01      	subs	r3, #1
 8000242:	607b      	str	r3, [r7, #4]
 8000244:	687b      	ldr	r3, [r7, #4]
 8000246:	2b00      	cmp	r3, #0
 8000248:	d1f9      	bne.n	800023e <delay+0xa>
}
 800024a:	46c0      	nop			; (mov r8, r8)
 800024c:	46c0      	nop			; (mov r8, r8)
 800024e:	46bd      	mov	sp, r7
 8000250:	b002      	add	sp, #8
 8000252:	bd80      	pop	{r7, pc}

08000254 <lcdDelay>:

void lcdDelay(void)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	af00      	add	r7, sp, #0
	delay(1000);
 8000258:	23fa      	movs	r3, #250	; 0xfa
 800025a:	009b      	lsls	r3, r3, #2
 800025c:	0018      	movs	r0, r3
 800025e:	f7ff ffe9 	bl	8000234 <delay>
}
 8000262:	46c0      	nop			; (mov r8, r8)
 8000264:	46bd      	mov	sp, r7
 8000266:	bd80      	pop	{r7, pc}

08000268 <lcdCmd>:

void lcdCmd(char outChar)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b082      	sub	sp, #8
 800026c:	af00      	add	r7, sp, #0
 800026e:	0002      	movs	r2, r0
 8000270:	1dfb      	adds	r3, r7, #7
 8000272:	701a      	strb	r2, [r3, #0]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8000274:	2390      	movs	r3, #144	; 0x90
 8000276:	05db      	lsls	r3, r3, #23
 8000278:	2204      	movs	r2, #4
 800027a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 800027c:	2390      	movs	r3, #144	; 0x90
 800027e:	05db      	lsls	r3, r3, #23
 8000280:	2208      	movs	r2, #8
 8000282:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000284:	2390      	movs	r3, #144	; 0x90
 8000286:	05db      	lsls	r3, r3, #23
 8000288:	2210      	movs	r2, #16
 800028a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 800028c:	2390      	movs	r3, #144	; 0x90
 800028e:	05db      	lsls	r3, r3, #23
 8000290:	2220      	movs	r2, #32
 8000292:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000294:	2390      	movs	r3, #144	; 0x90
 8000296:	05db      	lsls	r3, r3, #23
 8000298:	2240      	movs	r2, #64	; 0x40
 800029a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800029c:	2390      	movs	r3, #144	; 0x90
 800029e:	05db      	lsls	r3, r3, #23
 80002a0:	2280      	movs	r2, #128	; 0x80
 80002a2:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 80002a4:	f7ff ffd6 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80002a8:	2390      	movs	r3, #144	; 0x90
 80002aa:	05db      	lsls	r3, r3, #23
 80002ac:	695a      	ldr	r2, [r3, #20]
 80002ae:	2390      	movs	r3, #144	; 0x90
 80002b0:	05db      	lsls	r3, r3, #23
 80002b2:	2108      	movs	r1, #8
 80002b4:	430a      	orrs	r2, r1
 80002b6:	615a      	str	r2, [r3, #20]

	if((outChar & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80002b8:	1dfb      	adds	r3, r7, #7
 80002ba:	781b      	ldrb	r3, [r3, #0]
 80002bc:	2210      	movs	r2, #16
 80002be:	4013      	ands	r3, r2
 80002c0:	d004      	beq.n	80002cc <lcdCmd+0x64>
 80002c2:	2390      	movs	r3, #144	; 0x90
 80002c4:	05db      	lsls	r3, r3, #23
 80002c6:	2210      	movs	r2, #16
 80002c8:	619a      	str	r2, [r3, #24]
 80002ca:	e004      	b.n	80002d6 <lcdCmd+0x6e>
 80002cc:	2390      	movs	r3, #144	; 0x90
 80002ce:	05db      	lsls	r3, r3, #23
 80002d0:	2280      	movs	r2, #128	; 0x80
 80002d2:	0352      	lsls	r2, r2, #13
 80002d4:	619a      	str	r2, [r3, #24]
	if((outChar & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80002d6:	1dfb      	adds	r3, r7, #7
 80002d8:	781b      	ldrb	r3, [r3, #0]
 80002da:	2220      	movs	r2, #32
 80002dc:	4013      	ands	r3, r2
 80002de:	d004      	beq.n	80002ea <lcdCmd+0x82>
 80002e0:	2390      	movs	r3, #144	; 0x90
 80002e2:	05db      	lsls	r3, r3, #23
 80002e4:	2220      	movs	r2, #32
 80002e6:	619a      	str	r2, [r3, #24]
 80002e8:	e004      	b.n	80002f4 <lcdCmd+0x8c>
 80002ea:	2390      	movs	r3, #144	; 0x90
 80002ec:	05db      	lsls	r3, r3, #23
 80002ee:	2280      	movs	r2, #128	; 0x80
 80002f0:	0392      	lsls	r2, r2, #14
 80002f2:	619a      	str	r2, [r3, #24]
	if((outChar & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80002f4:	1dfb      	adds	r3, r7, #7
 80002f6:	781b      	ldrb	r3, [r3, #0]
 80002f8:	2240      	movs	r2, #64	; 0x40
 80002fa:	4013      	ands	r3, r2
 80002fc:	d004      	beq.n	8000308 <lcdCmd+0xa0>
 80002fe:	2390      	movs	r3, #144	; 0x90
 8000300:	05db      	lsls	r3, r3, #23
 8000302:	2240      	movs	r2, #64	; 0x40
 8000304:	619a      	str	r2, [r3, #24]
 8000306:	e004      	b.n	8000312 <lcdCmd+0xaa>
 8000308:	2390      	movs	r3, #144	; 0x90
 800030a:	05db      	lsls	r3, r3, #23
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	03d2      	lsls	r2, r2, #15
 8000310:	619a      	str	r2, [r3, #24]
	if((outChar & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000312:	1dfb      	adds	r3, r7, #7
 8000314:	781b      	ldrb	r3, [r3, #0]
 8000316:	b25b      	sxtb	r3, r3
 8000318:	2b00      	cmp	r3, #0
 800031a:	da04      	bge.n	8000326 <lcdCmd+0xbe>
 800031c:	2390      	movs	r3, #144	; 0x90
 800031e:	05db      	lsls	r3, r3, #23
 8000320:	2280      	movs	r2, #128	; 0x80
 8000322:	619a      	str	r2, [r3, #24]
 8000324:	e004      	b.n	8000330 <lcdCmd+0xc8>
 8000326:	2390      	movs	r3, #144	; 0x90
 8000328:	05db      	lsls	r3, r3, #23
 800032a:	2280      	movs	r2, #128	; 0x80
 800032c:	0412      	lsls	r2, r2, #16
 800032e:	619a      	str	r2, [r3, #24]

	lcdDelay();
 8000330:	f7ff ff90 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000334:	2390      	movs	r3, #144	; 0x90
 8000336:	05db      	lsls	r3, r3, #23
 8000338:	2208      	movs	r2, #8
 800033a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800033c:	2390      	movs	r3, #144	; 0x90
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	2210      	movs	r2, #16
 8000342:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000344:	2390      	movs	r3, #144	; 0x90
 8000346:	05db      	lsls	r3, r3, #23
 8000348:	2220      	movs	r2, #32
 800034a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 800034c:	2390      	movs	r3, #144	; 0x90
 800034e:	05db      	lsls	r3, r3, #23
 8000350:	2240      	movs	r2, #64	; 0x40
 8000352:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000354:	2390      	movs	r3, #144	; 0x90
 8000356:	05db      	lsls	r3, r3, #23
 8000358:	2280      	movs	r2, #128	; 0x80
 800035a:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 800035c:	f7ff ff7a 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000360:	2390      	movs	r3, #144	; 0x90
 8000362:	05db      	lsls	r3, r3, #23
 8000364:	695a      	ldr	r2, [r3, #20]
 8000366:	2390      	movs	r3, #144	; 0x90
 8000368:	05db      	lsls	r3, r3, #23
 800036a:	2108      	movs	r1, #8
 800036c:	430a      	orrs	r2, r1
 800036e:	615a      	str	r2, [r3, #20]

	if(outChar & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000370:	1dfb      	adds	r3, r7, #7
 8000372:	781b      	ldrb	r3, [r3, #0]
 8000374:	2201      	movs	r2, #1
 8000376:	4013      	ands	r3, r2
 8000378:	d004      	beq.n	8000384 <lcdCmd+0x11c>
 800037a:	2390      	movs	r3, #144	; 0x90
 800037c:	05db      	lsls	r3, r3, #23
 800037e:	2210      	movs	r2, #16
 8000380:	619a      	str	r2, [r3, #24]
 8000382:	e004      	b.n	800038e <lcdCmd+0x126>
 8000384:	2390      	movs	r3, #144	; 0x90
 8000386:	05db      	lsls	r3, r3, #23
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	0352      	lsls	r2, r2, #13
 800038c:	619a      	str	r2, [r3, #24]
	if((outChar & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800038e:	1dfb      	adds	r3, r7, #7
 8000390:	781b      	ldrb	r3, [r3, #0]
 8000392:	2202      	movs	r2, #2
 8000394:	4013      	ands	r3, r2
 8000396:	d004      	beq.n	80003a2 <lcdCmd+0x13a>
 8000398:	2390      	movs	r3, #144	; 0x90
 800039a:	05db      	lsls	r3, r3, #23
 800039c:	2220      	movs	r2, #32
 800039e:	619a      	str	r2, [r3, #24]
 80003a0:	e004      	b.n	80003ac <lcdCmd+0x144>
 80003a2:	2390      	movs	r3, #144	; 0x90
 80003a4:	05db      	lsls	r3, r3, #23
 80003a6:	2280      	movs	r2, #128	; 0x80
 80003a8:	0392      	lsls	r2, r2, #14
 80003aa:	619a      	str	r2, [r3, #24]
	if((outChar & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80003ac:	1dfb      	adds	r3, r7, #7
 80003ae:	781b      	ldrb	r3, [r3, #0]
 80003b0:	2204      	movs	r2, #4
 80003b2:	4013      	ands	r3, r2
 80003b4:	d004      	beq.n	80003c0 <lcdCmd+0x158>
 80003b6:	2390      	movs	r3, #144	; 0x90
 80003b8:	05db      	lsls	r3, r3, #23
 80003ba:	2240      	movs	r2, #64	; 0x40
 80003bc:	619a      	str	r2, [r3, #24]
 80003be:	e004      	b.n	80003ca <lcdCmd+0x162>
 80003c0:	2390      	movs	r3, #144	; 0x90
 80003c2:	05db      	lsls	r3, r3, #23
 80003c4:	2280      	movs	r2, #128	; 0x80
 80003c6:	03d2      	lsls	r2, r2, #15
 80003c8:	619a      	str	r2, [r3, #24]
	if((outChar & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80003ca:	1dfb      	adds	r3, r7, #7
 80003cc:	781b      	ldrb	r3, [r3, #0]
 80003ce:	2208      	movs	r2, #8
 80003d0:	4013      	ands	r3, r2
 80003d2:	d004      	beq.n	80003de <lcdCmd+0x176>
 80003d4:	2390      	movs	r3, #144	; 0x90
 80003d6:	05db      	lsls	r3, r3, #23
 80003d8:	2280      	movs	r2, #128	; 0x80
 80003da:	619a      	str	r2, [r3, #24]
 80003dc:	e004      	b.n	80003e8 <lcdCmd+0x180>
 80003de:	2390      	movs	r3, #144	; 0x90
 80003e0:	05db      	lsls	r3, r3, #23
 80003e2:	2280      	movs	r2, #128	; 0x80
 80003e4:	0412      	lsls	r2, r2, #16
 80003e6:	619a      	str	r2, [r3, #24]

	lcdDelay();
 80003e8:	f7ff ff34 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80003ec:	2390      	movs	r3, #144	; 0x90
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	2208      	movs	r2, #8
 80003f2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80003f4:	2390      	movs	r3, #144	; 0x90
 80003f6:	05db      	lsls	r3, r3, #23
 80003f8:	2210      	movs	r2, #16
 80003fa:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80003fc:	2390      	movs	r3, #144	; 0x90
 80003fe:	05db      	lsls	r3, r3, #23
 8000400:	2220      	movs	r2, #32
 8000402:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000404:	2390      	movs	r3, #144	; 0x90
 8000406:	05db      	lsls	r3, r3, #23
 8000408:	2240      	movs	r2, #64	; 0x40
 800040a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800040c:	2390      	movs	r3, #144	; 0x90
 800040e:	05db      	lsls	r3, r3, #23
 8000410:	2280      	movs	r2, #128	; 0x80
 8000412:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000414:	46c0      	nop			; (mov r8, r8)
 8000416:	46bd      	mov	sp, r7
 8000418:	b002      	add	sp, #8
 800041a:	bd80      	pop	{r7, pc}

0800041c <lcdCharCp>:

void lcdCharCp(char outChar)
{
 800041c:	b580      	push	{r7, lr}
 800041e:	b082      	sub	sp, #8
 8000420:	af00      	add	r7, sp, #0
 8000422:	0002      	movs	r2, r0
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	701a      	strb	r2, [r3, #0]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 8000428:	2390      	movs	r3, #144	; 0x90
 800042a:	05db      	lsls	r3, r3, #23
 800042c:	695a      	ldr	r2, [r3, #20]
 800042e:	2390      	movs	r3, #144	; 0x90
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	2104      	movs	r1, #4
 8000434:	430a      	orrs	r2, r1
 8000436:	615a      	str	r2, [r3, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000438:	2390      	movs	r3, #144	; 0x90
 800043a:	05db      	lsls	r3, r3, #23
 800043c:	2208      	movs	r2, #8
 800043e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 8000440:	2390      	movs	r3, #144	; 0x90
 8000442:	05db      	lsls	r3, r3, #23
 8000444:	2210      	movs	r2, #16
 8000446:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000448:	2390      	movs	r3, #144	; 0x90
 800044a:	05db      	lsls	r3, r3, #23
 800044c:	2220      	movs	r2, #32
 800044e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000450:	2390      	movs	r3, #144	; 0x90
 8000452:	05db      	lsls	r3, r3, #23
 8000454:	2240      	movs	r2, #64	; 0x40
 8000456:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 8000458:	2390      	movs	r3, #144	; 0x90
 800045a:	05db      	lsls	r3, r3, #23
 800045c:	2280      	movs	r2, #128	; 0x80
 800045e:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 8000460:	f7ff fef8 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000464:	2390      	movs	r3, #144	; 0x90
 8000466:	05db      	lsls	r3, r3, #23
 8000468:	695a      	ldr	r2, [r3, #20]
 800046a:	2390      	movs	r3, #144	; 0x90
 800046c:	05db      	lsls	r3, r3, #23
 800046e:	2108      	movs	r1, #8
 8000470:	430a      	orrs	r2, r1
 8000472:	615a      	str	r2, [r3, #20]

	if((outChar & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000474:	1dfb      	adds	r3, r7, #7
 8000476:	781b      	ldrb	r3, [r3, #0]
 8000478:	2210      	movs	r2, #16
 800047a:	4013      	ands	r3, r2
 800047c:	d004      	beq.n	8000488 <lcdCharCp+0x6c>
 800047e:	2390      	movs	r3, #144	; 0x90
 8000480:	05db      	lsls	r3, r3, #23
 8000482:	2210      	movs	r2, #16
 8000484:	619a      	str	r2, [r3, #24]
 8000486:	e004      	b.n	8000492 <lcdCharCp+0x76>
 8000488:	2390      	movs	r3, #144	; 0x90
 800048a:	05db      	lsls	r3, r3, #23
 800048c:	2280      	movs	r2, #128	; 0x80
 800048e:	0352      	lsls	r2, r2, #13
 8000490:	619a      	str	r2, [r3, #24]
	if((outChar & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000492:	1dfb      	adds	r3, r7, #7
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2220      	movs	r2, #32
 8000498:	4013      	ands	r3, r2
 800049a:	d004      	beq.n	80004a6 <lcdCharCp+0x8a>
 800049c:	2390      	movs	r3, #144	; 0x90
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	2220      	movs	r2, #32
 80004a2:	619a      	str	r2, [r3, #24]
 80004a4:	e004      	b.n	80004b0 <lcdCharCp+0x94>
 80004a6:	2390      	movs	r3, #144	; 0x90
 80004a8:	05db      	lsls	r3, r3, #23
 80004aa:	2280      	movs	r2, #128	; 0x80
 80004ac:	0392      	lsls	r2, r2, #14
 80004ae:	619a      	str	r2, [r3, #24]
	if((outChar & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004b0:	1dfb      	adds	r3, r7, #7
 80004b2:	781b      	ldrb	r3, [r3, #0]
 80004b4:	2240      	movs	r2, #64	; 0x40
 80004b6:	4013      	ands	r3, r2
 80004b8:	d004      	beq.n	80004c4 <lcdCharCp+0xa8>
 80004ba:	2390      	movs	r3, #144	; 0x90
 80004bc:	05db      	lsls	r3, r3, #23
 80004be:	2240      	movs	r2, #64	; 0x40
 80004c0:	619a      	str	r2, [r3, #24]
 80004c2:	e004      	b.n	80004ce <lcdCharCp+0xb2>
 80004c4:	2390      	movs	r3, #144	; 0x90
 80004c6:	05db      	lsls	r3, r3, #23
 80004c8:	2280      	movs	r2, #128	; 0x80
 80004ca:	03d2      	lsls	r2, r2, #15
 80004cc:	619a      	str	r2, [r3, #24]
	if((outChar & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80004ce:	1dfb      	adds	r3, r7, #7
 80004d0:	781b      	ldrb	r3, [r3, #0]
 80004d2:	b25b      	sxtb	r3, r3
 80004d4:	2b00      	cmp	r3, #0
 80004d6:	da04      	bge.n	80004e2 <lcdCharCp+0xc6>
 80004d8:	2390      	movs	r3, #144	; 0x90
 80004da:	05db      	lsls	r3, r3, #23
 80004dc:	2280      	movs	r2, #128	; 0x80
 80004de:	619a      	str	r2, [r3, #24]
 80004e0:	e004      	b.n	80004ec <lcdCharCp+0xd0>
 80004e2:	2390      	movs	r3, #144	; 0x90
 80004e4:	05db      	lsls	r3, r3, #23
 80004e6:	2280      	movs	r2, #128	; 0x80
 80004e8:	0412      	lsls	r2, r2, #16
 80004ea:	619a      	str	r2, [r3, #24]

	lcdDelay();
 80004ec:	f7ff feb2 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80004f0:	2390      	movs	r3, #144	; 0x90
 80004f2:	05db      	lsls	r3, r3, #23
 80004f4:	2208      	movs	r2, #8
 80004f6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80004f8:	2390      	movs	r3, #144	; 0x90
 80004fa:	05db      	lsls	r3, r3, #23
 80004fc:	2210      	movs	r2, #16
 80004fe:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000500:	2390      	movs	r3, #144	; 0x90
 8000502:	05db      	lsls	r3, r3, #23
 8000504:	2220      	movs	r2, #32
 8000506:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000508:	2390      	movs	r3, #144	; 0x90
 800050a:	05db      	lsls	r3, r3, #23
 800050c:	2240      	movs	r2, #64	; 0x40
 800050e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000510:	2390      	movs	r3, #144	; 0x90
 8000512:	05db      	lsls	r3, r3, #23
 8000514:	2280      	movs	r2, #128	; 0x80
 8000516:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 8000518:	f7ff fe9c 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 800051c:	2390      	movs	r3, #144	; 0x90
 800051e:	05db      	lsls	r3, r3, #23
 8000520:	695a      	ldr	r2, [r3, #20]
 8000522:	2390      	movs	r3, #144	; 0x90
 8000524:	05db      	lsls	r3, r3, #23
 8000526:	2108      	movs	r1, #8
 8000528:	430a      	orrs	r2, r1
 800052a:	615a      	str	r2, [r3, #20]

	if(outChar & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800052c:	1dfb      	adds	r3, r7, #7
 800052e:	781b      	ldrb	r3, [r3, #0]
 8000530:	2201      	movs	r2, #1
 8000532:	4013      	ands	r3, r2
 8000534:	d004      	beq.n	8000540 <lcdCharCp+0x124>
 8000536:	2390      	movs	r3, #144	; 0x90
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	2210      	movs	r2, #16
 800053c:	619a      	str	r2, [r3, #24]
 800053e:	e004      	b.n	800054a <lcdCharCp+0x12e>
 8000540:	2390      	movs	r3, #144	; 0x90
 8000542:	05db      	lsls	r3, r3, #23
 8000544:	2280      	movs	r2, #128	; 0x80
 8000546:	0352      	lsls	r2, r2, #13
 8000548:	619a      	str	r2, [r3, #24]
	if((outChar & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 800054a:	1dfb      	adds	r3, r7, #7
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2202      	movs	r2, #2
 8000550:	4013      	ands	r3, r2
 8000552:	d004      	beq.n	800055e <lcdCharCp+0x142>
 8000554:	2390      	movs	r3, #144	; 0x90
 8000556:	05db      	lsls	r3, r3, #23
 8000558:	2220      	movs	r2, #32
 800055a:	619a      	str	r2, [r3, #24]
 800055c:	e004      	b.n	8000568 <lcdCharCp+0x14c>
 800055e:	2390      	movs	r3, #144	; 0x90
 8000560:	05db      	lsls	r3, r3, #23
 8000562:	2280      	movs	r2, #128	; 0x80
 8000564:	0392      	lsls	r2, r2, #14
 8000566:	619a      	str	r2, [r3, #24]
	if((outChar & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000568:	1dfb      	adds	r3, r7, #7
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2204      	movs	r2, #4
 800056e:	4013      	ands	r3, r2
 8000570:	d004      	beq.n	800057c <lcdCharCp+0x160>
 8000572:	2390      	movs	r3, #144	; 0x90
 8000574:	05db      	lsls	r3, r3, #23
 8000576:	2240      	movs	r2, #64	; 0x40
 8000578:	619a      	str	r2, [r3, #24]
 800057a:	e004      	b.n	8000586 <lcdCharCp+0x16a>
 800057c:	2390      	movs	r3, #144	; 0x90
 800057e:	05db      	lsls	r3, r3, #23
 8000580:	2280      	movs	r2, #128	; 0x80
 8000582:	03d2      	lsls	r2, r2, #15
 8000584:	619a      	str	r2, [r3, #24]
	if((outChar & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000586:	1dfb      	adds	r3, r7, #7
 8000588:	781b      	ldrb	r3, [r3, #0]
 800058a:	2208      	movs	r2, #8
 800058c:	4013      	ands	r3, r2
 800058e:	d004      	beq.n	800059a <lcdCharCp+0x17e>
 8000590:	2390      	movs	r3, #144	; 0x90
 8000592:	05db      	lsls	r3, r3, #23
 8000594:	2280      	movs	r2, #128	; 0x80
 8000596:	619a      	str	r2, [r3, #24]
 8000598:	e004      	b.n	80005a4 <lcdCharCp+0x188>
 800059a:	2390      	movs	r3, #144	; 0x90
 800059c:	05db      	lsls	r3, r3, #23
 800059e:	2280      	movs	r2, #128	; 0x80
 80005a0:	0412      	lsls	r2, r2, #16
 80005a2:	619a      	str	r2, [r3, #24]

	lcdDelay();
 80005a4:	f7ff fe56 	bl	8000254 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 80005a8:	2390      	movs	r3, #144	; 0x90
 80005aa:	05db      	lsls	r3, r3, #23
 80005ac:	2208      	movs	r2, #8
 80005ae:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80005b0:	2390      	movs	r3, #144	; 0x90
 80005b2:	05db      	lsls	r3, r3, #23
 80005b4:	2210      	movs	r2, #16
 80005b6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80005b8:	2390      	movs	r3, #144	; 0x90
 80005ba:	05db      	lsls	r3, r3, #23
 80005bc:	2220      	movs	r2, #32
 80005be:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80005c0:	2390      	movs	r3, #144	; 0x90
 80005c2:	05db      	lsls	r3, r3, #23
 80005c4:	2240      	movs	r2, #64	; 0x40
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80005c8:	2390      	movs	r3, #144	; 0x90
 80005ca:	05db      	lsls	r3, r3, #23
 80005cc:	2280      	movs	r2, #128	; 0x80
 80005ce:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b002      	add	sp, #8
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <lcdOutCp>:

void lcdOutCp(char *outChar)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	while(*outChar)
 80005e0:	e008      	b.n	80005f4 <lcdOutCp+0x1c>
	{
		lcdDelay();
 80005e2:	f7ff fe37 	bl	8000254 <lcdDelay>
		lcdCharCp(*outChar++);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	1c5a      	adds	r2, r3, #1
 80005ea:	607a      	str	r2, [r7, #4]
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	0018      	movs	r0, r3
 80005f0:	f7ff ff14 	bl	800041c <lcdCharCp>
	while(*outChar)
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d1f2      	bne.n	80005e2 <lcdOutCp+0xa>
	}

	lcdDelay();
 80005fc:	f7ff fe2a 	bl	8000254 <lcdDelay>
}
 8000600:	46c0      	nop			; (mov r8, r8)
 8000602:	46bd      	mov	sp, r7
 8000604:	b002      	add	sp, #8
 8000606:	bd80      	pop	{r7, pc}

08000608 <lcdInit>:

void lcdInit(char bits, char font, char lines)
{
 8000608:	b590      	push	{r4, r7, lr}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	0004      	movs	r4, r0
 8000610:	0008      	movs	r0, r1
 8000612:	0011      	movs	r1, r2
 8000614:	1dfb      	adds	r3, r7, #7
 8000616:	1c22      	adds	r2, r4, #0
 8000618:	701a      	strb	r2, [r3, #0]
 800061a:	1dbb      	adds	r3, r7, #6
 800061c:	1c02      	adds	r2, r0, #0
 800061e:	701a      	strb	r2, [r3, #0]
 8000620:	1d7b      	adds	r3, r7, #5
 8000622:	1c0a      	adds	r2, r1, #0
 8000624:	701a      	strb	r2, [r3, #0]
	HAL_Delay(250);
 8000626:	20fa      	movs	r0, #250	; 0xfa
 8000628:	f000 fb02 	bl	8000c30 <HAL_Delay>
	lcdCmd(_RETURN_HOME);
 800062c:	2002      	movs	r0, #2
 800062e:	f7ff fe1b 	bl	8000268 <lcdCmd>
    HAL_Delay(50);
 8000632:	2032      	movs	r0, #50	; 0x32
 8000634:	f000 fafc 	bl	8000c30 <HAL_Delay>
    lcdCmd(0x20 | bits | font | lines);
 8000638:	1dfa      	adds	r2, r7, #7
 800063a:	1dbb      	adds	r3, r7, #6
 800063c:	7812      	ldrb	r2, [r2, #0]
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	4313      	orrs	r3, r2
 8000642:	b2da      	uxtb	r2, r3
 8000644:	1d7b      	adds	r3, r7, #5
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	4313      	orrs	r3, r2
 800064a:	b2db      	uxtb	r3, r3
 800064c:	2220      	movs	r2, #32
 800064e:	4313      	orrs	r3, r2
 8000650:	b2db      	uxtb	r3, r3
 8000652:	0018      	movs	r0, r3
 8000654:	f7ff fe08 	bl	8000268 <lcdCmd>
    HAL_Delay(50);
 8000658:	2032      	movs	r0, #50	; 0x32
 800065a:	f000 fae9 	bl	8000c30 <HAL_Delay>
    lcdCmd(_LCD_INIT);
 800065e:	2006      	movs	r0, #6
 8000660:	f7ff fe02 	bl	8000268 <lcdCmd>
    HAL_Delay(50);
 8000664:	2032      	movs	r0, #50	; 0x32
 8000666:	f000 fae3 	bl	8000c30 <HAL_Delay>
    lcdCmd(0x0E);
 800066a:	200e      	movs	r0, #14
 800066c:	f7ff fdfc 	bl	8000268 <lcdCmd>
    HAL_Delay(50);
 8000670:	2032      	movs	r0, #50	; 0x32
 8000672:	f000 fadd 	bl	8000c30 <HAL_Delay>
    lcdCmd(0x0C);
 8000676:	200c      	movs	r0, #12
 8000678:	f7ff fdf6 	bl	8000268 <lcdCmd>
    HAL_Delay(50);
 800067c:	2032      	movs	r0, #50	; 0x32
 800067e:	f000 fad7 	bl	8000c30 <HAL_Delay>
    lcdCmd(0x01);
 8000682:	2001      	movs	r0, #1
 8000684:	f7ff fdf0 	bl	8000268 <lcdCmd>
    HAL_Delay(100);
 8000688:	2064      	movs	r0, #100	; 0x64
 800068a:	f000 fad1 	bl	8000c30 <HAL_Delay>
}
 800068e:	46c0      	nop			; (mov r8, r8)
 8000690:	46bd      	mov	sp, r7
 8000692:	b003      	add	sp, #12
 8000694:	bd90      	pop	{r4, r7, pc}

08000696 <lcdGotoXY>:

void lcdGotoXY(unsigned char row, unsigned char column)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	b082      	sub	sp, #8
 800069a:	af00      	add	r7, sp, #0
 800069c:	0002      	movs	r2, r0
 800069e:	1dfb      	adds	r3, r7, #7
 80006a0:	701a      	strb	r2, [r3, #0]
 80006a2:	1dbb      	adds	r3, r7, #6
 80006a4:	1c0a      	adds	r2, r1, #0
 80006a6:	701a      	strb	r2, [r3, #0]
	if(row == 1)
 80006a8:	1dfb      	adds	r3, r7, #7
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b01      	cmp	r3, #1
 80006ae:	d107      	bne.n	80006c0 <lcdGotoXY+0x2a>
	{
		lcdCmd(0x80 + (column - 1));
 80006b0:	1dbb      	adds	r3, r7, #6
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	337f      	adds	r3, #127	; 0x7f
 80006b6:	b2db      	uxtb	r3, r3
 80006b8:	0018      	movs	r0, r3
 80006ba:	f7ff fdd5 	bl	8000268 <lcdCmd>
	}
	else if(row == 2)
	{
		lcdCmd(0xC0 + (column - 1));
	}
}
 80006be:	e00a      	b.n	80006d6 <lcdGotoXY+0x40>
	else if(row == 2)
 80006c0:	1dfb      	adds	r3, r7, #7
 80006c2:	781b      	ldrb	r3, [r3, #0]
 80006c4:	2b02      	cmp	r3, #2
 80006c6:	d106      	bne.n	80006d6 <lcdGotoXY+0x40>
		lcdCmd(0xC0 + (column - 1));
 80006c8:	1dbb      	adds	r3, r7, #6
 80006ca:	781b      	ldrb	r3, [r3, #0]
 80006cc:	3b41      	subs	r3, #65	; 0x41
 80006ce:	b2db      	uxtb	r3, r3
 80006d0:	0018      	movs	r0, r3
 80006d2:	f7ff fdc9 	bl	8000268 <lcdCmd>
}
 80006d6:	46c0      	nop			; (mov r8, r8)
 80006d8:	46bd      	mov	sp, r7
 80006da:	b002      	add	sp, #8
 80006dc:	bd80      	pop	{r7, pc}

080006de <lcdPrint>:
	lcdGotoXY(row, column);
	lcdCharCp(outChar);
}

void lcdPrint(unsigned char row, unsigned char column, char *outChar)
{
 80006de:	b580      	push	{r7, lr}
 80006e0:	b082      	sub	sp, #8
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	603a      	str	r2, [r7, #0]
 80006e6:	1dfb      	adds	r3, r7, #7
 80006e8:	1c02      	adds	r2, r0, #0
 80006ea:	701a      	strb	r2, [r3, #0]
 80006ec:	1dbb      	adds	r3, r7, #6
 80006ee:	1c0a      	adds	r2, r1, #0
 80006f0:	701a      	strb	r2, [r3, #0]
	lcdGotoXY(row, column);
 80006f2:	1dbb      	adds	r3, r7, #6
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	0011      	movs	r1, r2
 80006fc:	0018      	movs	r0, r3
 80006fe:	f7ff ffca 	bl	8000696 <lcdGotoXY>
	lcdOutCp(outChar);
 8000702:	683b      	ldr	r3, [r7, #0]
 8000704:	0018      	movs	r0, r3
 8000706:	f7ff ff67 	bl	80005d8 <lcdOutCp>
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}

08000712 <lcdClear>:

void lcdClear(void)
{
 8000712:	b580      	push	{r7, lr}
 8000714:	af00      	add	r7, sp, #0
	lcdCmd(_CLEAR);
 8000716:	2001      	movs	r0, #1
 8000718:	f7ff fda6 	bl	8000268 <lcdCmd>
	HAL_Delay(2);
 800071c:	2002      	movs	r0, #2
 800071e:	f000 fa87 	bl	8000c30 <HAL_Delay>
}
 8000722:	46c0      	nop			; (mov r8, r8)
 8000724:	46bd      	mov	sp, r7
 8000726:	bd80      	pop	{r7, pc}

08000728 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072c:	f000 fa1c 	bl	8000b68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000730:	f000 f844 	bl	80007bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000734:	f000 f8e2 	bl	80008fc <MX_GPIO_Init>
  MX_ADC_Init();
 8000738:	f000 f884 	bl	8000844 <MX_ADC_Init>
  /* USER CODE BEGIN 2 */
  lcdInit(_LCD_4BIT,_LCD_FONT_5x8,_LCD_2LINE);
 800073c:	2208      	movs	r2, #8
 800073e:	2100      	movs	r1, #0
 8000740:	2000      	movs	r0, #0
 8000742:	f7ff ff61 	bl	8000608 <lcdInit>
  HAL_ADC_Start(&hadc);
 8000746:	4b17      	ldr	r3, [pc, #92]	; (80007a4 <main+0x7c>)
 8000748:	0018      	movs	r0, r3
 800074a:	f000 fbd5 	bl	8000ef8 <HAL_ADC_Start>
  lcdClear();
 800074e:	f7ff ffe0 	bl	8000712 <lcdClear>
  lcdPrint(1,1,"ONUR BiLKE");
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <main+0x80>)
 8000754:	001a      	movs	r2, r3
 8000756:	2101      	movs	r1, #1
 8000758:	2001      	movs	r0, #1
 800075a:	f7ff ffc0 	bl	80006de <lcdPrint>
  lcdPrint(2,1,"STM32 EXAMPLES");
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <main+0x84>)
 8000760:	001a      	movs	r2, r3
 8000762:	2101      	movs	r1, #1
 8000764:	2002      	movs	r0, #2
 8000766:	f7ff ffba 	bl	80006de <lcdPrint>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	lcdClear();
 800076a:	f7ff ffd2 	bl	8000712 <lcdClear>
	data = HAL_ADC_GetValue(&hadc);
 800076e:	4b0d      	ldr	r3, [pc, #52]	; (80007a4 <main+0x7c>)
 8000770:	0018      	movs	r0, r3
 8000772:	f000 fc15 	bl	8000fa0 <HAL_ADC_GetValue>
 8000776:	0002      	movs	r2, r0
 8000778:	4b0d      	ldr	r3, [pc, #52]	; (80007b0 <main+0x88>)
 800077a:	601a      	str	r2, [r3, #0]
	sprintf(buffer,"%d",data);
 800077c:	4b0c      	ldr	r3, [pc, #48]	; (80007b0 <main+0x88>)
 800077e:	681a      	ldr	r2, [r3, #0]
 8000780:	490c      	ldr	r1, [pc, #48]	; (80007b4 <main+0x8c>)
 8000782:	4b0d      	ldr	r3, [pc, #52]	; (80007b8 <main+0x90>)
 8000784:	0018      	movs	r0, r3
 8000786:	f001 fc53 	bl	8002030 <siprintf>
	lcdPrint(1,1,buffer);
 800078a:	4b0b      	ldr	r3, [pc, #44]	; (80007b8 <main+0x90>)
 800078c:	001a      	movs	r2, r3
 800078e:	2101      	movs	r1, #1
 8000790:	2001      	movs	r0, #1
 8000792:	f7ff ffa4 	bl	80006de <lcdPrint>
	HAL_Delay(1000);
 8000796:	23fa      	movs	r3, #250	; 0xfa
 8000798:	009b      	lsls	r3, r3, #2
 800079a:	0018      	movs	r0, r3
 800079c:	f000 fa48 	bl	8000c30 <HAL_Delay>
  {
 80007a0:	e7e3      	b.n	800076a <main+0x42>
 80007a2:	46c0      	nop			; (mov r8, r8)
 80007a4:	200000a0 	.word	0x200000a0
 80007a8:	0800291c 	.word	0x0800291c
 80007ac:	08002928 	.word	0x08002928
 80007b0:	2000008c 	.word	0x2000008c
 80007b4:	08002938 	.word	0x08002938
 80007b8:	20000090 	.word	0x20000090

080007bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007bc:	b590      	push	{r4, r7, lr}
 80007be:	b091      	sub	sp, #68	; 0x44
 80007c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007c2:	2410      	movs	r4, #16
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	0018      	movs	r0, r3
 80007c8:	2330      	movs	r3, #48	; 0x30
 80007ca:	001a      	movs	r2, r3
 80007cc:	2100      	movs	r1, #0
 80007ce:	f001 fc27 	bl	8002020 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007d2:	003b      	movs	r3, r7
 80007d4:	0018      	movs	r0, r3
 80007d6:	2310      	movs	r3, #16
 80007d8:	001a      	movs	r2, r3
 80007da:	2100      	movs	r1, #0
 80007dc:	f001 fc20 	bl	8002020 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI14|RCC_OSCILLATORTYPE_HSE;
 80007e0:	0021      	movs	r1, r4
 80007e2:	187b      	adds	r3, r7, r1
 80007e4:	2211      	movs	r2, #17
 80007e6:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007e8:	187b      	adds	r3, r7, r1
 80007ea:	2201      	movs	r2, #1
 80007ec:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80007ee:	187b      	adds	r3, r7, r1
 80007f0:	2201      	movs	r2, #1
 80007f2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80007f4:	187b      	adds	r3, r7, r1
 80007f6:	2210      	movs	r2, #16
 80007f8:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007fa:	187b      	adds	r3, r7, r1
 80007fc:	2200      	movs	r2, #0
 80007fe:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000800:	187b      	adds	r3, r7, r1
 8000802:	0018      	movs	r0, r3
 8000804:	f000 ff94 	bl	8001730 <HAL_RCC_OscConfig>
 8000808:	1e03      	subs	r3, r0, #0
 800080a:	d001      	beq.n	8000810 <SystemClock_Config+0x54>
  {
    Error_Handler();
 800080c:	f000 f8be 	bl	800098c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000810:	003b      	movs	r3, r7
 8000812:	2207      	movs	r2, #7
 8000814:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000816:	003b      	movs	r3, r7
 8000818:	2201      	movs	r2, #1
 800081a:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800081c:	003b      	movs	r3, r7
 800081e:	2200      	movs	r2, #0
 8000820:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000822:	003b      	movs	r3, r7
 8000824:	2200      	movs	r2, #0
 8000826:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000828:	003b      	movs	r3, r7
 800082a:	2100      	movs	r1, #0
 800082c:	0018      	movs	r0, r3
 800082e:	f001 fa99 	bl	8001d64 <HAL_RCC_ClockConfig>
 8000832:	1e03      	subs	r3, r0, #0
 8000834:	d001      	beq.n	800083a <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000836:	f000 f8a9 	bl	800098c <Error_Handler>
  }
}
 800083a:	46c0      	nop			; (mov r8, r8)
 800083c:	46bd      	mov	sp, r7
 800083e:	b011      	add	sp, #68	; 0x44
 8000840:	bd90      	pop	{r4, r7, pc}
	...

08000844 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800084a:	1d3b      	adds	r3, r7, #4
 800084c:	0018      	movs	r0, r3
 800084e:	230c      	movs	r3, #12
 8000850:	001a      	movs	r2, r3
 8000852:	2100      	movs	r1, #0
 8000854:	f001 fbe4 	bl	8002020 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000858:	4b26      	ldr	r3, [pc, #152]	; (80008f4 <MX_ADC_Init+0xb0>)
 800085a:	4a27      	ldr	r2, [pc, #156]	; (80008f8 <MX_ADC_Init+0xb4>)
 800085c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800085e:	4b25      	ldr	r3, [pc, #148]	; (80008f4 <MX_ADC_Init+0xb0>)
 8000860:	2200      	movs	r2, #0
 8000862:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000864:	4b23      	ldr	r3, [pc, #140]	; (80008f4 <MX_ADC_Init+0xb0>)
 8000866:	2200      	movs	r2, #0
 8000868:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800086a:	4b22      	ldr	r3, [pc, #136]	; (80008f4 <MX_ADC_Init+0xb0>)
 800086c:	2200      	movs	r2, #0
 800086e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000870:	4b20      	ldr	r3, [pc, #128]	; (80008f4 <MX_ADC_Init+0xb0>)
 8000872:	2201      	movs	r2, #1
 8000874:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000876:	4b1f      	ldr	r3, [pc, #124]	; (80008f4 <MX_ADC_Init+0xb0>)
 8000878:	2204      	movs	r2, #4
 800087a:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 800087c:	4b1d      	ldr	r3, [pc, #116]	; (80008f4 <MX_ADC_Init+0xb0>)
 800087e:	2200      	movs	r2, #0
 8000880:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000882:	4b1c      	ldr	r3, [pc, #112]	; (80008f4 <MX_ADC_Init+0xb0>)
 8000884:	2200      	movs	r2, #0
 8000886:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = ENABLE;
 8000888:	4b1a      	ldr	r3, [pc, #104]	; (80008f4 <MX_ADC_Init+0xb0>)
 800088a:	2201      	movs	r2, #1
 800088c:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800088e:	4b19      	ldr	r3, [pc, #100]	; (80008f4 <MX_ADC_Init+0xb0>)
 8000890:	2200      	movs	r2, #0
 8000892:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000894:	4b17      	ldr	r3, [pc, #92]	; (80008f4 <MX_ADC_Init+0xb0>)
 8000896:	22c2      	movs	r2, #194	; 0xc2
 8000898:	32ff      	adds	r2, #255	; 0xff
 800089a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800089c:	4b15      	ldr	r3, [pc, #84]	; (80008f4 <MX_ADC_Init+0xb0>)
 800089e:	2200      	movs	r2, #0
 80008a0:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80008a2:	4b14      	ldr	r3, [pc, #80]	; (80008f4 <MX_ADC_Init+0xb0>)
 80008a4:	2224      	movs	r2, #36	; 0x24
 80008a6:	2100      	movs	r1, #0
 80008a8:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008aa:	4b12      	ldr	r3, [pc, #72]	; (80008f4 <MX_ADC_Init+0xb0>)
 80008ac:	2201      	movs	r2, #1
 80008ae:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008b0:	4b10      	ldr	r3, [pc, #64]	; (80008f4 <MX_ADC_Init+0xb0>)
 80008b2:	0018      	movs	r0, r3
 80008b4:	f000 f9e0 	bl	8000c78 <HAL_ADC_Init>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80008bc:	f000 f866 	bl	800098c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008c0:	1d3b      	adds	r3, r7, #4
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80008c6:	1d3b      	adds	r3, r7, #4
 80008c8:	2280      	movs	r2, #128	; 0x80
 80008ca:	0152      	lsls	r2, r2, #5
 80008cc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80008ce:	1d3b      	adds	r3, r7, #4
 80008d0:	2280      	movs	r2, #128	; 0x80
 80008d2:	0552      	lsls	r2, r2, #21
 80008d4:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80008d6:	1d3a      	adds	r2, r7, #4
 80008d8:	4b06      	ldr	r3, [pc, #24]	; (80008f4 <MX_ADC_Init+0xb0>)
 80008da:	0011      	movs	r1, r2
 80008dc:	0018      	movs	r0, r3
 80008de:	f000 fb6b 	bl	8000fb8 <HAL_ADC_ConfigChannel>
 80008e2:	1e03      	subs	r3, r0, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC_Init+0xa6>
  {
    Error_Handler();
 80008e6:	f000 f851 	bl	800098c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80008ea:	46c0      	nop			; (mov r8, r8)
 80008ec:	46bd      	mov	sp, r7
 80008ee:	b004      	add	sp, #16
 80008f0:	bd80      	pop	{r7, pc}
 80008f2:	46c0      	nop			; (mov r8, r8)
 80008f4:	200000a0 	.word	0x200000a0
 80008f8:	40012400 	.word	0x40012400

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b590      	push	{r4, r7, lr}
 80008fe:	b089      	sub	sp, #36	; 0x24
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	240c      	movs	r4, #12
 8000904:	193b      	adds	r3, r7, r4
 8000906:	0018      	movs	r0, r3
 8000908:	2314      	movs	r3, #20
 800090a:	001a      	movs	r2, r3
 800090c:	2100      	movs	r1, #0
 800090e:	f001 fb87 	bl	8002020 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000912:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <MX_GPIO_Init+0x8c>)
 8000914:	695a      	ldr	r2, [r3, #20]
 8000916:	4b1c      	ldr	r3, [pc, #112]	; (8000988 <MX_GPIO_Init+0x8c>)
 8000918:	2180      	movs	r1, #128	; 0x80
 800091a:	03c9      	lsls	r1, r1, #15
 800091c:	430a      	orrs	r2, r1
 800091e:	615a      	str	r2, [r3, #20]
 8000920:	4b19      	ldr	r3, [pc, #100]	; (8000988 <MX_GPIO_Init+0x8c>)
 8000922:	695a      	ldr	r2, [r3, #20]
 8000924:	2380      	movs	r3, #128	; 0x80
 8000926:	03db      	lsls	r3, r3, #15
 8000928:	4013      	ands	r3, r2
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b16      	ldr	r3, [pc, #88]	; (8000988 <MX_GPIO_Init+0x8c>)
 8000930:	695a      	ldr	r2, [r3, #20]
 8000932:	4b15      	ldr	r3, [pc, #84]	; (8000988 <MX_GPIO_Init+0x8c>)
 8000934:	2180      	movs	r1, #128	; 0x80
 8000936:	0289      	lsls	r1, r1, #10
 8000938:	430a      	orrs	r2, r1
 800093a:	615a      	str	r2, [r3, #20]
 800093c:	4b12      	ldr	r3, [pc, #72]	; (8000988 <MX_GPIO_Init+0x8c>)
 800093e:	695a      	ldr	r2, [r3, #20]
 8000940:	2380      	movs	r3, #128	; 0x80
 8000942:	029b      	lsls	r3, r3, #10
 8000944:	4013      	ands	r3, r2
 8000946:	607b      	str	r3, [r7, #4]
 8000948:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 800094a:	2390      	movs	r3, #144	; 0x90
 800094c:	05db      	lsls	r3, r3, #23
 800094e:	2200      	movs	r2, #0
 8000950:	21fc      	movs	r1, #252	; 0xfc
 8000952:	0018      	movs	r0, r3
 8000954:	f000 fece 	bl	80016f4 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000958:	0021      	movs	r1, r4
 800095a:	187b      	adds	r3, r7, r1
 800095c:	22fc      	movs	r2, #252	; 0xfc
 800095e:	601a      	str	r2, [r3, #0]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000960:	187b      	adds	r3, r7, r1
 8000962:	2201      	movs	r2, #1
 8000964:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	187b      	adds	r3, r7, r1
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	187b      	adds	r3, r7, r1
 800096e:	2200      	movs	r2, #0
 8000970:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000972:	187a      	adds	r2, r7, r1
 8000974:	2390      	movs	r3, #144	; 0x90
 8000976:	05db      	lsls	r3, r3, #23
 8000978:	0011      	movs	r1, r2
 800097a:	0018      	movs	r0, r3
 800097c:	f000 fd4a 	bl	8001414 <HAL_GPIO_Init>

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b009      	add	sp, #36	; 0x24
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	40021000 	.word	0x40021000

0800098c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000990:	b672      	cpsid	i
}
 8000992:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000994:	e7fe      	b.n	8000994 <Error_Handler+0x8>
	...

08000998 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b082      	sub	sp, #8
 800099c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800099e:	4b0f      	ldr	r3, [pc, #60]	; (80009dc <HAL_MspInit+0x44>)
 80009a0:	699a      	ldr	r2, [r3, #24]
 80009a2:	4b0e      	ldr	r3, [pc, #56]	; (80009dc <HAL_MspInit+0x44>)
 80009a4:	2101      	movs	r1, #1
 80009a6:	430a      	orrs	r2, r1
 80009a8:	619a      	str	r2, [r3, #24]
 80009aa:	4b0c      	ldr	r3, [pc, #48]	; (80009dc <HAL_MspInit+0x44>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	2201      	movs	r2, #1
 80009b0:	4013      	ands	r3, r2
 80009b2:	607b      	str	r3, [r7, #4]
 80009b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b6:	4b09      	ldr	r3, [pc, #36]	; (80009dc <HAL_MspInit+0x44>)
 80009b8:	69da      	ldr	r2, [r3, #28]
 80009ba:	4b08      	ldr	r3, [pc, #32]	; (80009dc <HAL_MspInit+0x44>)
 80009bc:	2180      	movs	r1, #128	; 0x80
 80009be:	0549      	lsls	r1, r1, #21
 80009c0:	430a      	orrs	r2, r1
 80009c2:	61da      	str	r2, [r3, #28]
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <HAL_MspInit+0x44>)
 80009c6:	69da      	ldr	r2, [r3, #28]
 80009c8:	2380      	movs	r3, #128	; 0x80
 80009ca:	055b      	lsls	r3, r3, #21
 80009cc:	4013      	ands	r3, r2
 80009ce:	603b      	str	r3, [r7, #0]
 80009d0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009d2:	46c0      	nop			; (mov r8, r8)
 80009d4:	46bd      	mov	sp, r7
 80009d6:	b002      	add	sp, #8
 80009d8:	bd80      	pop	{r7, pc}
 80009da:	46c0      	nop			; (mov r8, r8)
 80009dc:	40021000 	.word	0x40021000

080009e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009e0:	b590      	push	{r4, r7, lr}
 80009e2:	b08b      	sub	sp, #44	; 0x2c
 80009e4:	af00      	add	r7, sp, #0
 80009e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009e8:	2414      	movs	r4, #20
 80009ea:	193b      	adds	r3, r7, r4
 80009ec:	0018      	movs	r0, r3
 80009ee:	2314      	movs	r3, #20
 80009f0:	001a      	movs	r2, r3
 80009f2:	2100      	movs	r1, #0
 80009f4:	f001 fb14 	bl	8002020 <memset>
  if(hadc->Instance==ADC1)
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	4a19      	ldr	r2, [pc, #100]	; (8000a64 <HAL_ADC_MspInit+0x84>)
 80009fe:	4293      	cmp	r3, r2
 8000a00:	d12b      	bne.n	8000a5a <HAL_ADC_MspInit+0x7a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a02:	4b19      	ldr	r3, [pc, #100]	; (8000a68 <HAL_ADC_MspInit+0x88>)
 8000a04:	699a      	ldr	r2, [r3, #24]
 8000a06:	4b18      	ldr	r3, [pc, #96]	; (8000a68 <HAL_ADC_MspInit+0x88>)
 8000a08:	2180      	movs	r1, #128	; 0x80
 8000a0a:	0089      	lsls	r1, r1, #2
 8000a0c:	430a      	orrs	r2, r1
 8000a0e:	619a      	str	r2, [r3, #24]
 8000a10:	4b15      	ldr	r3, [pc, #84]	; (8000a68 <HAL_ADC_MspInit+0x88>)
 8000a12:	699a      	ldr	r2, [r3, #24]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	009b      	lsls	r3, r3, #2
 8000a18:	4013      	ands	r3, r2
 8000a1a:	613b      	str	r3, [r7, #16]
 8000a1c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <HAL_ADC_MspInit+0x88>)
 8000a20:	695a      	ldr	r2, [r3, #20]
 8000a22:	4b11      	ldr	r3, [pc, #68]	; (8000a68 <HAL_ADC_MspInit+0x88>)
 8000a24:	2180      	movs	r1, #128	; 0x80
 8000a26:	0289      	lsls	r1, r1, #10
 8000a28:	430a      	orrs	r2, r1
 8000a2a:	615a      	str	r2, [r3, #20]
 8000a2c:	4b0e      	ldr	r3, [pc, #56]	; (8000a68 <HAL_ADC_MspInit+0x88>)
 8000a2e:	695a      	ldr	r2, [r3, #20]
 8000a30:	2380      	movs	r3, #128	; 0x80
 8000a32:	029b      	lsls	r3, r3, #10
 8000a34:	4013      	ands	r3, r2
 8000a36:	60fb      	str	r3, [r7, #12]
 8000a38:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a40:	193b      	adds	r3, r7, r4
 8000a42:	2203      	movs	r2, #3
 8000a44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a46:	193b      	adds	r3, r7, r4
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a4c:	193a      	adds	r2, r7, r4
 8000a4e:	2390      	movs	r3, #144	; 0x90
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	0011      	movs	r1, r2
 8000a54:	0018      	movs	r0, r3
 8000a56:	f000 fcdd 	bl	8001414 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000a5a:	46c0      	nop			; (mov r8, r8)
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	b00b      	add	sp, #44	; 0x2c
 8000a60:	bd90      	pop	{r4, r7, pc}
 8000a62:	46c0      	nop			; (mov r8, r8)
 8000a64:	40012400 	.word	0x40012400
 8000a68:	40021000 	.word	0x40021000

08000a6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a70:	e7fe      	b.n	8000a70 <NMI_Handler+0x4>

08000a72 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a76:	e7fe      	b.n	8000a76 <HardFault_Handler+0x4>

08000a78 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a78:	b580      	push	{r7, lr}
 8000a7a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a7c:	46c0      	nop			; (mov r8, r8)
 8000a7e:	46bd      	mov	sp, r7
 8000a80:	bd80      	pop	{r7, pc}

08000a82 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a82:	b580      	push	{r7, lr}
 8000a84:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a86:	46c0      	nop			; (mov r8, r8)
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	bd80      	pop	{r7, pc}

08000a8c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a90:	f000 f8b2 	bl	8000bf8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
	...

08000a9c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b086      	sub	sp, #24
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000aa4:	4a14      	ldr	r2, [pc, #80]	; (8000af8 <_sbrk+0x5c>)
 8000aa6:	4b15      	ldr	r3, [pc, #84]	; (8000afc <_sbrk+0x60>)
 8000aa8:	1ad3      	subs	r3, r2, r3
 8000aaa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ab0:	4b13      	ldr	r3, [pc, #76]	; (8000b00 <_sbrk+0x64>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2b00      	cmp	r3, #0
 8000ab6:	d102      	bne.n	8000abe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ab8:	4b11      	ldr	r3, [pc, #68]	; (8000b00 <_sbrk+0x64>)
 8000aba:	4a12      	ldr	r2, [pc, #72]	; (8000b04 <_sbrk+0x68>)
 8000abc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000abe:	4b10      	ldr	r3, [pc, #64]	; (8000b00 <_sbrk+0x64>)
 8000ac0:	681a      	ldr	r2, [r3, #0]
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	18d3      	adds	r3, r2, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	429a      	cmp	r2, r3
 8000aca:	d207      	bcs.n	8000adc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000acc:	f001 fa7e 	bl	8001fcc <__errno>
 8000ad0:	0003      	movs	r3, r0
 8000ad2:	220c      	movs	r2, #12
 8000ad4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ad6:	2301      	movs	r3, #1
 8000ad8:	425b      	negs	r3, r3
 8000ada:	e009      	b.n	8000af0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000adc:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <_sbrk+0x64>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ae2:	4b07      	ldr	r3, [pc, #28]	; (8000b00 <_sbrk+0x64>)
 8000ae4:	681a      	ldr	r2, [r3, #0]
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	18d2      	adds	r2, r2, r3
 8000aea:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <_sbrk+0x64>)
 8000aec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8000aee:	68fb      	ldr	r3, [r7, #12]
}
 8000af0:	0018      	movs	r0, r3
 8000af2:	46bd      	mov	sp, r7
 8000af4:	b006      	add	sp, #24
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20001000 	.word	0x20001000
 8000afc:	00000400 	.word	0x00000400
 8000b00:	200000e0 	.word	0x200000e0
 8000b04:	200000f8 	.word	0x200000f8

08000b08 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000b0c:	46c0      	nop			; (mov r8, r8)
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	bd80      	pop	{r7, pc}
	...

08000b14 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b14:	480d      	ldr	r0, [pc, #52]	; (8000b4c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b16:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b18:	480d      	ldr	r0, [pc, #52]	; (8000b50 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b1a:	490e      	ldr	r1, [pc, #56]	; (8000b54 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b1c:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <LoopForever+0xe>)
  movs r3, #0
 8000b1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b20:	e002      	b.n	8000b28 <LoopCopyDataInit>

08000b22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b26:	3304      	adds	r3, #4

08000b28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b2c:	d3f9      	bcc.n	8000b22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b2e:	4a0b      	ldr	r2, [pc, #44]	; (8000b5c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b30:	4c0b      	ldr	r4, [pc, #44]	; (8000b60 <LoopForever+0x16>)
  movs r3, #0
 8000b32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b34:	e001      	b.n	8000b3a <LoopFillZerobss>

08000b36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b38:	3204      	adds	r2, #4

08000b3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b3c:	d3fb      	bcc.n	8000b36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b3e:	f7ff ffe3 	bl	8000b08 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000b42:	f001 fa49 	bl	8001fd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b46:	f7ff fdef 	bl	8000728 <main>

08000b4a <LoopForever>:

LoopForever:
    b LoopForever
 8000b4a:	e7fe      	b.n	8000b4a <LoopForever>
  ldr   r0, =_estack
 8000b4c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000b50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b54:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000b58:	080029a8 	.word	0x080029a8
  ldr r2, =_sbss
 8000b5c:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000b60:	200000f8 	.word	0x200000f8

08000b64 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b64:	e7fe      	b.n	8000b64 <ADC1_IRQHandler>
	...

08000b68 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b6c:	4b07      	ldr	r3, [pc, #28]	; (8000b8c <HAL_Init+0x24>)
 8000b6e:	681a      	ldr	r2, [r3, #0]
 8000b70:	4b06      	ldr	r3, [pc, #24]	; (8000b8c <HAL_Init+0x24>)
 8000b72:	2110      	movs	r1, #16
 8000b74:	430a      	orrs	r2, r1
 8000b76:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000b78:	2003      	movs	r0, #3
 8000b7a:	f000 f809 	bl	8000b90 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b7e:	f7ff ff0b 	bl	8000998 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
}
 8000b84:	0018      	movs	r0, r3
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	46c0      	nop			; (mov r8, r8)
 8000b8c:	40022000 	.word	0x40022000

08000b90 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b90:	b590      	push	{r4, r7, lr}
 8000b92:	b083      	sub	sp, #12
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b98:	4b14      	ldr	r3, [pc, #80]	; (8000bec <HAL_InitTick+0x5c>)
 8000b9a:	681c      	ldr	r4, [r3, #0]
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_InitTick+0x60>)
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	0019      	movs	r1, r3
 8000ba2:	23fa      	movs	r3, #250	; 0xfa
 8000ba4:	0098      	lsls	r0, r3, #2
 8000ba6:	f7ff fab9 	bl	800011c <__udivsi3>
 8000baa:	0003      	movs	r3, r0
 8000bac:	0019      	movs	r1, r3
 8000bae:	0020      	movs	r0, r4
 8000bb0:	f7ff fab4 	bl	800011c <__udivsi3>
 8000bb4:	0003      	movs	r3, r0
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	f000 fc1f 	bl	80013fa <HAL_SYSTICK_Config>
 8000bbc:	1e03      	subs	r3, r0, #0
 8000bbe:	d001      	beq.n	8000bc4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	e00f      	b.n	8000be4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	2b03      	cmp	r3, #3
 8000bc8:	d80b      	bhi.n	8000be2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bca:	6879      	ldr	r1, [r7, #4]
 8000bcc:	2301      	movs	r3, #1
 8000bce:	425b      	negs	r3, r3
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fbfc 	bl	80013d0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bd8:	4b06      	ldr	r3, [pc, #24]	; (8000bf4 <HAL_InitTick+0x64>)
 8000bda:	687a      	ldr	r2, [r7, #4]
 8000bdc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8000bde:	2300      	movs	r3, #0
 8000be0:	e000      	b.n	8000be4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000be2:	2301      	movs	r3, #1
}
 8000be4:	0018      	movs	r0, r3
 8000be6:	46bd      	mov	sp, r7
 8000be8:	b003      	add	sp, #12
 8000bea:	bd90      	pop	{r4, r7, pc}
 8000bec:	20000000 	.word	0x20000000
 8000bf0:	20000008 	.word	0x20000008
 8000bf4:	20000004 	.word	0x20000004

08000bf8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <HAL_IncTick+0x1c>)
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	001a      	movs	r2, r3
 8000c02:	4b05      	ldr	r3, [pc, #20]	; (8000c18 <HAL_IncTick+0x20>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	18d2      	adds	r2, r2, r3
 8000c08:	4b03      	ldr	r3, [pc, #12]	; (8000c18 <HAL_IncTick+0x20>)
 8000c0a:	601a      	str	r2, [r3, #0]
}
 8000c0c:	46c0      	nop			; (mov r8, r8)
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	46c0      	nop			; (mov r8, r8)
 8000c14:	20000008 	.word	0x20000008
 8000c18:	200000e4 	.word	0x200000e4

08000c1c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c20:	4b02      	ldr	r3, [pc, #8]	; (8000c2c <HAL_GetTick+0x10>)
 8000c22:	681b      	ldr	r3, [r3, #0]
}
 8000c24:	0018      	movs	r0, r3
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	46c0      	nop			; (mov r8, r8)
 8000c2c:	200000e4 	.word	0x200000e4

08000c30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b084      	sub	sp, #16
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c38:	f7ff fff0 	bl	8000c1c <HAL_GetTick>
 8000c3c:	0003      	movs	r3, r0
 8000c3e:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c44:	68fb      	ldr	r3, [r7, #12]
 8000c46:	3301      	adds	r3, #1
 8000c48:	d005      	beq.n	8000c56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <HAL_Delay+0x44>)
 8000c4c:	781b      	ldrb	r3, [r3, #0]
 8000c4e:	001a      	movs	r2, r3
 8000c50:	68fb      	ldr	r3, [r7, #12]
 8000c52:	189b      	adds	r3, r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c56:	46c0      	nop			; (mov r8, r8)
 8000c58:	f7ff ffe0 	bl	8000c1c <HAL_GetTick>
 8000c5c:	0002      	movs	r2, r0
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	1ad3      	subs	r3, r2, r3
 8000c62:	68fa      	ldr	r2, [r7, #12]
 8000c64:	429a      	cmp	r2, r3
 8000c66:	d8f7      	bhi.n	8000c58 <HAL_Delay+0x28>
  {
  }
}
 8000c68:	46c0      	nop			; (mov r8, r8)
 8000c6a:	46c0      	nop			; (mov r8, r8)
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	b004      	add	sp, #16
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	46c0      	nop			; (mov r8, r8)
 8000c74:	20000008 	.word	0x20000008

08000c78 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b084      	sub	sp, #16
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c80:	230f      	movs	r3, #15
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	2200      	movs	r2, #0
 8000c86:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d101      	bne.n	8000c96 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8000c92:	2301      	movs	r3, #1
 8000c94:	e125      	b.n	8000ee2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d10a      	bne.n	8000cb4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	2234      	movs	r2, #52	; 0x34
 8000ca8:	2100      	movs	r1, #0
 8000caa:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	0018      	movs	r0, r3
 8000cb0:	f7ff fe96 	bl	80009e0 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cb8:	2210      	movs	r2, #16
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d000      	beq.n	8000cc0 <HAL_ADC_Init+0x48>
 8000cbe:	e103      	b.n	8000ec8 <HAL_ADC_Init+0x250>
 8000cc0:	230f      	movs	r3, #15
 8000cc2:	18fb      	adds	r3, r7, r3
 8000cc4:	781b      	ldrb	r3, [r3, #0]
 8000cc6:	2b00      	cmp	r3, #0
 8000cc8:	d000      	beq.n	8000ccc <HAL_ADC_Init+0x54>
 8000cca:	e0fd      	b.n	8000ec8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	681b      	ldr	r3, [r3, #0]
 8000cd0:	689b      	ldr	r3, [r3, #8]
 8000cd2:	2204      	movs	r2, #4
 8000cd4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8000cd6:	d000      	beq.n	8000cda <HAL_ADC_Init+0x62>
 8000cd8:	e0f6      	b.n	8000ec8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000cde:	4a83      	ldr	r2, [pc, #524]	; (8000eec <HAL_ADC_Init+0x274>)
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	2202      	movs	r2, #2
 8000ce4:	431a      	orrs	r2, r3
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	689b      	ldr	r3, [r3, #8]
 8000cf0:	2203      	movs	r2, #3
 8000cf2:	4013      	ands	r3, r2
 8000cf4:	2b01      	cmp	r3, #1
 8000cf6:	d112      	bne.n	8000d1e <HAL_ADC_Init+0xa6>
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	2201      	movs	r2, #1
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	d009      	beq.n	8000d1a <HAL_ADC_Init+0xa2>
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	68da      	ldr	r2, [r3, #12]
 8000d0c:	2380      	movs	r3, #128	; 0x80
 8000d0e:	021b      	lsls	r3, r3, #8
 8000d10:	401a      	ands	r2, r3
 8000d12:	2380      	movs	r3, #128	; 0x80
 8000d14:	021b      	lsls	r3, r3, #8
 8000d16:	429a      	cmp	r2, r3
 8000d18:	d101      	bne.n	8000d1e <HAL_ADC_Init+0xa6>
 8000d1a:	2301      	movs	r3, #1
 8000d1c:	e000      	b.n	8000d20 <HAL_ADC_Init+0xa8>
 8000d1e:	2300      	movs	r3, #0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d116      	bne.n	8000d52 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	68db      	ldr	r3, [r3, #12]
 8000d2a:	2218      	movs	r2, #24
 8000d2c:	4393      	bics	r3, r2
 8000d2e:	0019      	movs	r1, r3
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	689a      	ldr	r2, [r3, #8]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	691b      	ldr	r3, [r3, #16]
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	0899      	lsrs	r1, r3, #2
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	685a      	ldr	r2, [r3, #4]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	430a      	orrs	r2, r1
 8000d50:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	68da      	ldr	r2, [r3, #12]
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	4964      	ldr	r1, [pc, #400]	; (8000ef0 <HAL_ADC_Init+0x278>)
 8000d5e:	400a      	ands	r2, r1
 8000d60:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	7e1b      	ldrb	r3, [r3, #24]
 8000d66:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	7e5b      	ldrb	r3, [r3, #25]
 8000d6c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000d6e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	7e9b      	ldrb	r3, [r3, #26]
 8000d74:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8000d76:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d7c:	2b01      	cmp	r3, #1
 8000d7e:	d002      	beq.n	8000d86 <HAL_ADC_Init+0x10e>
 8000d80:	2380      	movs	r3, #128	; 0x80
 8000d82:	015b      	lsls	r3, r3, #5
 8000d84:	e000      	b.n	8000d88 <HAL_ADC_Init+0x110>
 8000d86:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8000d88:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8000d8e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	691b      	ldr	r3, [r3, #16]
 8000d94:	2b02      	cmp	r3, #2
 8000d96:	d101      	bne.n	8000d9c <HAL_ADC_Init+0x124>
 8000d98:	2304      	movs	r3, #4
 8000d9a:	e000      	b.n	8000d9e <HAL_ADC_Init+0x126>
 8000d9c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8000d9e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	2124      	movs	r1, #36	; 0x24
 8000da4:	5c5b      	ldrb	r3, [r3, r1]
 8000da6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8000da8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8000daa:	68ba      	ldr	r2, [r7, #8]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	7edb      	ldrb	r3, [r3, #27]
 8000db4:	2b01      	cmp	r3, #1
 8000db6:	d115      	bne.n	8000de4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	7e9b      	ldrb	r3, [r3, #26]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d105      	bne.n	8000dcc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000dc0:	68bb      	ldr	r3, [r7, #8]
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	0252      	lsls	r2, r2, #9
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60bb      	str	r3, [r7, #8]
 8000dca:	e00b      	b.n	8000de4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000dd0:	2220      	movs	r2, #32
 8000dd2:	431a      	orrs	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ddc:	2201      	movs	r2, #1
 8000dde:	431a      	orrs	r2, r3
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	69da      	ldr	r2, [r3, #28]
 8000de8:	23c2      	movs	r3, #194	; 0xc2
 8000dea:	33ff      	adds	r3, #255	; 0xff
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d007      	beq.n	8000e00 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8000df8:	4313      	orrs	r3, r2
 8000dfa:	68ba      	ldr	r2, [r7, #8]
 8000dfc:	4313      	orrs	r3, r2
 8000dfe:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	68d9      	ldr	r1, [r3, #12]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	68ba      	ldr	r2, [r7, #8]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000e14:	2380      	movs	r3, #128	; 0x80
 8000e16:	055b      	lsls	r3, r3, #21
 8000e18:	429a      	cmp	r2, r3
 8000e1a:	d01b      	beq.n	8000e54 <HAL_ADC_Init+0x1dc>
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e20:	2b01      	cmp	r3, #1
 8000e22:	d017      	beq.n	8000e54 <HAL_ADC_Init+0x1dc>
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e28:	2b02      	cmp	r3, #2
 8000e2a:	d013      	beq.n	8000e54 <HAL_ADC_Init+0x1dc>
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e30:	2b03      	cmp	r3, #3
 8000e32:	d00f      	beq.n	8000e54 <HAL_ADC_Init+0x1dc>
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e38:	2b04      	cmp	r3, #4
 8000e3a:	d00b      	beq.n	8000e54 <HAL_ADC_Init+0x1dc>
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e40:	2b05      	cmp	r3, #5
 8000e42:	d007      	beq.n	8000e54 <HAL_ADC_Init+0x1dc>
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e48:	2b06      	cmp	r3, #6
 8000e4a:	d003      	beq.n	8000e54 <HAL_ADC_Init+0x1dc>
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e50:	2b07      	cmp	r3, #7
 8000e52:	d112      	bne.n	8000e7a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	695a      	ldr	r2, [r3, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	2107      	movs	r1, #7
 8000e60:	438a      	bics	r2, r1
 8000e62:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6959      	ldr	r1, [r3, #20]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000e6e:	2207      	movs	r2, #7
 8000e70:	401a      	ands	r2, r3
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	430a      	orrs	r2, r1
 8000e78:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	4a1c      	ldr	r2, [pc, #112]	; (8000ef4 <HAL_ADC_Init+0x27c>)
 8000e82:	4013      	ands	r3, r2
 8000e84:	68ba      	ldr	r2, [r7, #8]
 8000e86:	429a      	cmp	r2, r3
 8000e88:	d10b      	bne.n	8000ea2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000e94:	2203      	movs	r2, #3
 8000e96:	4393      	bics	r3, r2
 8000e98:	2201      	movs	r2, #1
 8000e9a:	431a      	orrs	r2, r3
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000ea0:	e01c      	b.n	8000edc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ea6:	2212      	movs	r2, #18
 8000ea8:	4393      	bics	r3, r2
 8000eaa:	2210      	movs	r2, #16
 8000eac:	431a      	orrs	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000eb6:	2201      	movs	r2, #1
 8000eb8:	431a      	orrs	r2, r3
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8000ebe:	230f      	movs	r3, #15
 8000ec0:	18fb      	adds	r3, r7, r3
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8000ec6:	e009      	b.n	8000edc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000ecc:	2210      	movs	r2, #16
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8000ed4:	230f      	movs	r3, #15
 8000ed6:	18fb      	adds	r3, r7, r3
 8000ed8:	2201      	movs	r2, #1
 8000eda:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000edc:	230f      	movs	r3, #15
 8000ede:	18fb      	adds	r3, r7, r3
 8000ee0:	781b      	ldrb	r3, [r3, #0]
}
 8000ee2:	0018      	movs	r0, r3
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	b004      	add	sp, #16
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	46c0      	nop			; (mov r8, r8)
 8000eec:	fffffefd 	.word	0xfffffefd
 8000ef0:	fffe0219 	.word	0xfffe0219
 8000ef4:	833fffe7 	.word	0x833fffe7

08000ef8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000ef8:	b590      	push	{r4, r7, lr}
 8000efa:	b085      	sub	sp, #20
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f00:	230f      	movs	r3, #15
 8000f02:	18fb      	adds	r3, r7, r3
 8000f04:	2200      	movs	r2, #0
 8000f06:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	2204      	movs	r2, #4
 8000f10:	4013      	ands	r3, r2
 8000f12:	d138      	bne.n	8000f86 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2234      	movs	r2, #52	; 0x34
 8000f18:	5c9b      	ldrb	r3, [r3, r2]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d101      	bne.n	8000f22 <HAL_ADC_Start+0x2a>
 8000f1e:	2302      	movs	r3, #2
 8000f20:	e038      	b.n	8000f94 <HAL_ADC_Start+0x9c>
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	2234      	movs	r2, #52	; 0x34
 8000f26:	2101      	movs	r1, #1
 8000f28:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	7e5b      	ldrb	r3, [r3, #25]
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d007      	beq.n	8000f42 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8000f32:	230f      	movs	r3, #15
 8000f34:	18fc      	adds	r4, r7, r3
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f000 f933 	bl	80011a4 <ADC_Enable>
 8000f3e:	0003      	movs	r3, r0
 8000f40:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000f42:	230f      	movs	r3, #15
 8000f44:	18fb      	adds	r3, r7, r3
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d120      	bne.n	8000f8e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f50:	4a12      	ldr	r2, [pc, #72]	; (8000f9c <HAL_ADC_Start+0xa4>)
 8000f52:	4013      	ands	r3, r2
 8000f54:	2280      	movs	r2, #128	; 0x80
 8000f56:	0052      	lsls	r2, r2, #1
 8000f58:	431a      	orrs	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	2200      	movs	r2, #0
 8000f62:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	2234      	movs	r2, #52	; 0x34
 8000f68:	2100      	movs	r1, #0
 8000f6a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	221c      	movs	r2, #28
 8000f72:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	689a      	ldr	r2, [r3, #8]
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2104      	movs	r1, #4
 8000f80:	430a      	orrs	r2, r1
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	e003      	b.n	8000f8e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8000f86:	230f      	movs	r3, #15
 8000f88:	18fb      	adds	r3, r7, r3
 8000f8a:	2202      	movs	r2, #2
 8000f8c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f8e:	230f      	movs	r3, #15
 8000f90:	18fb      	adds	r3, r7, r3
 8000f92:	781b      	ldrb	r3, [r3, #0]
}
 8000f94:	0018      	movs	r0, r3
 8000f96:	46bd      	mov	sp, r7
 8000f98:	b005      	add	sp, #20
 8000f9a:	bd90      	pop	{r4, r7, pc}
 8000f9c:	fffff0fe 	.word	0xfffff0fe

08000fa0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8000fae:	0018      	movs	r0, r3
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	b002      	add	sp, #8
 8000fb4:	bd80      	pop	{r7, pc}
	...

08000fb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
 8000fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000fc2:	230f      	movs	r3, #15
 8000fc4:	18fb      	adds	r3, r7, r3
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd2:	2380      	movs	r3, #128	; 0x80
 8000fd4:	055b      	lsls	r3, r3, #21
 8000fd6:	429a      	cmp	r2, r3
 8000fd8:	d011      	beq.n	8000ffe <HAL_ADC_ConfigChannel+0x46>
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d00d      	beq.n	8000ffe <HAL_ADC_ConfigChannel+0x46>
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d009      	beq.n	8000ffe <HAL_ADC_ConfigChannel+0x46>
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d005      	beq.n	8000ffe <HAL_ADC_ConfigChannel+0x46>
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ff6:	2b04      	cmp	r3, #4
 8000ff8:	d001      	beq.n	8000ffe <HAL_ADC_ConfigChannel+0x46>
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	2234      	movs	r2, #52	; 0x34
 8001002:	5c9b      	ldrb	r3, [r3, r2]
 8001004:	2b01      	cmp	r3, #1
 8001006:	d101      	bne.n	800100c <HAL_ADC_ConfigChannel+0x54>
 8001008:	2302      	movs	r3, #2
 800100a:	e0bb      	b.n	8001184 <HAL_ADC_ConfigChannel+0x1cc>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	2234      	movs	r2, #52	; 0x34
 8001010:	2101      	movs	r1, #1
 8001012:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	689b      	ldr	r3, [r3, #8]
 800101a:	2204      	movs	r2, #4
 800101c:	4013      	ands	r3, r2
 800101e:	d000      	beq.n	8001022 <HAL_ADC_ConfigChannel+0x6a>
 8001020:	e09f      	b.n	8001162 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	4a59      	ldr	r2, [pc, #356]	; (800118c <HAL_ADC_ConfigChannel+0x1d4>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d100      	bne.n	800102e <HAL_ADC_ConfigChannel+0x76>
 800102c:	e077      	b.n	800111e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001034:	683b      	ldr	r3, [r7, #0]
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	2201      	movs	r2, #1
 800103a:	409a      	lsls	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001048:	2380      	movs	r3, #128	; 0x80
 800104a:	055b      	lsls	r3, r3, #21
 800104c:	429a      	cmp	r2, r3
 800104e:	d037      	beq.n	80010c0 <HAL_ADC_ConfigChannel+0x108>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001054:	2b01      	cmp	r3, #1
 8001056:	d033      	beq.n	80010c0 <HAL_ADC_ConfigChannel+0x108>
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800105c:	2b02      	cmp	r3, #2
 800105e:	d02f      	beq.n	80010c0 <HAL_ADC_ConfigChannel+0x108>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	2b03      	cmp	r3, #3
 8001066:	d02b      	beq.n	80010c0 <HAL_ADC_ConfigChannel+0x108>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800106c:	2b04      	cmp	r3, #4
 800106e:	d027      	beq.n	80010c0 <HAL_ADC_ConfigChannel+0x108>
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001074:	2b05      	cmp	r3, #5
 8001076:	d023      	beq.n	80010c0 <HAL_ADC_ConfigChannel+0x108>
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800107c:	2b06      	cmp	r3, #6
 800107e:	d01f      	beq.n	80010c0 <HAL_ADC_ConfigChannel+0x108>
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001084:	2b07      	cmp	r3, #7
 8001086:	d01b      	beq.n	80010c0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	689a      	ldr	r2, [r3, #8]
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	681b      	ldr	r3, [r3, #0]
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	2107      	movs	r1, #7
 8001094:	400b      	ands	r3, r1
 8001096:	429a      	cmp	r2, r3
 8001098:	d012      	beq.n	80010c0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	695a      	ldr	r2, [r3, #20]
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	2107      	movs	r1, #7
 80010a6:	438a      	bics	r2, r1
 80010a8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	6959      	ldr	r1, [r3, #20]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	2207      	movs	r2, #7
 80010b6:	401a      	ands	r2, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	430a      	orrs	r2, r1
 80010be:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80010c0:	683b      	ldr	r3, [r7, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	2b10      	cmp	r3, #16
 80010c6:	d003      	beq.n	80010d0 <HAL_ADC_ConfigChannel+0x118>
 80010c8:	683b      	ldr	r3, [r7, #0]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	2b11      	cmp	r3, #17
 80010ce:	d152      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80010d0:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_ADC_ConfigChannel+0x1d8>)
 80010d2:	6819      	ldr	r1, [r3, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	2b10      	cmp	r3, #16
 80010da:	d102      	bne.n	80010e2 <HAL_ADC_ConfigChannel+0x12a>
 80010dc:	2380      	movs	r3, #128	; 0x80
 80010de:	041b      	lsls	r3, r3, #16
 80010e0:	e001      	b.n	80010e6 <HAL_ADC_ConfigChannel+0x12e>
 80010e2:	2380      	movs	r3, #128	; 0x80
 80010e4:	03db      	lsls	r3, r3, #15
 80010e6:	4a2a      	ldr	r2, [pc, #168]	; (8001190 <HAL_ADC_ConfigChannel+0x1d8>)
 80010e8:	430b      	orrs	r3, r1
 80010ea:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	2b10      	cmp	r3, #16
 80010f2:	d140      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010f4:	4b27      	ldr	r3, [pc, #156]	; (8001194 <HAL_ADC_ConfigChannel+0x1dc>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4927      	ldr	r1, [pc, #156]	; (8001198 <HAL_ADC_ConfigChannel+0x1e0>)
 80010fa:	0018      	movs	r0, r3
 80010fc:	f7ff f80e 	bl	800011c <__udivsi3>
 8001100:	0003      	movs	r3, r0
 8001102:	001a      	movs	r2, r3
 8001104:	0013      	movs	r3, r2
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	189b      	adds	r3, r3, r2
 800110a:	005b      	lsls	r3, r3, #1
 800110c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800110e:	e002      	b.n	8001116 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001110:	68bb      	ldr	r3, [r7, #8]
 8001112:	3b01      	subs	r3, #1
 8001114:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001116:	68bb      	ldr	r3, [r7, #8]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f9      	bne.n	8001110 <HAL_ADC_ConfigChannel+0x158>
 800111c:	e02b      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	2101      	movs	r1, #1
 800112a:	4099      	lsls	r1, r3
 800112c:	000b      	movs	r3, r1
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	400a      	ands	r2, r1
 8001136:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	2b10      	cmp	r3, #16
 800113e:	d003      	beq.n	8001148 <HAL_ADC_ConfigChannel+0x190>
 8001140:	683b      	ldr	r3, [r7, #0]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	2b11      	cmp	r3, #17
 8001146:	d116      	bne.n	8001176 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001148:	4b11      	ldr	r3, [pc, #68]	; (8001190 <HAL_ADC_ConfigChannel+0x1d8>)
 800114a:	6819      	ldr	r1, [r3, #0]
 800114c:	683b      	ldr	r3, [r7, #0]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	2b10      	cmp	r3, #16
 8001152:	d101      	bne.n	8001158 <HAL_ADC_ConfigChannel+0x1a0>
 8001154:	4a11      	ldr	r2, [pc, #68]	; (800119c <HAL_ADC_ConfigChannel+0x1e4>)
 8001156:	e000      	b.n	800115a <HAL_ADC_ConfigChannel+0x1a2>
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <HAL_ADC_ConfigChannel+0x1e8>)
 800115a:	4b0d      	ldr	r3, [pc, #52]	; (8001190 <HAL_ADC_ConfigChannel+0x1d8>)
 800115c:	400a      	ands	r2, r1
 800115e:	601a      	str	r2, [r3, #0]
 8001160:	e009      	b.n	8001176 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001166:	2220      	movs	r2, #32
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800116e:	230f      	movs	r3, #15
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	2234      	movs	r2, #52	; 0x34
 800117a:	2100      	movs	r1, #0
 800117c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800117e:	230f      	movs	r3, #15
 8001180:	18fb      	adds	r3, r7, r3
 8001182:	781b      	ldrb	r3, [r3, #0]
}
 8001184:	0018      	movs	r0, r3
 8001186:	46bd      	mov	sp, r7
 8001188:	b004      	add	sp, #16
 800118a:	bd80      	pop	{r7, pc}
 800118c:	00001001 	.word	0x00001001
 8001190:	40012708 	.word	0x40012708
 8001194:	20000000 	.word	0x20000000
 8001198:	000f4240 	.word	0x000f4240
 800119c:	ff7fffff 	.word	0xff7fffff
 80011a0:	ffbfffff 	.word	0xffbfffff

080011a4 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80011ac:	2300      	movs	r3, #0
 80011ae:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	689b      	ldr	r3, [r3, #8]
 80011ba:	2203      	movs	r2, #3
 80011bc:	4013      	ands	r3, r2
 80011be:	2b01      	cmp	r3, #1
 80011c0:	d112      	bne.n	80011e8 <ADC_Enable+0x44>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	2201      	movs	r2, #1
 80011ca:	4013      	ands	r3, r2
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d009      	beq.n	80011e4 <ADC_Enable+0x40>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68da      	ldr	r2, [r3, #12]
 80011d6:	2380      	movs	r3, #128	; 0x80
 80011d8:	021b      	lsls	r3, r3, #8
 80011da:	401a      	ands	r2, r3
 80011dc:	2380      	movs	r3, #128	; 0x80
 80011de:	021b      	lsls	r3, r3, #8
 80011e0:	429a      	cmp	r2, r3
 80011e2:	d101      	bne.n	80011e8 <ADC_Enable+0x44>
 80011e4:	2301      	movs	r3, #1
 80011e6:	e000      	b.n	80011ea <ADC_Enable+0x46>
 80011e8:	2300      	movs	r3, #0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d152      	bne.n	8001294 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a2a      	ldr	r2, [pc, #168]	; (80012a0 <ADC_Enable+0xfc>)
 80011f6:	4013      	ands	r3, r2
 80011f8:	d00d      	beq.n	8001216 <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011fe:	2210      	movs	r2, #16
 8001200:	431a      	orrs	r2, r3
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800120a:	2201      	movs	r2, #1
 800120c:	431a      	orrs	r2, r3
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8001212:	2301      	movs	r3, #1
 8001214:	e03f      	b.n	8001296 <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	689a      	ldr	r2, [r3, #8]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	2101      	movs	r1, #1
 8001222:	430a      	orrs	r2, r1
 8001224:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8001226:	4b1f      	ldr	r3, [pc, #124]	; (80012a4 <ADC_Enable+0x100>)
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	491f      	ldr	r1, [pc, #124]	; (80012a8 <ADC_Enable+0x104>)
 800122c:	0018      	movs	r0, r3
 800122e:	f7fe ff75 	bl	800011c <__udivsi3>
 8001232:	0003      	movs	r3, r0
 8001234:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001236:	e002      	b.n	800123e <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	3b01      	subs	r3, #1
 800123c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d1f9      	bne.n	8001238 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8001244:	f7ff fcea 	bl	8000c1c <HAL_GetTick>
 8001248:	0003      	movs	r3, r0
 800124a:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800124c:	e01b      	b.n	8001286 <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800124e:	f7ff fce5 	bl	8000c1c <HAL_GetTick>
 8001252:	0002      	movs	r2, r0
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	1ad3      	subs	r3, r2, r3
 8001258:	2b02      	cmp	r3, #2
 800125a:	d914      	bls.n	8001286 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	2201      	movs	r2, #1
 8001264:	4013      	ands	r3, r2
 8001266:	2b01      	cmp	r3, #1
 8001268:	d00d      	beq.n	8001286 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126e:	2210      	movs	r2, #16
 8001270:	431a      	orrs	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800127a:	2201      	movs	r2, #1
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8001282:	2301      	movs	r3, #1
 8001284:	e007      	b.n	8001296 <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	2201      	movs	r2, #1
 800128e:	4013      	ands	r3, r2
 8001290:	2b01      	cmp	r3, #1
 8001292:	d1dc      	bne.n	800124e <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	0018      	movs	r0, r3
 8001298:	46bd      	mov	sp, r7
 800129a:	b004      	add	sp, #16
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	80000017 	.word	0x80000017
 80012a4:	20000000 	.word	0x20000000
 80012a8:	000f4240 	.word	0x000f4240

080012ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012ac:	b590      	push	{r4, r7, lr}
 80012ae:	b083      	sub	sp, #12
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	0002      	movs	r2, r0
 80012b4:	6039      	str	r1, [r7, #0]
 80012b6:	1dfb      	adds	r3, r7, #7
 80012b8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012ba:	1dfb      	adds	r3, r7, #7
 80012bc:	781b      	ldrb	r3, [r3, #0]
 80012be:	2b7f      	cmp	r3, #127	; 0x7f
 80012c0:	d828      	bhi.n	8001314 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80012c2:	4a2f      	ldr	r2, [pc, #188]	; (8001380 <__NVIC_SetPriority+0xd4>)
 80012c4:	1dfb      	adds	r3, r7, #7
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	b25b      	sxtb	r3, r3
 80012ca:	089b      	lsrs	r3, r3, #2
 80012cc:	33c0      	adds	r3, #192	; 0xc0
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	589b      	ldr	r3, [r3, r2]
 80012d2:	1dfa      	adds	r2, r7, #7
 80012d4:	7812      	ldrb	r2, [r2, #0]
 80012d6:	0011      	movs	r1, r2
 80012d8:	2203      	movs	r2, #3
 80012da:	400a      	ands	r2, r1
 80012dc:	00d2      	lsls	r2, r2, #3
 80012de:	21ff      	movs	r1, #255	; 0xff
 80012e0:	4091      	lsls	r1, r2
 80012e2:	000a      	movs	r2, r1
 80012e4:	43d2      	mvns	r2, r2
 80012e6:	401a      	ands	r2, r3
 80012e8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	019b      	lsls	r3, r3, #6
 80012ee:	22ff      	movs	r2, #255	; 0xff
 80012f0:	401a      	ands	r2, r3
 80012f2:	1dfb      	adds	r3, r7, #7
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	0018      	movs	r0, r3
 80012f8:	2303      	movs	r3, #3
 80012fa:	4003      	ands	r3, r0
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001300:	481f      	ldr	r0, [pc, #124]	; (8001380 <__NVIC_SetPriority+0xd4>)
 8001302:	1dfb      	adds	r3, r7, #7
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	b25b      	sxtb	r3, r3
 8001308:	089b      	lsrs	r3, r3, #2
 800130a:	430a      	orrs	r2, r1
 800130c:	33c0      	adds	r3, #192	; 0xc0
 800130e:	009b      	lsls	r3, r3, #2
 8001310:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001312:	e031      	b.n	8001378 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001314:	4a1b      	ldr	r2, [pc, #108]	; (8001384 <__NVIC_SetPriority+0xd8>)
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	0019      	movs	r1, r3
 800131c:	230f      	movs	r3, #15
 800131e:	400b      	ands	r3, r1
 8001320:	3b08      	subs	r3, #8
 8001322:	089b      	lsrs	r3, r3, #2
 8001324:	3306      	adds	r3, #6
 8001326:	009b      	lsls	r3, r3, #2
 8001328:	18d3      	adds	r3, r2, r3
 800132a:	3304      	adds	r3, #4
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	1dfa      	adds	r2, r7, #7
 8001330:	7812      	ldrb	r2, [r2, #0]
 8001332:	0011      	movs	r1, r2
 8001334:	2203      	movs	r2, #3
 8001336:	400a      	ands	r2, r1
 8001338:	00d2      	lsls	r2, r2, #3
 800133a:	21ff      	movs	r1, #255	; 0xff
 800133c:	4091      	lsls	r1, r2
 800133e:	000a      	movs	r2, r1
 8001340:	43d2      	mvns	r2, r2
 8001342:	401a      	ands	r2, r3
 8001344:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	019b      	lsls	r3, r3, #6
 800134a:	22ff      	movs	r2, #255	; 0xff
 800134c:	401a      	ands	r2, r3
 800134e:	1dfb      	adds	r3, r7, #7
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	0018      	movs	r0, r3
 8001354:	2303      	movs	r3, #3
 8001356:	4003      	ands	r3, r0
 8001358:	00db      	lsls	r3, r3, #3
 800135a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800135c:	4809      	ldr	r0, [pc, #36]	; (8001384 <__NVIC_SetPriority+0xd8>)
 800135e:	1dfb      	adds	r3, r7, #7
 8001360:	781b      	ldrb	r3, [r3, #0]
 8001362:	001c      	movs	r4, r3
 8001364:	230f      	movs	r3, #15
 8001366:	4023      	ands	r3, r4
 8001368:	3b08      	subs	r3, #8
 800136a:	089b      	lsrs	r3, r3, #2
 800136c:	430a      	orrs	r2, r1
 800136e:	3306      	adds	r3, #6
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	18c3      	adds	r3, r0, r3
 8001374:	3304      	adds	r3, #4
 8001376:	601a      	str	r2, [r3, #0]
}
 8001378:	46c0      	nop			; (mov r8, r8)
 800137a:	46bd      	mov	sp, r7
 800137c:	b003      	add	sp, #12
 800137e:	bd90      	pop	{r4, r7, pc}
 8001380:	e000e100 	.word	0xe000e100
 8001384:	e000ed00 	.word	0xe000ed00

08001388 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	1e5a      	subs	r2, r3, #1
 8001394:	2380      	movs	r3, #128	; 0x80
 8001396:	045b      	lsls	r3, r3, #17
 8001398:	429a      	cmp	r2, r3
 800139a:	d301      	bcc.n	80013a0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139c:	2301      	movs	r3, #1
 800139e:	e010      	b.n	80013c2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <SysTick_Config+0x44>)
 80013a2:	687a      	ldr	r2, [r7, #4]
 80013a4:	3a01      	subs	r2, #1
 80013a6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013a8:	2301      	movs	r3, #1
 80013aa:	425b      	negs	r3, r3
 80013ac:	2103      	movs	r1, #3
 80013ae:	0018      	movs	r0, r3
 80013b0:	f7ff ff7c 	bl	80012ac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SysTick_Config+0x44>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SysTick_Config+0x44>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	0018      	movs	r0, r3
 80013c4:	46bd      	mov	sp, r7
 80013c6:	b002      	add	sp, #8
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	46c0      	nop			; (mov r8, r8)
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b084      	sub	sp, #16
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60b9      	str	r1, [r7, #8]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	210f      	movs	r1, #15
 80013dc:	187b      	adds	r3, r7, r1
 80013de:	1c02      	adds	r2, r0, #0
 80013e0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80013e2:	68ba      	ldr	r2, [r7, #8]
 80013e4:	187b      	adds	r3, r7, r1
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	b25b      	sxtb	r3, r3
 80013ea:	0011      	movs	r1, r2
 80013ec:	0018      	movs	r0, r3
 80013ee:	f7ff ff5d 	bl	80012ac <__NVIC_SetPriority>
}
 80013f2:	46c0      	nop			; (mov r8, r8)
 80013f4:	46bd      	mov	sp, r7
 80013f6:	b004      	add	sp, #16
 80013f8:	bd80      	pop	{r7, pc}

080013fa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80013fa:	b580      	push	{r7, lr}
 80013fc:	b082      	sub	sp, #8
 80013fe:	af00      	add	r7, sp, #0
 8001400:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	0018      	movs	r0, r3
 8001406:	f7ff ffbf 	bl	8001388 <SysTick_Config>
 800140a:	0003      	movs	r3, r0
}
 800140c:	0018      	movs	r0, r3
 800140e:	46bd      	mov	sp, r7
 8001410:	b002      	add	sp, #8
 8001412:	bd80      	pop	{r7, pc}

08001414 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b086      	sub	sp, #24
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800141e:	2300      	movs	r3, #0
 8001420:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001422:	e14f      	b.n	80016c4 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	2101      	movs	r1, #1
 800142a:	697a      	ldr	r2, [r7, #20]
 800142c:	4091      	lsls	r1, r2
 800142e:	000a      	movs	r2, r1
 8001430:	4013      	ands	r3, r2
 8001432:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d100      	bne.n	800143c <HAL_GPIO_Init+0x28>
 800143a:	e140      	b.n	80016be <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	2203      	movs	r2, #3
 8001442:	4013      	ands	r3, r2
 8001444:	2b01      	cmp	r3, #1
 8001446:	d005      	beq.n	8001454 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	2203      	movs	r2, #3
 800144e:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001450:	2b02      	cmp	r3, #2
 8001452:	d130      	bne.n	80014b6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	005b      	lsls	r3, r3, #1
 800145e:	2203      	movs	r2, #3
 8001460:	409a      	lsls	r2, r3
 8001462:	0013      	movs	r3, r2
 8001464:	43da      	mvns	r2, r3
 8001466:	693b      	ldr	r3, [r7, #16]
 8001468:	4013      	ands	r3, r2
 800146a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800146c:	683b      	ldr	r3, [r7, #0]
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	697b      	ldr	r3, [r7, #20]
 8001472:	005b      	lsls	r3, r3, #1
 8001474:	409a      	lsls	r2, r3
 8001476:	0013      	movs	r3, r2
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	4313      	orrs	r3, r2
 800147c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	693a      	ldr	r2, [r7, #16]
 8001482:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800148a:	2201      	movs	r2, #1
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	409a      	lsls	r2, r3
 8001490:	0013      	movs	r3, r2
 8001492:	43da      	mvns	r2, r3
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	4013      	ands	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	091b      	lsrs	r3, r3, #4
 80014a0:	2201      	movs	r2, #1
 80014a2:	401a      	ands	r2, r3
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	409a      	lsls	r2, r3
 80014a8:	0013      	movs	r3, r2
 80014aa:	693a      	ldr	r2, [r7, #16]
 80014ac:	4313      	orrs	r3, r2
 80014ae:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	693a      	ldr	r2, [r7, #16]
 80014b4:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	2203      	movs	r2, #3
 80014bc:	4013      	ands	r3, r2
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d017      	beq.n	80014f2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	68db      	ldr	r3, [r3, #12]
 80014c6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	2203      	movs	r2, #3
 80014ce:	409a      	lsls	r2, r3
 80014d0:	0013      	movs	r3, r2
 80014d2:	43da      	mvns	r2, r3
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	4013      	ands	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	689a      	ldr	r2, [r3, #8]
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	409a      	lsls	r2, r3
 80014e4:	0013      	movs	r3, r2
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	693a      	ldr	r2, [r7, #16]
 80014f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	685b      	ldr	r3, [r3, #4]
 80014f6:	2203      	movs	r2, #3
 80014f8:	4013      	ands	r3, r2
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	d123      	bne.n	8001546 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80014fe:	697b      	ldr	r3, [r7, #20]
 8001500:	08da      	lsrs	r2, r3, #3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	3208      	adds	r2, #8
 8001506:	0092      	lsls	r2, r2, #2
 8001508:	58d3      	ldr	r3, [r2, r3]
 800150a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	2207      	movs	r2, #7
 8001510:	4013      	ands	r3, r2
 8001512:	009b      	lsls	r3, r3, #2
 8001514:	220f      	movs	r2, #15
 8001516:	409a      	lsls	r2, r3
 8001518:	0013      	movs	r3, r2
 800151a:	43da      	mvns	r2, r3
 800151c:	693b      	ldr	r3, [r7, #16]
 800151e:	4013      	ands	r3, r2
 8001520:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	691a      	ldr	r2, [r3, #16]
 8001526:	697b      	ldr	r3, [r7, #20]
 8001528:	2107      	movs	r1, #7
 800152a:	400b      	ands	r3, r1
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	409a      	lsls	r2, r3
 8001530:	0013      	movs	r3, r2
 8001532:	693a      	ldr	r2, [r7, #16]
 8001534:	4313      	orrs	r3, r2
 8001536:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001538:	697b      	ldr	r3, [r7, #20]
 800153a:	08da      	lsrs	r2, r3, #3
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3208      	adds	r2, #8
 8001540:	0092      	lsls	r2, r2, #2
 8001542:	6939      	ldr	r1, [r7, #16]
 8001544:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	2203      	movs	r2, #3
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	2203      	movs	r2, #3
 8001564:	401a      	ands	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	005b      	lsls	r3, r3, #1
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	23c0      	movs	r3, #192	; 0xc0
 8001580:	029b      	lsls	r3, r3, #10
 8001582:	4013      	ands	r3, r2
 8001584:	d100      	bne.n	8001588 <HAL_GPIO_Init+0x174>
 8001586:	e09a      	b.n	80016be <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001588:	4b54      	ldr	r3, [pc, #336]	; (80016dc <HAL_GPIO_Init+0x2c8>)
 800158a:	699a      	ldr	r2, [r3, #24]
 800158c:	4b53      	ldr	r3, [pc, #332]	; (80016dc <HAL_GPIO_Init+0x2c8>)
 800158e:	2101      	movs	r1, #1
 8001590:	430a      	orrs	r2, r1
 8001592:	619a      	str	r2, [r3, #24]
 8001594:	4b51      	ldr	r3, [pc, #324]	; (80016dc <HAL_GPIO_Init+0x2c8>)
 8001596:	699b      	ldr	r3, [r3, #24]
 8001598:	2201      	movs	r2, #1
 800159a:	4013      	ands	r3, r2
 800159c:	60bb      	str	r3, [r7, #8]
 800159e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015a0:	4a4f      	ldr	r2, [pc, #316]	; (80016e0 <HAL_GPIO_Init+0x2cc>)
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	089b      	lsrs	r3, r3, #2
 80015a6:	3302      	adds	r3, #2
 80015a8:	009b      	lsls	r3, r3, #2
 80015aa:	589b      	ldr	r3, [r3, r2]
 80015ac:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2203      	movs	r2, #3
 80015b2:	4013      	ands	r3, r2
 80015b4:	009b      	lsls	r3, r3, #2
 80015b6:	220f      	movs	r2, #15
 80015b8:	409a      	lsls	r2, r3
 80015ba:	0013      	movs	r3, r2
 80015bc:	43da      	mvns	r2, r3
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	4013      	ands	r3, r2
 80015c2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015c4:	687a      	ldr	r2, [r7, #4]
 80015c6:	2390      	movs	r3, #144	; 0x90
 80015c8:	05db      	lsls	r3, r3, #23
 80015ca:	429a      	cmp	r2, r3
 80015cc:	d013      	beq.n	80015f6 <HAL_GPIO_Init+0x1e2>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4a44      	ldr	r2, [pc, #272]	; (80016e4 <HAL_GPIO_Init+0x2d0>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d00d      	beq.n	80015f2 <HAL_GPIO_Init+0x1de>
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4a43      	ldr	r2, [pc, #268]	; (80016e8 <HAL_GPIO_Init+0x2d4>)
 80015da:	4293      	cmp	r3, r2
 80015dc:	d007      	beq.n	80015ee <HAL_GPIO_Init+0x1da>
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	4a42      	ldr	r2, [pc, #264]	; (80016ec <HAL_GPIO_Init+0x2d8>)
 80015e2:	4293      	cmp	r3, r2
 80015e4:	d101      	bne.n	80015ea <HAL_GPIO_Init+0x1d6>
 80015e6:	2303      	movs	r3, #3
 80015e8:	e006      	b.n	80015f8 <HAL_GPIO_Init+0x1e4>
 80015ea:	2305      	movs	r3, #5
 80015ec:	e004      	b.n	80015f8 <HAL_GPIO_Init+0x1e4>
 80015ee:	2302      	movs	r3, #2
 80015f0:	e002      	b.n	80015f8 <HAL_GPIO_Init+0x1e4>
 80015f2:	2301      	movs	r3, #1
 80015f4:	e000      	b.n	80015f8 <HAL_GPIO_Init+0x1e4>
 80015f6:	2300      	movs	r3, #0
 80015f8:	697a      	ldr	r2, [r7, #20]
 80015fa:	2103      	movs	r1, #3
 80015fc:	400a      	ands	r2, r1
 80015fe:	0092      	lsls	r2, r2, #2
 8001600:	4093      	lsls	r3, r2
 8001602:	693a      	ldr	r2, [r7, #16]
 8001604:	4313      	orrs	r3, r2
 8001606:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001608:	4935      	ldr	r1, [pc, #212]	; (80016e0 <HAL_GPIO_Init+0x2cc>)
 800160a:	697b      	ldr	r3, [r7, #20]
 800160c:	089b      	lsrs	r3, r3, #2
 800160e:	3302      	adds	r3, #2
 8001610:	009b      	lsls	r3, r3, #2
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001616:	4b36      	ldr	r3, [pc, #216]	; (80016f0 <HAL_GPIO_Init+0x2dc>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43da      	mvns	r2, r3
 8001620:	693b      	ldr	r3, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685a      	ldr	r2, [r3, #4]
 800162a:	2380      	movs	r3, #128	; 0x80
 800162c:	025b      	lsls	r3, r3, #9
 800162e:	4013      	ands	r3, r2
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800163a:	4b2d      	ldr	r3, [pc, #180]	; (80016f0 <HAL_GPIO_Init+0x2dc>)
 800163c:	693a      	ldr	r2, [r7, #16]
 800163e:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001640:	4b2b      	ldr	r3, [pc, #172]	; (80016f0 <HAL_GPIO_Init+0x2dc>)
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43da      	mvns	r2, r3
 800164a:	693b      	ldr	r3, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	2380      	movs	r3, #128	; 0x80
 8001656:	029b      	lsls	r3, r3, #10
 8001658:	4013      	ands	r3, r2
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001664:	4b22      	ldr	r3, [pc, #136]	; (80016f0 <HAL_GPIO_Init+0x2dc>)
 8001666:	693a      	ldr	r2, [r7, #16]
 8001668:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800166a:	4b21      	ldr	r3, [pc, #132]	; (80016f0 <HAL_GPIO_Init+0x2dc>)
 800166c:	689b      	ldr	r3, [r3, #8]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43da      	mvns	r2, r3
 8001674:	693b      	ldr	r3, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685a      	ldr	r2, [r3, #4]
 800167e:	2380      	movs	r3, #128	; 0x80
 8001680:	035b      	lsls	r3, r3, #13
 8001682:	4013      	ands	r3, r2
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800168e:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <HAL_GPIO_Init+0x2dc>)
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001694:	4b16      	ldr	r3, [pc, #88]	; (80016f0 <HAL_GPIO_Init+0x2dc>)
 8001696:	68db      	ldr	r3, [r3, #12]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43da      	mvns	r2, r3
 800169e:	693b      	ldr	r3, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685a      	ldr	r2, [r3, #4]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	039b      	lsls	r3, r3, #14
 80016ac:	4013      	ands	r3, r2
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80016b8:	4b0d      	ldr	r3, [pc, #52]	; (80016f0 <HAL_GPIO_Init+0x2dc>)
 80016ba:	693a      	ldr	r2, [r7, #16]
 80016bc:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	3301      	adds	r3, #1
 80016c2:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	681a      	ldr	r2, [r3, #0]
 80016c8:	697b      	ldr	r3, [r7, #20]
 80016ca:	40da      	lsrs	r2, r3
 80016cc:	1e13      	subs	r3, r2, #0
 80016ce:	d000      	beq.n	80016d2 <HAL_GPIO_Init+0x2be>
 80016d0:	e6a8      	b.n	8001424 <HAL_GPIO_Init+0x10>
  } 
}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	46c0      	nop			; (mov r8, r8)
 80016d6:	46bd      	mov	sp, r7
 80016d8:	b006      	add	sp, #24
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010000 	.word	0x40010000
 80016e4:	48000400 	.word	0x48000400
 80016e8:	48000800 	.word	0x48000800
 80016ec:	48000c00 	.word	0x48000c00
 80016f0:	40010400 	.word	0x40010400

080016f4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	0008      	movs	r0, r1
 80016fe:	0011      	movs	r1, r2
 8001700:	1cbb      	adds	r3, r7, #2
 8001702:	1c02      	adds	r2, r0, #0
 8001704:	801a      	strh	r2, [r3, #0]
 8001706:	1c7b      	adds	r3, r7, #1
 8001708:	1c0a      	adds	r2, r1, #0
 800170a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800170c:	1c7b      	adds	r3, r7, #1
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d004      	beq.n	800171e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001714:	1cbb      	adds	r3, r7, #2
 8001716:	881a      	ldrh	r2, [r3, #0]
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800171c:	e003      	b.n	8001726 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800171e:	1cbb      	adds	r3, r7, #2
 8001720:	881a      	ldrh	r2, [r3, #0]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001726:	46c0      	nop			; (mov r8, r8)
 8001728:	46bd      	mov	sp, r7
 800172a:	b002      	add	sp, #8
 800172c:	bd80      	pop	{r7, pc}
	...

08001730 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b088      	sub	sp, #32
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	2b00      	cmp	r3, #0
 800173c:	d101      	bne.n	8001742 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
 8001740:	e301      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	2201      	movs	r2, #1
 8001748:	4013      	ands	r3, r2
 800174a:	d100      	bne.n	800174e <HAL_RCC_OscConfig+0x1e>
 800174c:	e08d      	b.n	800186a <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800174e:	4bc3      	ldr	r3, [pc, #780]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	220c      	movs	r2, #12
 8001754:	4013      	ands	r3, r2
 8001756:	2b04      	cmp	r3, #4
 8001758:	d00e      	beq.n	8001778 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800175a:	4bc0      	ldr	r3, [pc, #768]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800175c:	685b      	ldr	r3, [r3, #4]
 800175e:	220c      	movs	r2, #12
 8001760:	4013      	ands	r3, r2
 8001762:	2b08      	cmp	r3, #8
 8001764:	d116      	bne.n	8001794 <HAL_RCC_OscConfig+0x64>
 8001766:	4bbd      	ldr	r3, [pc, #756]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	2380      	movs	r3, #128	; 0x80
 800176c:	025b      	lsls	r3, r3, #9
 800176e:	401a      	ands	r2, r3
 8001770:	2380      	movs	r3, #128	; 0x80
 8001772:	025b      	lsls	r3, r3, #9
 8001774:	429a      	cmp	r2, r3
 8001776:	d10d      	bne.n	8001794 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001778:	4bb8      	ldr	r3, [pc, #736]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	029b      	lsls	r3, r3, #10
 8001780:	4013      	ands	r3, r2
 8001782:	d100      	bne.n	8001786 <HAL_RCC_OscConfig+0x56>
 8001784:	e070      	b.n	8001868 <HAL_RCC_OscConfig+0x138>
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	2b00      	cmp	r3, #0
 800178c:	d000      	beq.n	8001790 <HAL_RCC_OscConfig+0x60>
 800178e:	e06b      	b.n	8001868 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e2d8      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	685b      	ldr	r3, [r3, #4]
 8001798:	2b01      	cmp	r3, #1
 800179a:	d107      	bne.n	80017ac <HAL_RCC_OscConfig+0x7c>
 800179c:	4baf      	ldr	r3, [pc, #700]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4bae      	ldr	r3, [pc, #696]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017a2:	2180      	movs	r1, #128	; 0x80
 80017a4:	0249      	lsls	r1, r1, #9
 80017a6:	430a      	orrs	r2, r1
 80017a8:	601a      	str	r2, [r3, #0]
 80017aa:	e02f      	b.n	800180c <HAL_RCC_OscConfig+0xdc>
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d10c      	bne.n	80017ce <HAL_RCC_OscConfig+0x9e>
 80017b4:	4ba9      	ldr	r3, [pc, #676]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017b6:	681a      	ldr	r2, [r3, #0]
 80017b8:	4ba8      	ldr	r3, [pc, #672]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017ba:	49a9      	ldr	r1, [pc, #676]	; (8001a60 <HAL_RCC_OscConfig+0x330>)
 80017bc:	400a      	ands	r2, r1
 80017be:	601a      	str	r2, [r3, #0]
 80017c0:	4ba6      	ldr	r3, [pc, #664]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017c2:	681a      	ldr	r2, [r3, #0]
 80017c4:	4ba5      	ldr	r3, [pc, #660]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017c6:	49a7      	ldr	r1, [pc, #668]	; (8001a64 <HAL_RCC_OscConfig+0x334>)
 80017c8:	400a      	ands	r2, r1
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	e01e      	b.n	800180c <HAL_RCC_OscConfig+0xdc>
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	685b      	ldr	r3, [r3, #4]
 80017d2:	2b05      	cmp	r3, #5
 80017d4:	d10e      	bne.n	80017f4 <HAL_RCC_OscConfig+0xc4>
 80017d6:	4ba1      	ldr	r3, [pc, #644]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017d8:	681a      	ldr	r2, [r3, #0]
 80017da:	4ba0      	ldr	r3, [pc, #640]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017dc:	2180      	movs	r1, #128	; 0x80
 80017de:	02c9      	lsls	r1, r1, #11
 80017e0:	430a      	orrs	r2, r1
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	4b9d      	ldr	r3, [pc, #628]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017e6:	681a      	ldr	r2, [r3, #0]
 80017e8:	4b9c      	ldr	r3, [pc, #624]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017ea:	2180      	movs	r1, #128	; 0x80
 80017ec:	0249      	lsls	r1, r1, #9
 80017ee:	430a      	orrs	r2, r1
 80017f0:	601a      	str	r2, [r3, #0]
 80017f2:	e00b      	b.n	800180c <HAL_RCC_OscConfig+0xdc>
 80017f4:	4b99      	ldr	r3, [pc, #612]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017f6:	681a      	ldr	r2, [r3, #0]
 80017f8:	4b98      	ldr	r3, [pc, #608]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80017fa:	4999      	ldr	r1, [pc, #612]	; (8001a60 <HAL_RCC_OscConfig+0x330>)
 80017fc:	400a      	ands	r2, r1
 80017fe:	601a      	str	r2, [r3, #0]
 8001800:	4b96      	ldr	r3, [pc, #600]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	4b95      	ldr	r3, [pc, #596]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001806:	4997      	ldr	r1, [pc, #604]	; (8001a64 <HAL_RCC_OscConfig+0x334>)
 8001808:	400a      	ands	r2, r1
 800180a:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	685b      	ldr	r3, [r3, #4]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d014      	beq.n	800183e <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001814:	f7ff fa02 	bl	8000c1c <HAL_GetTick>
 8001818:	0003      	movs	r3, r0
 800181a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800181c:	e008      	b.n	8001830 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800181e:	f7ff f9fd 	bl	8000c1c <HAL_GetTick>
 8001822:	0002      	movs	r2, r0
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	1ad3      	subs	r3, r2, r3
 8001828:	2b64      	cmp	r3, #100	; 0x64
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e28a      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001830:	4b8a      	ldr	r3, [pc, #552]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001832:	681a      	ldr	r2, [r3, #0]
 8001834:	2380      	movs	r3, #128	; 0x80
 8001836:	029b      	lsls	r3, r3, #10
 8001838:	4013      	ands	r3, r2
 800183a:	d0f0      	beq.n	800181e <HAL_RCC_OscConfig+0xee>
 800183c:	e015      	b.n	800186a <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800183e:	f7ff f9ed 	bl	8000c1c <HAL_GetTick>
 8001842:	0003      	movs	r3, r0
 8001844:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001846:	e008      	b.n	800185a <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001848:	f7ff f9e8 	bl	8000c1c <HAL_GetTick>
 800184c:	0002      	movs	r2, r0
 800184e:	69bb      	ldr	r3, [r7, #24]
 8001850:	1ad3      	subs	r3, r2, r3
 8001852:	2b64      	cmp	r3, #100	; 0x64
 8001854:	d901      	bls.n	800185a <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001856:	2303      	movs	r3, #3
 8001858:	e275      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800185a:	4b80      	ldr	r3, [pc, #512]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	029b      	lsls	r3, r3, #10
 8001862:	4013      	ands	r3, r2
 8001864:	d1f0      	bne.n	8001848 <HAL_RCC_OscConfig+0x118>
 8001866:	e000      	b.n	800186a <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001868:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2202      	movs	r2, #2
 8001870:	4013      	ands	r3, r2
 8001872:	d100      	bne.n	8001876 <HAL_RCC_OscConfig+0x146>
 8001874:	e069      	b.n	800194a <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001876:	4b79      	ldr	r3, [pc, #484]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	220c      	movs	r2, #12
 800187c:	4013      	ands	r3, r2
 800187e:	d00b      	beq.n	8001898 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001880:	4b76      	ldr	r3, [pc, #472]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	220c      	movs	r2, #12
 8001886:	4013      	ands	r3, r2
 8001888:	2b08      	cmp	r3, #8
 800188a:	d11c      	bne.n	80018c6 <HAL_RCC_OscConfig+0x196>
 800188c:	4b73      	ldr	r3, [pc, #460]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800188e:	685a      	ldr	r2, [r3, #4]
 8001890:	2380      	movs	r3, #128	; 0x80
 8001892:	025b      	lsls	r3, r3, #9
 8001894:	4013      	ands	r3, r2
 8001896:	d116      	bne.n	80018c6 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001898:	4b70      	ldr	r3, [pc, #448]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2202      	movs	r2, #2
 800189e:	4013      	ands	r3, r2
 80018a0:	d005      	beq.n	80018ae <HAL_RCC_OscConfig+0x17e>
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	68db      	ldr	r3, [r3, #12]
 80018a6:	2b01      	cmp	r3, #1
 80018a8:	d001      	beq.n	80018ae <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e24b      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018ae:	4b6b      	ldr	r3, [pc, #428]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	22f8      	movs	r2, #248	; 0xf8
 80018b4:	4393      	bics	r3, r2
 80018b6:	0019      	movs	r1, r3
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	00da      	lsls	r2, r3, #3
 80018be:	4b67      	ldr	r3, [pc, #412]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80018c0:	430a      	orrs	r2, r1
 80018c2:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80018c4:	e041      	b.n	800194a <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	68db      	ldr	r3, [r3, #12]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d024      	beq.n	8001918 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018ce:	4b63      	ldr	r3, [pc, #396]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80018d0:	681a      	ldr	r2, [r3, #0]
 80018d2:	4b62      	ldr	r3, [pc, #392]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80018d4:	2101      	movs	r1, #1
 80018d6:	430a      	orrs	r2, r1
 80018d8:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018da:	f7ff f99f 	bl	8000c1c <HAL_GetTick>
 80018de:	0003      	movs	r3, r0
 80018e0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80018e4:	f7ff f99a 	bl	8000c1c <HAL_GetTick>
 80018e8:	0002      	movs	r2, r0
 80018ea:	69bb      	ldr	r3, [r7, #24]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b02      	cmp	r3, #2
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e227      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018f6:	4b59      	ldr	r3, [pc, #356]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	2202      	movs	r2, #2
 80018fc:	4013      	ands	r3, r2
 80018fe:	d0f1      	beq.n	80018e4 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001900:	4b56      	ldr	r3, [pc, #344]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	22f8      	movs	r2, #248	; 0xf8
 8001906:	4393      	bics	r3, r2
 8001908:	0019      	movs	r1, r3
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	691b      	ldr	r3, [r3, #16]
 800190e:	00da      	lsls	r2, r3, #3
 8001910:	4b52      	ldr	r3, [pc, #328]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001912:	430a      	orrs	r2, r1
 8001914:	601a      	str	r2, [r3, #0]
 8001916:	e018      	b.n	800194a <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001918:	4b50      	ldr	r3, [pc, #320]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800191a:	681a      	ldr	r2, [r3, #0]
 800191c:	4b4f      	ldr	r3, [pc, #316]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800191e:	2101      	movs	r1, #1
 8001920:	438a      	bics	r2, r1
 8001922:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001924:	f7ff f97a 	bl	8000c1c <HAL_GetTick>
 8001928:	0003      	movs	r3, r0
 800192a:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800192c:	e008      	b.n	8001940 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800192e:	f7ff f975 	bl	8000c1c <HAL_GetTick>
 8001932:	0002      	movs	r2, r0
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	1ad3      	subs	r3, r2, r3
 8001938:	2b02      	cmp	r3, #2
 800193a:	d901      	bls.n	8001940 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 800193c:	2303      	movs	r3, #3
 800193e:	e202      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001940:	4b46      	ldr	r3, [pc, #280]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	2202      	movs	r2, #2
 8001946:	4013      	ands	r3, r2
 8001948:	d1f1      	bne.n	800192e <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2208      	movs	r2, #8
 8001950:	4013      	ands	r3, r2
 8001952:	d036      	beq.n	80019c2 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	69db      	ldr	r3, [r3, #28]
 8001958:	2b00      	cmp	r3, #0
 800195a:	d019      	beq.n	8001990 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800195c:	4b3f      	ldr	r3, [pc, #252]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 800195e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001960:	4b3e      	ldr	r3, [pc, #248]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001962:	2101      	movs	r1, #1
 8001964:	430a      	orrs	r2, r1
 8001966:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001968:	f7ff f958 	bl	8000c1c <HAL_GetTick>
 800196c:	0003      	movs	r3, r0
 800196e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001970:	e008      	b.n	8001984 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001972:	f7ff f953 	bl	8000c1c <HAL_GetTick>
 8001976:	0002      	movs	r2, r0
 8001978:	69bb      	ldr	r3, [r7, #24]
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	2b02      	cmp	r3, #2
 800197e:	d901      	bls.n	8001984 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e1e0      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001984:	4b35      	ldr	r3, [pc, #212]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001988:	2202      	movs	r2, #2
 800198a:	4013      	ands	r3, r2
 800198c:	d0f1      	beq.n	8001972 <HAL_RCC_OscConfig+0x242>
 800198e:	e018      	b.n	80019c2 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001990:	4b32      	ldr	r3, [pc, #200]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001992:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001994:	4b31      	ldr	r3, [pc, #196]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001996:	2101      	movs	r1, #1
 8001998:	438a      	bics	r2, r1
 800199a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199c:	f7ff f93e 	bl	8000c1c <HAL_GetTick>
 80019a0:	0003      	movs	r3, r0
 80019a2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019a4:	e008      	b.n	80019b8 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019a6:	f7ff f939 	bl	8000c1c <HAL_GetTick>
 80019aa:	0002      	movs	r2, r0
 80019ac:	69bb      	ldr	r3, [r7, #24]
 80019ae:	1ad3      	subs	r3, r2, r3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d901      	bls.n	80019b8 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80019b4:	2303      	movs	r3, #3
 80019b6:	e1c6      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019b8:	4b28      	ldr	r3, [pc, #160]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80019ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019bc:	2202      	movs	r2, #2
 80019be:	4013      	ands	r3, r2
 80019c0:	d1f1      	bne.n	80019a6 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	2204      	movs	r2, #4
 80019c8:	4013      	ands	r3, r2
 80019ca:	d100      	bne.n	80019ce <HAL_RCC_OscConfig+0x29e>
 80019cc:	e0b4      	b.n	8001b38 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ce:	201f      	movs	r0, #31
 80019d0:	183b      	adds	r3, r7, r0
 80019d2:	2200      	movs	r2, #0
 80019d4:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80019d6:	4b21      	ldr	r3, [pc, #132]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80019d8:	69da      	ldr	r2, [r3, #28]
 80019da:	2380      	movs	r3, #128	; 0x80
 80019dc:	055b      	lsls	r3, r3, #21
 80019de:	4013      	ands	r3, r2
 80019e0:	d110      	bne.n	8001a04 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019e2:	4b1e      	ldr	r3, [pc, #120]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80019e4:	69da      	ldr	r2, [r3, #28]
 80019e6:	4b1d      	ldr	r3, [pc, #116]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80019e8:	2180      	movs	r1, #128	; 0x80
 80019ea:	0549      	lsls	r1, r1, #21
 80019ec:	430a      	orrs	r2, r1
 80019ee:	61da      	str	r2, [r3, #28]
 80019f0:	4b1a      	ldr	r3, [pc, #104]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 80019f2:	69da      	ldr	r2, [r3, #28]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	055b      	lsls	r3, r3, #21
 80019f8:	4013      	ands	r3, r2
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80019fe:	183b      	adds	r3, r7, r0
 8001a00:	2201      	movs	r2, #1
 8001a02:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a04:	4b18      	ldr	r3, [pc, #96]	; (8001a68 <HAL_RCC_OscConfig+0x338>)
 8001a06:	681a      	ldr	r2, [r3, #0]
 8001a08:	2380      	movs	r3, #128	; 0x80
 8001a0a:	005b      	lsls	r3, r3, #1
 8001a0c:	4013      	ands	r3, r2
 8001a0e:	d11a      	bne.n	8001a46 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a10:	4b15      	ldr	r3, [pc, #84]	; (8001a68 <HAL_RCC_OscConfig+0x338>)
 8001a12:	681a      	ldr	r2, [r3, #0]
 8001a14:	4b14      	ldr	r3, [pc, #80]	; (8001a68 <HAL_RCC_OscConfig+0x338>)
 8001a16:	2180      	movs	r1, #128	; 0x80
 8001a18:	0049      	lsls	r1, r1, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a1e:	f7ff f8fd 	bl	8000c1c <HAL_GetTick>
 8001a22:	0003      	movs	r3, r0
 8001a24:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a26:	e008      	b.n	8001a3a <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a28:	f7ff f8f8 	bl	8000c1c <HAL_GetTick>
 8001a2c:	0002      	movs	r2, r0
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	1ad3      	subs	r3, r2, r3
 8001a32:	2b64      	cmp	r3, #100	; 0x64
 8001a34:	d901      	bls.n	8001a3a <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001a36:	2303      	movs	r3, #3
 8001a38:	e185      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a3a:	4b0b      	ldr	r3, [pc, #44]	; (8001a68 <HAL_RCC_OscConfig+0x338>)
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	2380      	movs	r3, #128	; 0x80
 8001a40:	005b      	lsls	r3, r3, #1
 8001a42:	4013      	ands	r3, r2
 8001a44:	d0f0      	beq.n	8001a28 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	689b      	ldr	r3, [r3, #8]
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d10e      	bne.n	8001a6c <HAL_RCC_OscConfig+0x33c>
 8001a4e:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001a50:	6a1a      	ldr	r2, [r3, #32]
 8001a52:	4b02      	ldr	r3, [pc, #8]	; (8001a5c <HAL_RCC_OscConfig+0x32c>)
 8001a54:	2101      	movs	r1, #1
 8001a56:	430a      	orrs	r2, r1
 8001a58:	621a      	str	r2, [r3, #32]
 8001a5a:	e035      	b.n	8001ac8 <HAL_RCC_OscConfig+0x398>
 8001a5c:	40021000 	.word	0x40021000
 8001a60:	fffeffff 	.word	0xfffeffff
 8001a64:	fffbffff 	.word	0xfffbffff
 8001a68:	40007000 	.word	0x40007000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10c      	bne.n	8001a8e <HAL_RCC_OscConfig+0x35e>
 8001a74:	4bb6      	ldr	r3, [pc, #728]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a76:	6a1a      	ldr	r2, [r3, #32]
 8001a78:	4bb5      	ldr	r3, [pc, #724]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a7a:	2101      	movs	r1, #1
 8001a7c:	438a      	bics	r2, r1
 8001a7e:	621a      	str	r2, [r3, #32]
 8001a80:	4bb3      	ldr	r3, [pc, #716]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a82:	6a1a      	ldr	r2, [r3, #32]
 8001a84:	4bb2      	ldr	r3, [pc, #712]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a86:	2104      	movs	r1, #4
 8001a88:	438a      	bics	r2, r1
 8001a8a:	621a      	str	r2, [r3, #32]
 8001a8c:	e01c      	b.n	8001ac8 <HAL_RCC_OscConfig+0x398>
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	2b05      	cmp	r3, #5
 8001a94:	d10c      	bne.n	8001ab0 <HAL_RCC_OscConfig+0x380>
 8001a96:	4bae      	ldr	r3, [pc, #696]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a98:	6a1a      	ldr	r2, [r3, #32]
 8001a9a:	4bad      	ldr	r3, [pc, #692]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001a9c:	2104      	movs	r1, #4
 8001a9e:	430a      	orrs	r2, r1
 8001aa0:	621a      	str	r2, [r3, #32]
 8001aa2:	4bab      	ldr	r3, [pc, #684]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001aa4:	6a1a      	ldr	r2, [r3, #32]
 8001aa6:	4baa      	ldr	r3, [pc, #680]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	621a      	str	r2, [r3, #32]
 8001aae:	e00b      	b.n	8001ac8 <HAL_RCC_OscConfig+0x398>
 8001ab0:	4ba7      	ldr	r3, [pc, #668]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001ab2:	6a1a      	ldr	r2, [r3, #32]
 8001ab4:	4ba6      	ldr	r3, [pc, #664]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	438a      	bics	r2, r1
 8001aba:	621a      	str	r2, [r3, #32]
 8001abc:	4ba4      	ldr	r3, [pc, #656]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001abe:	6a1a      	ldr	r2, [r3, #32]
 8001ac0:	4ba3      	ldr	r3, [pc, #652]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001ac2:	2104      	movs	r1, #4
 8001ac4:	438a      	bics	r2, r1
 8001ac6:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	689b      	ldr	r3, [r3, #8]
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d014      	beq.n	8001afa <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ad0:	f7ff f8a4 	bl	8000c1c <HAL_GetTick>
 8001ad4:	0003      	movs	r3, r0
 8001ad6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001ada:	f7ff f89f 	bl	8000c1c <HAL_GetTick>
 8001ade:	0002      	movs	r2, r0
 8001ae0:	69bb      	ldr	r3, [r7, #24]
 8001ae2:	1ad3      	subs	r3, r2, r3
 8001ae4:	4a9b      	ldr	r2, [pc, #620]	; (8001d54 <HAL_RCC_OscConfig+0x624>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e12b      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001aee:	4b98      	ldr	r3, [pc, #608]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001af0:	6a1b      	ldr	r3, [r3, #32]
 8001af2:	2202      	movs	r2, #2
 8001af4:	4013      	ands	r3, r2
 8001af6:	d0f0      	beq.n	8001ada <HAL_RCC_OscConfig+0x3aa>
 8001af8:	e013      	b.n	8001b22 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001afa:	f7ff f88f 	bl	8000c1c <HAL_GetTick>
 8001afe:	0003      	movs	r3, r0
 8001b00:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b02:	e009      	b.n	8001b18 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001b04:	f7ff f88a 	bl	8000c1c <HAL_GetTick>
 8001b08:	0002      	movs	r2, r0
 8001b0a:	69bb      	ldr	r3, [r7, #24]
 8001b0c:	1ad3      	subs	r3, r2, r3
 8001b0e:	4a91      	ldr	r2, [pc, #580]	; (8001d54 <HAL_RCC_OscConfig+0x624>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e116      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b18:	4b8d      	ldr	r3, [pc, #564]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b1a:	6a1b      	ldr	r3, [r3, #32]
 8001b1c:	2202      	movs	r2, #2
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d1f0      	bne.n	8001b04 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001b22:	231f      	movs	r3, #31
 8001b24:	18fb      	adds	r3, r7, r3
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b88      	ldr	r3, [pc, #544]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b2e:	69da      	ldr	r2, [r3, #28]
 8001b30:	4b87      	ldr	r3, [pc, #540]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b32:	4989      	ldr	r1, [pc, #548]	; (8001d58 <HAL_RCC_OscConfig+0x628>)
 8001b34:	400a      	ands	r2, r1
 8001b36:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	2210      	movs	r2, #16
 8001b3e:	4013      	ands	r3, r2
 8001b40:	d063      	beq.n	8001c0a <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	695b      	ldr	r3, [r3, #20]
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d12a      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001b4a:	4b81      	ldr	r3, [pc, #516]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b4e:	4b80      	ldr	r3, [pc, #512]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b50:	2104      	movs	r1, #4
 8001b52:	430a      	orrs	r2, r1
 8001b54:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001b56:	4b7e      	ldr	r3, [pc, #504]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001b5a:	4b7d      	ldr	r3, [pc, #500]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b5c:	2101      	movs	r1, #1
 8001b5e:	430a      	orrs	r2, r1
 8001b60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b62:	f7ff f85b 	bl	8000c1c <HAL_GetTick>
 8001b66:	0003      	movs	r3, r0
 8001b68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001b6c:	f7ff f856 	bl	8000c1c <HAL_GetTick>
 8001b70:	0002      	movs	r2, r0
 8001b72:	69bb      	ldr	r3, [r7, #24]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b02      	cmp	r3, #2
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e0e3      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8001b7e:	4b74      	ldr	r3, [pc, #464]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b82:	2202      	movs	r2, #2
 8001b84:	4013      	ands	r3, r2
 8001b86:	d0f1      	beq.n	8001b6c <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001b88:	4b71      	ldr	r3, [pc, #452]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b8c:	22f8      	movs	r2, #248	; 0xf8
 8001b8e:	4393      	bics	r3, r2
 8001b90:	0019      	movs	r1, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	699b      	ldr	r3, [r3, #24]
 8001b96:	00da      	lsls	r2, r3, #3
 8001b98:	4b6d      	ldr	r3, [pc, #436]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001b9a:	430a      	orrs	r2, r1
 8001b9c:	635a      	str	r2, [r3, #52]	; 0x34
 8001b9e:	e034      	b.n	8001c0a <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	695b      	ldr	r3, [r3, #20]
 8001ba4:	3305      	adds	r3, #5
 8001ba6:	d111      	bne.n	8001bcc <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8001ba8:	4b69      	ldr	r3, [pc, #420]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001baa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bac:	4b68      	ldr	r3, [pc, #416]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bae:	2104      	movs	r1, #4
 8001bb0:	438a      	bics	r2, r1
 8001bb2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8001bb4:	4b66      	ldr	r3, [pc, #408]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bb8:	22f8      	movs	r2, #248	; 0xf8
 8001bba:	4393      	bics	r3, r2
 8001bbc:	0019      	movs	r1, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	699b      	ldr	r3, [r3, #24]
 8001bc2:	00da      	lsls	r2, r3, #3
 8001bc4:	4b62      	ldr	r3, [pc, #392]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bc6:	430a      	orrs	r2, r1
 8001bc8:	635a      	str	r2, [r3, #52]	; 0x34
 8001bca:	e01e      	b.n	8001c0a <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001bcc:	4b60      	ldr	r3, [pc, #384]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bd0:	4b5f      	ldr	r3, [pc, #380]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bd2:	2104      	movs	r1, #4
 8001bd4:	430a      	orrs	r2, r1
 8001bd6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001bd8:	4b5d      	ldr	r3, [pc, #372]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bdc:	4b5c      	ldr	r3, [pc, #368]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001bde:	2101      	movs	r1, #1
 8001be0:	438a      	bics	r2, r1
 8001be2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be4:	f7ff f81a 	bl	8000c1c <HAL_GetTick>
 8001be8:	0003      	movs	r3, r0
 8001bea:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001bee:	f7ff f815 	bl	8000c1c <HAL_GetTick>
 8001bf2:	0002      	movs	r2, r0
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e0a2      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001c00:	4b53      	ldr	r3, [pc, #332]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c04:	2202      	movs	r2, #2
 8001c06:	4013      	ands	r3, r2
 8001c08:	d1f1      	bne.n	8001bee <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	6a1b      	ldr	r3, [r3, #32]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d100      	bne.n	8001c14 <HAL_RCC_OscConfig+0x4e4>
 8001c12:	e097      	b.n	8001d44 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001c14:	4b4e      	ldr	r3, [pc, #312]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	220c      	movs	r2, #12
 8001c1a:	4013      	ands	r3, r2
 8001c1c:	2b08      	cmp	r3, #8
 8001c1e:	d100      	bne.n	8001c22 <HAL_RCC_OscConfig+0x4f2>
 8001c20:	e06b      	b.n	8001cfa <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6a1b      	ldr	r3, [r3, #32]
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d14c      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c2a:	4b49      	ldr	r3, [pc, #292]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	4b48      	ldr	r3, [pc, #288]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c30:	494a      	ldr	r1, [pc, #296]	; (8001d5c <HAL_RCC_OscConfig+0x62c>)
 8001c32:	400a      	ands	r2, r1
 8001c34:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c36:	f7fe fff1 	bl	8000c1c <HAL_GetTick>
 8001c3a:	0003      	movs	r3, r0
 8001c3c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c3e:	e008      	b.n	8001c52 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c40:	f7fe ffec 	bl	8000c1c <HAL_GetTick>
 8001c44:	0002      	movs	r2, r0
 8001c46:	69bb      	ldr	r3, [r7, #24]
 8001c48:	1ad3      	subs	r3, r2, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d901      	bls.n	8001c52 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001c4e:	2303      	movs	r3, #3
 8001c50:	e079      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c52:	4b3f      	ldr	r3, [pc, #252]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c54:	681a      	ldr	r2, [r3, #0]
 8001c56:	2380      	movs	r3, #128	; 0x80
 8001c58:	049b      	lsls	r3, r3, #18
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	d1f0      	bne.n	8001c40 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c5e:	4b3c      	ldr	r3, [pc, #240]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c62:	220f      	movs	r2, #15
 8001c64:	4393      	bics	r3, r2
 8001c66:	0019      	movs	r1, r3
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c6c:	4b38      	ldr	r3, [pc, #224]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c6e:	430a      	orrs	r2, r1
 8001c70:	62da      	str	r2, [r3, #44]	; 0x2c
 8001c72:	4b37      	ldr	r3, [pc, #220]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	4a3a      	ldr	r2, [pc, #232]	; (8001d60 <HAL_RCC_OscConfig+0x630>)
 8001c78:	4013      	ands	r3, r2
 8001c7a:	0019      	movs	r1, r3
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c84:	431a      	orrs	r2, r3
 8001c86:	4b32      	ldr	r3, [pc, #200]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c88:	430a      	orrs	r2, r1
 8001c8a:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001c8c:	4b30      	ldr	r3, [pc, #192]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	4b2f      	ldr	r3, [pc, #188]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001c92:	2180      	movs	r1, #128	; 0x80
 8001c94:	0449      	lsls	r1, r1, #17
 8001c96:	430a      	orrs	r2, r1
 8001c98:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7fe ffbf 	bl	8000c1c <HAL_GetTick>
 8001c9e:	0003      	movs	r3, r0
 8001ca0:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe ffba 	bl	8000c1c <HAL_GetTick>
 8001ca8:	0002      	movs	r2, r0
 8001caa:	69bb      	ldr	r3, [r7, #24]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e047      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001cb6:	4b26      	ldr	r3, [pc, #152]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	2380      	movs	r3, #128	; 0x80
 8001cbc:	049b      	lsls	r3, r3, #18
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x574>
 8001cc2:	e03f      	b.n	8001d44 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cc4:	4b22      	ldr	r3, [pc, #136]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4b21      	ldr	r3, [pc, #132]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001cca:	4924      	ldr	r1, [pc, #144]	; (8001d5c <HAL_RCC_OscConfig+0x62c>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cd0:	f7fe ffa4 	bl	8000c1c <HAL_GetTick>
 8001cd4:	0003      	movs	r3, r0
 8001cd6:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cd8:	e008      	b.n	8001cec <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cda:	f7fe ff9f 	bl	8000c1c <HAL_GetTick>
 8001cde:	0002      	movs	r2, r0
 8001ce0:	69bb      	ldr	r3, [r7, #24]
 8001ce2:	1ad3      	subs	r3, r2, r3
 8001ce4:	2b02      	cmp	r3, #2
 8001ce6:	d901      	bls.n	8001cec <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001ce8:	2303      	movs	r3, #3
 8001cea:	e02c      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cec:	4b18      	ldr	r3, [pc, #96]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001cee:	681a      	ldr	r2, [r3, #0]
 8001cf0:	2380      	movs	r3, #128	; 0x80
 8001cf2:	049b      	lsls	r3, r3, #18
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d1f0      	bne.n	8001cda <HAL_RCC_OscConfig+0x5aa>
 8001cf8:	e024      	b.n	8001d44 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a1b      	ldr	r3, [r3, #32]
 8001cfe:	2b01      	cmp	r3, #1
 8001d00:	d101      	bne.n	8001d06 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001d02:	2301      	movs	r3, #1
 8001d04:	e01f      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001d06:	4b12      	ldr	r3, [pc, #72]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001d0c:	4b10      	ldr	r3, [pc, #64]	; (8001d50 <HAL_RCC_OscConfig+0x620>)
 8001d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d10:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d12:	697a      	ldr	r2, [r7, #20]
 8001d14:	2380      	movs	r3, #128	; 0x80
 8001d16:	025b      	lsls	r3, r3, #9
 8001d18:	401a      	ands	r2, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	d10e      	bne.n	8001d40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	220f      	movs	r2, #15
 8001d26:	401a      	ands	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d2c:	429a      	cmp	r2, r3
 8001d2e:	d107      	bne.n	8001d40 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001d30:	697a      	ldr	r2, [r7, #20]
 8001d32:	23f0      	movs	r3, #240	; 0xf0
 8001d34:	039b      	lsls	r3, r3, #14
 8001d36:	401a      	ands	r2, r3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001d3c:	429a      	cmp	r2, r3
 8001d3e:	d001      	beq.n	8001d44 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001d40:	2301      	movs	r3, #1
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001d44:	2300      	movs	r3, #0
}
 8001d46:	0018      	movs	r0, r3
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	b008      	add	sp, #32
 8001d4c:	bd80      	pop	{r7, pc}
 8001d4e:	46c0      	nop			; (mov r8, r8)
 8001d50:	40021000 	.word	0x40021000
 8001d54:	00001388 	.word	0x00001388
 8001d58:	efffffff 	.word	0xefffffff
 8001d5c:	feffffff 	.word	0xfeffffff
 8001d60:	ffc2ffff 	.word	0xffc2ffff

08001d64 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d64:	b580      	push	{r7, lr}
 8001d66:	b084      	sub	sp, #16
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d101      	bne.n	8001d78 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e0b3      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d78:	4b5b      	ldr	r3, [pc, #364]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	4013      	ands	r3, r2
 8001d80:	683a      	ldr	r2, [r7, #0]
 8001d82:	429a      	cmp	r2, r3
 8001d84:	d911      	bls.n	8001daa <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d86:	4b58      	ldr	r3, [pc, #352]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4393      	bics	r3, r2
 8001d8e:	0019      	movs	r1, r3
 8001d90:	4b55      	ldr	r3, [pc, #340]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001d92:	683a      	ldr	r2, [r7, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d98:	4b53      	ldr	r3, [pc, #332]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	4013      	ands	r3, r2
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e09a      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2202      	movs	r2, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d015      	beq.n	8001de0 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2204      	movs	r2, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d006      	beq.n	8001dcc <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001dbe:	4b4b      	ldr	r3, [pc, #300]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	4b4a      	ldr	r3, [pc, #296]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001dc4:	21e0      	movs	r1, #224	; 0xe0
 8001dc6:	00c9      	lsls	r1, r1, #3
 8001dc8:	430a      	orrs	r2, r1
 8001dca:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dcc:	4b47      	ldr	r3, [pc, #284]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	22f0      	movs	r2, #240	; 0xf0
 8001dd2:	4393      	bics	r3, r2
 8001dd4:	0019      	movs	r1, r3
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	689a      	ldr	r2, [r3, #8]
 8001dda:	4b44      	ldr	r3, [pc, #272]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2201      	movs	r2, #1
 8001de6:	4013      	ands	r3, r2
 8001de8:	d040      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	2b01      	cmp	r3, #1
 8001df0:	d107      	bne.n	8001e02 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001df2:	4b3e      	ldr	r3, [pc, #248]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	2380      	movs	r3, #128	; 0x80
 8001df8:	029b      	lsls	r3, r3, #10
 8001dfa:	4013      	ands	r3, r2
 8001dfc:	d114      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001dfe:	2301      	movs	r3, #1
 8001e00:	e06e      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	685b      	ldr	r3, [r3, #4]
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d107      	bne.n	8001e1a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e0a:	4b38      	ldr	r3, [pc, #224]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001e0c:	681a      	ldr	r2, [r3, #0]
 8001e0e:	2380      	movs	r3, #128	; 0x80
 8001e10:	049b      	lsls	r3, r3, #18
 8001e12:	4013      	ands	r3, r2
 8001e14:	d108      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e062      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e1a:	4b34      	ldr	r3, [pc, #208]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2202      	movs	r2, #2
 8001e20:	4013      	ands	r3, r2
 8001e22:	d101      	bne.n	8001e28 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001e24:	2301      	movs	r3, #1
 8001e26:	e05b      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e28:	4b30      	ldr	r3, [pc, #192]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001e2a:	685b      	ldr	r3, [r3, #4]
 8001e2c:	2203      	movs	r2, #3
 8001e2e:	4393      	bics	r3, r2
 8001e30:	0019      	movs	r1, r3
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685a      	ldr	r2, [r3, #4]
 8001e36:	4b2d      	ldr	r3, [pc, #180]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001e38:	430a      	orrs	r2, r1
 8001e3a:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e3c:	f7fe feee 	bl	8000c1c <HAL_GetTick>
 8001e40:	0003      	movs	r3, r0
 8001e42:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e44:	e009      	b.n	8001e5a <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e46:	f7fe fee9 	bl	8000c1c <HAL_GetTick>
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	1ad3      	subs	r3, r2, r3
 8001e50:	4a27      	ldr	r2, [pc, #156]	; (8001ef0 <HAL_RCC_ClockConfig+0x18c>)
 8001e52:	4293      	cmp	r3, r2
 8001e54:	d901      	bls.n	8001e5a <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001e56:	2303      	movs	r3, #3
 8001e58:	e042      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e5a:	4b24      	ldr	r3, [pc, #144]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	220c      	movs	r2, #12
 8001e60:	401a      	ands	r2, r3
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	009b      	lsls	r3, r3, #2
 8001e68:	429a      	cmp	r2, r3
 8001e6a:	d1ec      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e6c:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	2201      	movs	r2, #1
 8001e72:	4013      	ands	r3, r2
 8001e74:	683a      	ldr	r2, [r7, #0]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d211      	bcs.n	8001e9e <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e7a:	4b1b      	ldr	r3, [pc, #108]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	4393      	bics	r3, r2
 8001e82:	0019      	movs	r1, r3
 8001e84:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e8c:	4b16      	ldr	r3, [pc, #88]	; (8001ee8 <HAL_RCC_ClockConfig+0x184>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2201      	movs	r2, #1
 8001e92:	4013      	ands	r3, r2
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d001      	beq.n	8001e9e <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	e020      	b.n	8001ee0 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	2204      	movs	r2, #4
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	d009      	beq.n	8001ebc <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea8:	4b10      	ldr	r3, [pc, #64]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a11      	ldr	r2, [pc, #68]	; (8001ef4 <HAL_RCC_ClockConfig+0x190>)
 8001eae:	4013      	ands	r3, r2
 8001eb0:	0019      	movs	r1, r3
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	68da      	ldr	r2, [r3, #12]
 8001eb6:	4b0d      	ldr	r3, [pc, #52]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001eb8:	430a      	orrs	r2, r1
 8001eba:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ebc:	f000 f820 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001ec0:	0001      	movs	r1, r0
 8001ec2:	4b0a      	ldr	r3, [pc, #40]	; (8001eec <HAL_RCC_ClockConfig+0x188>)
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	091b      	lsrs	r3, r3, #4
 8001ec8:	220f      	movs	r2, #15
 8001eca:	4013      	ands	r3, r2
 8001ecc:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <HAL_RCC_ClockConfig+0x194>)
 8001ece:	5cd3      	ldrb	r3, [r2, r3]
 8001ed0:	000a      	movs	r2, r1
 8001ed2:	40da      	lsrs	r2, r3
 8001ed4:	4b09      	ldr	r3, [pc, #36]	; (8001efc <HAL_RCC_ClockConfig+0x198>)
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001ed8:	2003      	movs	r0, #3
 8001eda:	f7fe fe59 	bl	8000b90 <HAL_InitTick>
  
  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	0018      	movs	r0, r3
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	b004      	add	sp, #16
 8001ee6:	bd80      	pop	{r7, pc}
 8001ee8:	40022000 	.word	0x40022000
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	00001388 	.word	0x00001388
 8001ef4:	fffff8ff 	.word	0xfffff8ff
 8001ef8:	0800295c 	.word	0x0800295c
 8001efc:	20000000 	.word	0x20000000

08001f00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b08f      	sub	sp, #60	; 0x3c
 8001f04:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001f06:	2314      	movs	r3, #20
 8001f08:	18fb      	adds	r3, r7, r3
 8001f0a:	4a2b      	ldr	r2, [pc, #172]	; (8001fb8 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001f0c:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f0e:	c313      	stmia	r3!, {r0, r1, r4}
 8001f10:	6812      	ldr	r2, [r2, #0]
 8001f12:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001f14:	1d3b      	adds	r3, r7, #4
 8001f16:	4a29      	ldr	r2, [pc, #164]	; (8001fbc <HAL_RCC_GetSysClockFreq+0xbc>)
 8001f18:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001f1a:	c313      	stmia	r3!, {r0, r1, r4}
 8001f1c:	6812      	ldr	r2, [r2, #0]
 8001f1e:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001f20:	2300      	movs	r3, #0
 8001f22:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001f24:	2300      	movs	r3, #0
 8001f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f28:	2300      	movs	r3, #0
 8001f2a:	637b      	str	r3, [r7, #52]	; 0x34
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001f30:	2300      	movs	r3, #0
 8001f32:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001f34:	4b22      	ldr	r3, [pc, #136]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001f3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f3c:	220c      	movs	r2, #12
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b04      	cmp	r3, #4
 8001f42:	d002      	beq.n	8001f4a <HAL_RCC_GetSysClockFreq+0x4a>
 8001f44:	2b08      	cmp	r3, #8
 8001f46:	d003      	beq.n	8001f50 <HAL_RCC_GetSysClockFreq+0x50>
 8001f48:	e02d      	b.n	8001fa6 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001f4a:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f4c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001f4e:	e02d      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001f52:	0c9b      	lsrs	r3, r3, #18
 8001f54:	220f      	movs	r2, #15
 8001f56:	4013      	ands	r3, r2
 8001f58:	2214      	movs	r2, #20
 8001f5a:	18ba      	adds	r2, r7, r2
 8001f5c:	5cd3      	ldrb	r3, [r2, r3]
 8001f5e:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001f60:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f64:	220f      	movs	r2, #15
 8001f66:	4013      	ands	r3, r2
 8001f68:	1d3a      	adds	r2, r7, #4
 8001f6a:	5cd3      	ldrb	r3, [r2, r3]
 8001f6c:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001f6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001f70:	2380      	movs	r3, #128	; 0x80
 8001f72:	025b      	lsls	r3, r3, #9
 8001f74:	4013      	ands	r3, r2
 8001f76:	d009      	beq.n	8001f8c <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001f78:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001f7a:	4812      	ldr	r0, [pc, #72]	; (8001fc4 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001f7c:	f7fe f8ce 	bl	800011c <__udivsi3>
 8001f80:	0003      	movs	r3, r0
 8001f82:	001a      	movs	r2, r3
 8001f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f86:	4353      	muls	r3, r2
 8001f88:	637b      	str	r3, [r7, #52]	; 0x34
 8001f8a:	e009      	b.n	8001fa0 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001f8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001f8e:	000a      	movs	r2, r1
 8001f90:	0152      	lsls	r2, r2, #5
 8001f92:	1a52      	subs	r2, r2, r1
 8001f94:	0193      	lsls	r3, r2, #6
 8001f96:	1a9b      	subs	r3, r3, r2
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	185b      	adds	r3, r3, r1
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001fa0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001fa2:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001fa4:	e002      	b.n	8001fac <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001fa6:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001fa8:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001faa:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001fae:	0018      	movs	r0, r3
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	b00f      	add	sp, #60	; 0x3c
 8001fb4:	bd90      	pop	{r4, r7, pc}
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	0800293c 	.word	0x0800293c
 8001fbc:	0800294c 	.word	0x0800294c
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	00f42400 	.word	0x00f42400
 8001fc8:	007a1200 	.word	0x007a1200

08001fcc <__errno>:
 8001fcc:	4b01      	ldr	r3, [pc, #4]	; (8001fd4 <__errno+0x8>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	4770      	bx	lr
 8001fd2:	46c0      	nop			; (mov r8, r8)
 8001fd4:	2000000c 	.word	0x2000000c

08001fd8 <__libc_init_array>:
 8001fd8:	b570      	push	{r4, r5, r6, lr}
 8001fda:	2600      	movs	r6, #0
 8001fdc:	4d0c      	ldr	r5, [pc, #48]	; (8002010 <__libc_init_array+0x38>)
 8001fde:	4c0d      	ldr	r4, [pc, #52]	; (8002014 <__libc_init_array+0x3c>)
 8001fe0:	1b64      	subs	r4, r4, r5
 8001fe2:	10a4      	asrs	r4, r4, #2
 8001fe4:	42a6      	cmp	r6, r4
 8001fe6:	d109      	bne.n	8001ffc <__libc_init_array+0x24>
 8001fe8:	2600      	movs	r6, #0
 8001fea:	f000 fc8b 	bl	8002904 <_init>
 8001fee:	4d0a      	ldr	r5, [pc, #40]	; (8002018 <__libc_init_array+0x40>)
 8001ff0:	4c0a      	ldr	r4, [pc, #40]	; (800201c <__libc_init_array+0x44>)
 8001ff2:	1b64      	subs	r4, r4, r5
 8001ff4:	10a4      	asrs	r4, r4, #2
 8001ff6:	42a6      	cmp	r6, r4
 8001ff8:	d105      	bne.n	8002006 <__libc_init_array+0x2e>
 8001ffa:	bd70      	pop	{r4, r5, r6, pc}
 8001ffc:	00b3      	lsls	r3, r6, #2
 8001ffe:	58eb      	ldr	r3, [r5, r3]
 8002000:	4798      	blx	r3
 8002002:	3601      	adds	r6, #1
 8002004:	e7ee      	b.n	8001fe4 <__libc_init_array+0xc>
 8002006:	00b3      	lsls	r3, r6, #2
 8002008:	58eb      	ldr	r3, [r5, r3]
 800200a:	4798      	blx	r3
 800200c:	3601      	adds	r6, #1
 800200e:	e7f2      	b.n	8001ff6 <__libc_init_array+0x1e>
 8002010:	080029a0 	.word	0x080029a0
 8002014:	080029a0 	.word	0x080029a0
 8002018:	080029a0 	.word	0x080029a0
 800201c:	080029a4 	.word	0x080029a4

08002020 <memset>:
 8002020:	0003      	movs	r3, r0
 8002022:	1882      	adds	r2, r0, r2
 8002024:	4293      	cmp	r3, r2
 8002026:	d100      	bne.n	800202a <memset+0xa>
 8002028:	4770      	bx	lr
 800202a:	7019      	strb	r1, [r3, #0]
 800202c:	3301      	adds	r3, #1
 800202e:	e7f9      	b.n	8002024 <memset+0x4>

08002030 <siprintf>:
 8002030:	b40e      	push	{r1, r2, r3}
 8002032:	b500      	push	{lr}
 8002034:	490b      	ldr	r1, [pc, #44]	; (8002064 <siprintf+0x34>)
 8002036:	b09c      	sub	sp, #112	; 0x70
 8002038:	ab1d      	add	r3, sp, #116	; 0x74
 800203a:	9002      	str	r0, [sp, #8]
 800203c:	9006      	str	r0, [sp, #24]
 800203e:	9107      	str	r1, [sp, #28]
 8002040:	9104      	str	r1, [sp, #16]
 8002042:	4809      	ldr	r0, [pc, #36]	; (8002068 <siprintf+0x38>)
 8002044:	4909      	ldr	r1, [pc, #36]	; (800206c <siprintf+0x3c>)
 8002046:	cb04      	ldmia	r3!, {r2}
 8002048:	9105      	str	r1, [sp, #20]
 800204a:	6800      	ldr	r0, [r0, #0]
 800204c:	a902      	add	r1, sp, #8
 800204e:	9301      	str	r3, [sp, #4]
 8002050:	f000 f870 	bl	8002134 <_svfiprintf_r>
 8002054:	2300      	movs	r3, #0
 8002056:	9a02      	ldr	r2, [sp, #8]
 8002058:	7013      	strb	r3, [r2, #0]
 800205a:	b01c      	add	sp, #112	; 0x70
 800205c:	bc08      	pop	{r3}
 800205e:	b003      	add	sp, #12
 8002060:	4718      	bx	r3
 8002062:	46c0      	nop			; (mov r8, r8)
 8002064:	7fffffff 	.word	0x7fffffff
 8002068:	2000000c 	.word	0x2000000c
 800206c:	ffff0208 	.word	0xffff0208

08002070 <__ssputs_r>:
 8002070:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002072:	688e      	ldr	r6, [r1, #8]
 8002074:	b085      	sub	sp, #20
 8002076:	0007      	movs	r7, r0
 8002078:	000c      	movs	r4, r1
 800207a:	9203      	str	r2, [sp, #12]
 800207c:	9301      	str	r3, [sp, #4]
 800207e:	429e      	cmp	r6, r3
 8002080:	d83c      	bhi.n	80020fc <__ssputs_r+0x8c>
 8002082:	2390      	movs	r3, #144	; 0x90
 8002084:	898a      	ldrh	r2, [r1, #12]
 8002086:	00db      	lsls	r3, r3, #3
 8002088:	421a      	tst	r2, r3
 800208a:	d034      	beq.n	80020f6 <__ssputs_r+0x86>
 800208c:	6909      	ldr	r1, [r1, #16]
 800208e:	6823      	ldr	r3, [r4, #0]
 8002090:	6960      	ldr	r0, [r4, #20]
 8002092:	1a5b      	subs	r3, r3, r1
 8002094:	9302      	str	r3, [sp, #8]
 8002096:	2303      	movs	r3, #3
 8002098:	4343      	muls	r3, r0
 800209a:	0fdd      	lsrs	r5, r3, #31
 800209c:	18ed      	adds	r5, r5, r3
 800209e:	9b01      	ldr	r3, [sp, #4]
 80020a0:	9802      	ldr	r0, [sp, #8]
 80020a2:	3301      	adds	r3, #1
 80020a4:	181b      	adds	r3, r3, r0
 80020a6:	106d      	asrs	r5, r5, #1
 80020a8:	42ab      	cmp	r3, r5
 80020aa:	d900      	bls.n	80020ae <__ssputs_r+0x3e>
 80020ac:	001d      	movs	r5, r3
 80020ae:	0553      	lsls	r3, r2, #21
 80020b0:	d532      	bpl.n	8002118 <__ssputs_r+0xa8>
 80020b2:	0029      	movs	r1, r5
 80020b4:	0038      	movs	r0, r7
 80020b6:	f000 fb53 	bl	8002760 <_malloc_r>
 80020ba:	1e06      	subs	r6, r0, #0
 80020bc:	d109      	bne.n	80020d2 <__ssputs_r+0x62>
 80020be:	230c      	movs	r3, #12
 80020c0:	603b      	str	r3, [r7, #0]
 80020c2:	2340      	movs	r3, #64	; 0x40
 80020c4:	2001      	movs	r0, #1
 80020c6:	89a2      	ldrh	r2, [r4, #12]
 80020c8:	4240      	negs	r0, r0
 80020ca:	4313      	orrs	r3, r2
 80020cc:	81a3      	strh	r3, [r4, #12]
 80020ce:	b005      	add	sp, #20
 80020d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020d2:	9a02      	ldr	r2, [sp, #8]
 80020d4:	6921      	ldr	r1, [r4, #16]
 80020d6:	f000 faba 	bl	800264e <memcpy>
 80020da:	89a3      	ldrh	r3, [r4, #12]
 80020dc:	4a14      	ldr	r2, [pc, #80]	; (8002130 <__ssputs_r+0xc0>)
 80020de:	401a      	ands	r2, r3
 80020e0:	2380      	movs	r3, #128	; 0x80
 80020e2:	4313      	orrs	r3, r2
 80020e4:	81a3      	strh	r3, [r4, #12]
 80020e6:	9b02      	ldr	r3, [sp, #8]
 80020e8:	6126      	str	r6, [r4, #16]
 80020ea:	18f6      	adds	r6, r6, r3
 80020ec:	6026      	str	r6, [r4, #0]
 80020ee:	6165      	str	r5, [r4, #20]
 80020f0:	9e01      	ldr	r6, [sp, #4]
 80020f2:	1aed      	subs	r5, r5, r3
 80020f4:	60a5      	str	r5, [r4, #8]
 80020f6:	9b01      	ldr	r3, [sp, #4]
 80020f8:	429e      	cmp	r6, r3
 80020fa:	d900      	bls.n	80020fe <__ssputs_r+0x8e>
 80020fc:	9e01      	ldr	r6, [sp, #4]
 80020fe:	0032      	movs	r2, r6
 8002100:	9903      	ldr	r1, [sp, #12]
 8002102:	6820      	ldr	r0, [r4, #0]
 8002104:	f000 faac 	bl	8002660 <memmove>
 8002108:	68a3      	ldr	r3, [r4, #8]
 800210a:	2000      	movs	r0, #0
 800210c:	1b9b      	subs	r3, r3, r6
 800210e:	60a3      	str	r3, [r4, #8]
 8002110:	6823      	ldr	r3, [r4, #0]
 8002112:	199e      	adds	r6, r3, r6
 8002114:	6026      	str	r6, [r4, #0]
 8002116:	e7da      	b.n	80020ce <__ssputs_r+0x5e>
 8002118:	002a      	movs	r2, r5
 800211a:	0038      	movs	r0, r7
 800211c:	f000 fb96 	bl	800284c <_realloc_r>
 8002120:	1e06      	subs	r6, r0, #0
 8002122:	d1e0      	bne.n	80020e6 <__ssputs_r+0x76>
 8002124:	0038      	movs	r0, r7
 8002126:	6921      	ldr	r1, [r4, #16]
 8002128:	f000 faae 	bl	8002688 <_free_r>
 800212c:	e7c7      	b.n	80020be <__ssputs_r+0x4e>
 800212e:	46c0      	nop			; (mov r8, r8)
 8002130:	fffffb7f 	.word	0xfffffb7f

08002134 <_svfiprintf_r>:
 8002134:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002136:	b0a1      	sub	sp, #132	; 0x84
 8002138:	9003      	str	r0, [sp, #12]
 800213a:	001d      	movs	r5, r3
 800213c:	898b      	ldrh	r3, [r1, #12]
 800213e:	000f      	movs	r7, r1
 8002140:	0016      	movs	r6, r2
 8002142:	061b      	lsls	r3, r3, #24
 8002144:	d511      	bpl.n	800216a <_svfiprintf_r+0x36>
 8002146:	690b      	ldr	r3, [r1, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10e      	bne.n	800216a <_svfiprintf_r+0x36>
 800214c:	2140      	movs	r1, #64	; 0x40
 800214e:	f000 fb07 	bl	8002760 <_malloc_r>
 8002152:	6038      	str	r0, [r7, #0]
 8002154:	6138      	str	r0, [r7, #16]
 8002156:	2800      	cmp	r0, #0
 8002158:	d105      	bne.n	8002166 <_svfiprintf_r+0x32>
 800215a:	230c      	movs	r3, #12
 800215c:	9a03      	ldr	r2, [sp, #12]
 800215e:	3801      	subs	r0, #1
 8002160:	6013      	str	r3, [r2, #0]
 8002162:	b021      	add	sp, #132	; 0x84
 8002164:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002166:	2340      	movs	r3, #64	; 0x40
 8002168:	617b      	str	r3, [r7, #20]
 800216a:	2300      	movs	r3, #0
 800216c:	ac08      	add	r4, sp, #32
 800216e:	6163      	str	r3, [r4, #20]
 8002170:	3320      	adds	r3, #32
 8002172:	7663      	strb	r3, [r4, #25]
 8002174:	3310      	adds	r3, #16
 8002176:	76a3      	strb	r3, [r4, #26]
 8002178:	9507      	str	r5, [sp, #28]
 800217a:	0035      	movs	r5, r6
 800217c:	782b      	ldrb	r3, [r5, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <_svfiprintf_r+0x52>
 8002182:	2b25      	cmp	r3, #37	; 0x25
 8002184:	d147      	bne.n	8002216 <_svfiprintf_r+0xe2>
 8002186:	1bab      	subs	r3, r5, r6
 8002188:	9305      	str	r3, [sp, #20]
 800218a:	42b5      	cmp	r5, r6
 800218c:	d00c      	beq.n	80021a8 <_svfiprintf_r+0x74>
 800218e:	0032      	movs	r2, r6
 8002190:	0039      	movs	r1, r7
 8002192:	9803      	ldr	r0, [sp, #12]
 8002194:	f7ff ff6c 	bl	8002070 <__ssputs_r>
 8002198:	1c43      	adds	r3, r0, #1
 800219a:	d100      	bne.n	800219e <_svfiprintf_r+0x6a>
 800219c:	e0ae      	b.n	80022fc <_svfiprintf_r+0x1c8>
 800219e:	6962      	ldr	r2, [r4, #20]
 80021a0:	9b05      	ldr	r3, [sp, #20]
 80021a2:	4694      	mov	ip, r2
 80021a4:	4463      	add	r3, ip
 80021a6:	6163      	str	r3, [r4, #20]
 80021a8:	782b      	ldrb	r3, [r5, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d100      	bne.n	80021b0 <_svfiprintf_r+0x7c>
 80021ae:	e0a5      	b.n	80022fc <_svfiprintf_r+0x1c8>
 80021b0:	2201      	movs	r2, #1
 80021b2:	2300      	movs	r3, #0
 80021b4:	4252      	negs	r2, r2
 80021b6:	6062      	str	r2, [r4, #4]
 80021b8:	a904      	add	r1, sp, #16
 80021ba:	3254      	adds	r2, #84	; 0x54
 80021bc:	1852      	adds	r2, r2, r1
 80021be:	1c6e      	adds	r6, r5, #1
 80021c0:	6023      	str	r3, [r4, #0]
 80021c2:	60e3      	str	r3, [r4, #12]
 80021c4:	60a3      	str	r3, [r4, #8]
 80021c6:	7013      	strb	r3, [r2, #0]
 80021c8:	65a3      	str	r3, [r4, #88]	; 0x58
 80021ca:	2205      	movs	r2, #5
 80021cc:	7831      	ldrb	r1, [r6, #0]
 80021ce:	4854      	ldr	r0, [pc, #336]	; (8002320 <_svfiprintf_r+0x1ec>)
 80021d0:	f000 fa32 	bl	8002638 <memchr>
 80021d4:	1c75      	adds	r5, r6, #1
 80021d6:	2800      	cmp	r0, #0
 80021d8:	d11f      	bne.n	800221a <_svfiprintf_r+0xe6>
 80021da:	6822      	ldr	r2, [r4, #0]
 80021dc:	06d3      	lsls	r3, r2, #27
 80021de:	d504      	bpl.n	80021ea <_svfiprintf_r+0xb6>
 80021e0:	2353      	movs	r3, #83	; 0x53
 80021e2:	a904      	add	r1, sp, #16
 80021e4:	185b      	adds	r3, r3, r1
 80021e6:	2120      	movs	r1, #32
 80021e8:	7019      	strb	r1, [r3, #0]
 80021ea:	0713      	lsls	r3, r2, #28
 80021ec:	d504      	bpl.n	80021f8 <_svfiprintf_r+0xc4>
 80021ee:	2353      	movs	r3, #83	; 0x53
 80021f0:	a904      	add	r1, sp, #16
 80021f2:	185b      	adds	r3, r3, r1
 80021f4:	212b      	movs	r1, #43	; 0x2b
 80021f6:	7019      	strb	r1, [r3, #0]
 80021f8:	7833      	ldrb	r3, [r6, #0]
 80021fa:	2b2a      	cmp	r3, #42	; 0x2a
 80021fc:	d016      	beq.n	800222c <_svfiprintf_r+0xf8>
 80021fe:	0035      	movs	r5, r6
 8002200:	2100      	movs	r1, #0
 8002202:	200a      	movs	r0, #10
 8002204:	68e3      	ldr	r3, [r4, #12]
 8002206:	782a      	ldrb	r2, [r5, #0]
 8002208:	1c6e      	adds	r6, r5, #1
 800220a:	3a30      	subs	r2, #48	; 0x30
 800220c:	2a09      	cmp	r2, #9
 800220e:	d94e      	bls.n	80022ae <_svfiprintf_r+0x17a>
 8002210:	2900      	cmp	r1, #0
 8002212:	d111      	bne.n	8002238 <_svfiprintf_r+0x104>
 8002214:	e017      	b.n	8002246 <_svfiprintf_r+0x112>
 8002216:	3501      	adds	r5, #1
 8002218:	e7b0      	b.n	800217c <_svfiprintf_r+0x48>
 800221a:	4b41      	ldr	r3, [pc, #260]	; (8002320 <_svfiprintf_r+0x1ec>)
 800221c:	6822      	ldr	r2, [r4, #0]
 800221e:	1ac0      	subs	r0, r0, r3
 8002220:	2301      	movs	r3, #1
 8002222:	4083      	lsls	r3, r0
 8002224:	4313      	orrs	r3, r2
 8002226:	002e      	movs	r6, r5
 8002228:	6023      	str	r3, [r4, #0]
 800222a:	e7ce      	b.n	80021ca <_svfiprintf_r+0x96>
 800222c:	9b07      	ldr	r3, [sp, #28]
 800222e:	1d19      	adds	r1, r3, #4
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	9107      	str	r1, [sp, #28]
 8002234:	2b00      	cmp	r3, #0
 8002236:	db01      	blt.n	800223c <_svfiprintf_r+0x108>
 8002238:	930b      	str	r3, [sp, #44]	; 0x2c
 800223a:	e004      	b.n	8002246 <_svfiprintf_r+0x112>
 800223c:	425b      	negs	r3, r3
 800223e:	60e3      	str	r3, [r4, #12]
 8002240:	2302      	movs	r3, #2
 8002242:	4313      	orrs	r3, r2
 8002244:	6023      	str	r3, [r4, #0]
 8002246:	782b      	ldrb	r3, [r5, #0]
 8002248:	2b2e      	cmp	r3, #46	; 0x2e
 800224a:	d10a      	bne.n	8002262 <_svfiprintf_r+0x12e>
 800224c:	786b      	ldrb	r3, [r5, #1]
 800224e:	2b2a      	cmp	r3, #42	; 0x2a
 8002250:	d135      	bne.n	80022be <_svfiprintf_r+0x18a>
 8002252:	9b07      	ldr	r3, [sp, #28]
 8002254:	3502      	adds	r5, #2
 8002256:	1d1a      	adds	r2, r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	9207      	str	r2, [sp, #28]
 800225c:	2b00      	cmp	r3, #0
 800225e:	db2b      	blt.n	80022b8 <_svfiprintf_r+0x184>
 8002260:	9309      	str	r3, [sp, #36]	; 0x24
 8002262:	4e30      	ldr	r6, [pc, #192]	; (8002324 <_svfiprintf_r+0x1f0>)
 8002264:	2203      	movs	r2, #3
 8002266:	0030      	movs	r0, r6
 8002268:	7829      	ldrb	r1, [r5, #0]
 800226a:	f000 f9e5 	bl	8002638 <memchr>
 800226e:	2800      	cmp	r0, #0
 8002270:	d006      	beq.n	8002280 <_svfiprintf_r+0x14c>
 8002272:	2340      	movs	r3, #64	; 0x40
 8002274:	1b80      	subs	r0, r0, r6
 8002276:	4083      	lsls	r3, r0
 8002278:	6822      	ldr	r2, [r4, #0]
 800227a:	3501      	adds	r5, #1
 800227c:	4313      	orrs	r3, r2
 800227e:	6023      	str	r3, [r4, #0]
 8002280:	7829      	ldrb	r1, [r5, #0]
 8002282:	2206      	movs	r2, #6
 8002284:	4828      	ldr	r0, [pc, #160]	; (8002328 <_svfiprintf_r+0x1f4>)
 8002286:	1c6e      	adds	r6, r5, #1
 8002288:	7621      	strb	r1, [r4, #24]
 800228a:	f000 f9d5 	bl	8002638 <memchr>
 800228e:	2800      	cmp	r0, #0
 8002290:	d03c      	beq.n	800230c <_svfiprintf_r+0x1d8>
 8002292:	4b26      	ldr	r3, [pc, #152]	; (800232c <_svfiprintf_r+0x1f8>)
 8002294:	2b00      	cmp	r3, #0
 8002296:	d125      	bne.n	80022e4 <_svfiprintf_r+0x1b0>
 8002298:	2207      	movs	r2, #7
 800229a:	9b07      	ldr	r3, [sp, #28]
 800229c:	3307      	adds	r3, #7
 800229e:	4393      	bics	r3, r2
 80022a0:	3308      	adds	r3, #8
 80022a2:	9307      	str	r3, [sp, #28]
 80022a4:	6963      	ldr	r3, [r4, #20]
 80022a6:	9a04      	ldr	r2, [sp, #16]
 80022a8:	189b      	adds	r3, r3, r2
 80022aa:	6163      	str	r3, [r4, #20]
 80022ac:	e765      	b.n	800217a <_svfiprintf_r+0x46>
 80022ae:	4343      	muls	r3, r0
 80022b0:	0035      	movs	r5, r6
 80022b2:	2101      	movs	r1, #1
 80022b4:	189b      	adds	r3, r3, r2
 80022b6:	e7a6      	b.n	8002206 <_svfiprintf_r+0xd2>
 80022b8:	2301      	movs	r3, #1
 80022ba:	425b      	negs	r3, r3
 80022bc:	e7d0      	b.n	8002260 <_svfiprintf_r+0x12c>
 80022be:	2300      	movs	r3, #0
 80022c0:	200a      	movs	r0, #10
 80022c2:	001a      	movs	r2, r3
 80022c4:	3501      	adds	r5, #1
 80022c6:	6063      	str	r3, [r4, #4]
 80022c8:	7829      	ldrb	r1, [r5, #0]
 80022ca:	1c6e      	adds	r6, r5, #1
 80022cc:	3930      	subs	r1, #48	; 0x30
 80022ce:	2909      	cmp	r1, #9
 80022d0:	d903      	bls.n	80022da <_svfiprintf_r+0x1a6>
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d0c5      	beq.n	8002262 <_svfiprintf_r+0x12e>
 80022d6:	9209      	str	r2, [sp, #36]	; 0x24
 80022d8:	e7c3      	b.n	8002262 <_svfiprintf_r+0x12e>
 80022da:	4342      	muls	r2, r0
 80022dc:	0035      	movs	r5, r6
 80022de:	2301      	movs	r3, #1
 80022e0:	1852      	adds	r2, r2, r1
 80022e2:	e7f1      	b.n	80022c8 <_svfiprintf_r+0x194>
 80022e4:	ab07      	add	r3, sp, #28
 80022e6:	9300      	str	r3, [sp, #0]
 80022e8:	003a      	movs	r2, r7
 80022ea:	0021      	movs	r1, r4
 80022ec:	4b10      	ldr	r3, [pc, #64]	; (8002330 <_svfiprintf_r+0x1fc>)
 80022ee:	9803      	ldr	r0, [sp, #12]
 80022f0:	e000      	b.n	80022f4 <_svfiprintf_r+0x1c0>
 80022f2:	bf00      	nop
 80022f4:	9004      	str	r0, [sp, #16]
 80022f6:	9b04      	ldr	r3, [sp, #16]
 80022f8:	3301      	adds	r3, #1
 80022fa:	d1d3      	bne.n	80022a4 <_svfiprintf_r+0x170>
 80022fc:	89bb      	ldrh	r3, [r7, #12]
 80022fe:	980d      	ldr	r0, [sp, #52]	; 0x34
 8002300:	065b      	lsls	r3, r3, #25
 8002302:	d400      	bmi.n	8002306 <_svfiprintf_r+0x1d2>
 8002304:	e72d      	b.n	8002162 <_svfiprintf_r+0x2e>
 8002306:	2001      	movs	r0, #1
 8002308:	4240      	negs	r0, r0
 800230a:	e72a      	b.n	8002162 <_svfiprintf_r+0x2e>
 800230c:	ab07      	add	r3, sp, #28
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	003a      	movs	r2, r7
 8002312:	0021      	movs	r1, r4
 8002314:	4b06      	ldr	r3, [pc, #24]	; (8002330 <_svfiprintf_r+0x1fc>)
 8002316:	9803      	ldr	r0, [sp, #12]
 8002318:	f000 f87c 	bl	8002414 <_printf_i>
 800231c:	e7ea      	b.n	80022f4 <_svfiprintf_r+0x1c0>
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	0800296c 	.word	0x0800296c
 8002324:	08002972 	.word	0x08002972
 8002328:	08002976 	.word	0x08002976
 800232c:	00000000 	.word	0x00000000
 8002330:	08002071 	.word	0x08002071

08002334 <_printf_common>:
 8002334:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002336:	0015      	movs	r5, r2
 8002338:	9301      	str	r3, [sp, #4]
 800233a:	688a      	ldr	r2, [r1, #8]
 800233c:	690b      	ldr	r3, [r1, #16]
 800233e:	000c      	movs	r4, r1
 8002340:	9000      	str	r0, [sp, #0]
 8002342:	4293      	cmp	r3, r2
 8002344:	da00      	bge.n	8002348 <_printf_common+0x14>
 8002346:	0013      	movs	r3, r2
 8002348:	0022      	movs	r2, r4
 800234a:	602b      	str	r3, [r5, #0]
 800234c:	3243      	adds	r2, #67	; 0x43
 800234e:	7812      	ldrb	r2, [r2, #0]
 8002350:	2a00      	cmp	r2, #0
 8002352:	d001      	beq.n	8002358 <_printf_common+0x24>
 8002354:	3301      	adds	r3, #1
 8002356:	602b      	str	r3, [r5, #0]
 8002358:	6823      	ldr	r3, [r4, #0]
 800235a:	069b      	lsls	r3, r3, #26
 800235c:	d502      	bpl.n	8002364 <_printf_common+0x30>
 800235e:	682b      	ldr	r3, [r5, #0]
 8002360:	3302      	adds	r3, #2
 8002362:	602b      	str	r3, [r5, #0]
 8002364:	6822      	ldr	r2, [r4, #0]
 8002366:	2306      	movs	r3, #6
 8002368:	0017      	movs	r7, r2
 800236a:	401f      	ands	r7, r3
 800236c:	421a      	tst	r2, r3
 800236e:	d027      	beq.n	80023c0 <_printf_common+0x8c>
 8002370:	0023      	movs	r3, r4
 8002372:	3343      	adds	r3, #67	; 0x43
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	1e5a      	subs	r2, r3, #1
 8002378:	4193      	sbcs	r3, r2
 800237a:	6822      	ldr	r2, [r4, #0]
 800237c:	0692      	lsls	r2, r2, #26
 800237e:	d430      	bmi.n	80023e2 <_printf_common+0xae>
 8002380:	0022      	movs	r2, r4
 8002382:	9901      	ldr	r1, [sp, #4]
 8002384:	9800      	ldr	r0, [sp, #0]
 8002386:	9e08      	ldr	r6, [sp, #32]
 8002388:	3243      	adds	r2, #67	; 0x43
 800238a:	47b0      	blx	r6
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d025      	beq.n	80023dc <_printf_common+0xa8>
 8002390:	2306      	movs	r3, #6
 8002392:	6820      	ldr	r0, [r4, #0]
 8002394:	682a      	ldr	r2, [r5, #0]
 8002396:	68e1      	ldr	r1, [r4, #12]
 8002398:	2500      	movs	r5, #0
 800239a:	4003      	ands	r3, r0
 800239c:	2b04      	cmp	r3, #4
 800239e:	d103      	bne.n	80023a8 <_printf_common+0x74>
 80023a0:	1a8d      	subs	r5, r1, r2
 80023a2:	43eb      	mvns	r3, r5
 80023a4:	17db      	asrs	r3, r3, #31
 80023a6:	401d      	ands	r5, r3
 80023a8:	68a3      	ldr	r3, [r4, #8]
 80023aa:	6922      	ldr	r2, [r4, #16]
 80023ac:	4293      	cmp	r3, r2
 80023ae:	dd01      	ble.n	80023b4 <_printf_common+0x80>
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	18ed      	adds	r5, r5, r3
 80023b4:	2700      	movs	r7, #0
 80023b6:	42bd      	cmp	r5, r7
 80023b8:	d120      	bne.n	80023fc <_printf_common+0xc8>
 80023ba:	2000      	movs	r0, #0
 80023bc:	e010      	b.n	80023e0 <_printf_common+0xac>
 80023be:	3701      	adds	r7, #1
 80023c0:	68e3      	ldr	r3, [r4, #12]
 80023c2:	682a      	ldr	r2, [r5, #0]
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	42bb      	cmp	r3, r7
 80023c8:	ddd2      	ble.n	8002370 <_printf_common+0x3c>
 80023ca:	0022      	movs	r2, r4
 80023cc:	2301      	movs	r3, #1
 80023ce:	9901      	ldr	r1, [sp, #4]
 80023d0:	9800      	ldr	r0, [sp, #0]
 80023d2:	9e08      	ldr	r6, [sp, #32]
 80023d4:	3219      	adds	r2, #25
 80023d6:	47b0      	blx	r6
 80023d8:	1c43      	adds	r3, r0, #1
 80023da:	d1f0      	bne.n	80023be <_printf_common+0x8a>
 80023dc:	2001      	movs	r0, #1
 80023de:	4240      	negs	r0, r0
 80023e0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80023e2:	2030      	movs	r0, #48	; 0x30
 80023e4:	18e1      	adds	r1, r4, r3
 80023e6:	3143      	adds	r1, #67	; 0x43
 80023e8:	7008      	strb	r0, [r1, #0]
 80023ea:	0021      	movs	r1, r4
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	3145      	adds	r1, #69	; 0x45
 80023f0:	7809      	ldrb	r1, [r1, #0]
 80023f2:	18a2      	adds	r2, r4, r2
 80023f4:	3243      	adds	r2, #67	; 0x43
 80023f6:	3302      	adds	r3, #2
 80023f8:	7011      	strb	r1, [r2, #0]
 80023fa:	e7c1      	b.n	8002380 <_printf_common+0x4c>
 80023fc:	0022      	movs	r2, r4
 80023fe:	2301      	movs	r3, #1
 8002400:	9901      	ldr	r1, [sp, #4]
 8002402:	9800      	ldr	r0, [sp, #0]
 8002404:	9e08      	ldr	r6, [sp, #32]
 8002406:	321a      	adds	r2, #26
 8002408:	47b0      	blx	r6
 800240a:	1c43      	adds	r3, r0, #1
 800240c:	d0e6      	beq.n	80023dc <_printf_common+0xa8>
 800240e:	3701      	adds	r7, #1
 8002410:	e7d1      	b.n	80023b6 <_printf_common+0x82>
	...

08002414 <_printf_i>:
 8002414:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002416:	b08b      	sub	sp, #44	; 0x2c
 8002418:	9206      	str	r2, [sp, #24]
 800241a:	000a      	movs	r2, r1
 800241c:	3243      	adds	r2, #67	; 0x43
 800241e:	9307      	str	r3, [sp, #28]
 8002420:	9005      	str	r0, [sp, #20]
 8002422:	9204      	str	r2, [sp, #16]
 8002424:	7e0a      	ldrb	r2, [r1, #24]
 8002426:	000c      	movs	r4, r1
 8002428:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800242a:	2a78      	cmp	r2, #120	; 0x78
 800242c:	d807      	bhi.n	800243e <_printf_i+0x2a>
 800242e:	2a62      	cmp	r2, #98	; 0x62
 8002430:	d809      	bhi.n	8002446 <_printf_i+0x32>
 8002432:	2a00      	cmp	r2, #0
 8002434:	d100      	bne.n	8002438 <_printf_i+0x24>
 8002436:	e0c1      	b.n	80025bc <_printf_i+0x1a8>
 8002438:	2a58      	cmp	r2, #88	; 0x58
 800243a:	d100      	bne.n	800243e <_printf_i+0x2a>
 800243c:	e08c      	b.n	8002558 <_printf_i+0x144>
 800243e:	0026      	movs	r6, r4
 8002440:	3642      	adds	r6, #66	; 0x42
 8002442:	7032      	strb	r2, [r6, #0]
 8002444:	e022      	b.n	800248c <_printf_i+0x78>
 8002446:	0010      	movs	r0, r2
 8002448:	3863      	subs	r0, #99	; 0x63
 800244a:	2815      	cmp	r0, #21
 800244c:	d8f7      	bhi.n	800243e <_printf_i+0x2a>
 800244e:	f7fd fe5b 	bl	8000108 <__gnu_thumb1_case_shi>
 8002452:	0016      	.short	0x0016
 8002454:	fff6001f 	.word	0xfff6001f
 8002458:	fff6fff6 	.word	0xfff6fff6
 800245c:	001ffff6 	.word	0x001ffff6
 8002460:	fff6fff6 	.word	0xfff6fff6
 8002464:	fff6fff6 	.word	0xfff6fff6
 8002468:	003600a8 	.word	0x003600a8
 800246c:	fff6009a 	.word	0xfff6009a
 8002470:	00b9fff6 	.word	0x00b9fff6
 8002474:	0036fff6 	.word	0x0036fff6
 8002478:	fff6fff6 	.word	0xfff6fff6
 800247c:	009e      	.short	0x009e
 800247e:	0026      	movs	r6, r4
 8002480:	681a      	ldr	r2, [r3, #0]
 8002482:	3642      	adds	r6, #66	; 0x42
 8002484:	1d11      	adds	r1, r2, #4
 8002486:	6019      	str	r1, [r3, #0]
 8002488:	6813      	ldr	r3, [r2, #0]
 800248a:	7033      	strb	r3, [r6, #0]
 800248c:	2301      	movs	r3, #1
 800248e:	e0a7      	b.n	80025e0 <_printf_i+0x1cc>
 8002490:	6808      	ldr	r0, [r1, #0]
 8002492:	6819      	ldr	r1, [r3, #0]
 8002494:	1d0a      	adds	r2, r1, #4
 8002496:	0605      	lsls	r5, r0, #24
 8002498:	d50b      	bpl.n	80024b2 <_printf_i+0x9e>
 800249a:	680d      	ldr	r5, [r1, #0]
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	2d00      	cmp	r5, #0
 80024a0:	da03      	bge.n	80024aa <_printf_i+0x96>
 80024a2:	232d      	movs	r3, #45	; 0x2d
 80024a4:	9a04      	ldr	r2, [sp, #16]
 80024a6:	426d      	negs	r5, r5
 80024a8:	7013      	strb	r3, [r2, #0]
 80024aa:	4b61      	ldr	r3, [pc, #388]	; (8002630 <_printf_i+0x21c>)
 80024ac:	270a      	movs	r7, #10
 80024ae:	9303      	str	r3, [sp, #12]
 80024b0:	e01b      	b.n	80024ea <_printf_i+0xd6>
 80024b2:	680d      	ldr	r5, [r1, #0]
 80024b4:	601a      	str	r2, [r3, #0]
 80024b6:	0641      	lsls	r1, r0, #25
 80024b8:	d5f1      	bpl.n	800249e <_printf_i+0x8a>
 80024ba:	b22d      	sxth	r5, r5
 80024bc:	e7ef      	b.n	800249e <_printf_i+0x8a>
 80024be:	680d      	ldr	r5, [r1, #0]
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	1d08      	adds	r0, r1, #4
 80024c4:	6018      	str	r0, [r3, #0]
 80024c6:	062e      	lsls	r6, r5, #24
 80024c8:	d501      	bpl.n	80024ce <_printf_i+0xba>
 80024ca:	680d      	ldr	r5, [r1, #0]
 80024cc:	e003      	b.n	80024d6 <_printf_i+0xc2>
 80024ce:	066d      	lsls	r5, r5, #25
 80024d0:	d5fb      	bpl.n	80024ca <_printf_i+0xb6>
 80024d2:	680d      	ldr	r5, [r1, #0]
 80024d4:	b2ad      	uxth	r5, r5
 80024d6:	4b56      	ldr	r3, [pc, #344]	; (8002630 <_printf_i+0x21c>)
 80024d8:	2708      	movs	r7, #8
 80024da:	9303      	str	r3, [sp, #12]
 80024dc:	2a6f      	cmp	r2, #111	; 0x6f
 80024de:	d000      	beq.n	80024e2 <_printf_i+0xce>
 80024e0:	3702      	adds	r7, #2
 80024e2:	0023      	movs	r3, r4
 80024e4:	2200      	movs	r2, #0
 80024e6:	3343      	adds	r3, #67	; 0x43
 80024e8:	701a      	strb	r2, [r3, #0]
 80024ea:	6863      	ldr	r3, [r4, #4]
 80024ec:	60a3      	str	r3, [r4, #8]
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	db03      	blt.n	80024fa <_printf_i+0xe6>
 80024f2:	2204      	movs	r2, #4
 80024f4:	6821      	ldr	r1, [r4, #0]
 80024f6:	4391      	bics	r1, r2
 80024f8:	6021      	str	r1, [r4, #0]
 80024fa:	2d00      	cmp	r5, #0
 80024fc:	d102      	bne.n	8002504 <_printf_i+0xf0>
 80024fe:	9e04      	ldr	r6, [sp, #16]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00c      	beq.n	800251e <_printf_i+0x10a>
 8002504:	9e04      	ldr	r6, [sp, #16]
 8002506:	0028      	movs	r0, r5
 8002508:	0039      	movs	r1, r7
 800250a:	f7fd fe8d 	bl	8000228 <__aeabi_uidivmod>
 800250e:	9b03      	ldr	r3, [sp, #12]
 8002510:	3e01      	subs	r6, #1
 8002512:	5c5b      	ldrb	r3, [r3, r1]
 8002514:	7033      	strb	r3, [r6, #0]
 8002516:	002b      	movs	r3, r5
 8002518:	0005      	movs	r5, r0
 800251a:	429f      	cmp	r7, r3
 800251c:	d9f3      	bls.n	8002506 <_printf_i+0xf2>
 800251e:	2f08      	cmp	r7, #8
 8002520:	d109      	bne.n	8002536 <_printf_i+0x122>
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	07db      	lsls	r3, r3, #31
 8002526:	d506      	bpl.n	8002536 <_printf_i+0x122>
 8002528:	6863      	ldr	r3, [r4, #4]
 800252a:	6922      	ldr	r2, [r4, #16]
 800252c:	4293      	cmp	r3, r2
 800252e:	dc02      	bgt.n	8002536 <_printf_i+0x122>
 8002530:	2330      	movs	r3, #48	; 0x30
 8002532:	3e01      	subs	r6, #1
 8002534:	7033      	strb	r3, [r6, #0]
 8002536:	9b04      	ldr	r3, [sp, #16]
 8002538:	1b9b      	subs	r3, r3, r6
 800253a:	6123      	str	r3, [r4, #16]
 800253c:	9b07      	ldr	r3, [sp, #28]
 800253e:	0021      	movs	r1, r4
 8002540:	9300      	str	r3, [sp, #0]
 8002542:	9805      	ldr	r0, [sp, #20]
 8002544:	9b06      	ldr	r3, [sp, #24]
 8002546:	aa09      	add	r2, sp, #36	; 0x24
 8002548:	f7ff fef4 	bl	8002334 <_printf_common>
 800254c:	1c43      	adds	r3, r0, #1
 800254e:	d14c      	bne.n	80025ea <_printf_i+0x1d6>
 8002550:	2001      	movs	r0, #1
 8002552:	4240      	negs	r0, r0
 8002554:	b00b      	add	sp, #44	; 0x2c
 8002556:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002558:	3145      	adds	r1, #69	; 0x45
 800255a:	700a      	strb	r2, [r1, #0]
 800255c:	4a34      	ldr	r2, [pc, #208]	; (8002630 <_printf_i+0x21c>)
 800255e:	9203      	str	r2, [sp, #12]
 8002560:	681a      	ldr	r2, [r3, #0]
 8002562:	6821      	ldr	r1, [r4, #0]
 8002564:	ca20      	ldmia	r2!, {r5}
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	0608      	lsls	r0, r1, #24
 800256a:	d516      	bpl.n	800259a <_printf_i+0x186>
 800256c:	07cb      	lsls	r3, r1, #31
 800256e:	d502      	bpl.n	8002576 <_printf_i+0x162>
 8002570:	2320      	movs	r3, #32
 8002572:	4319      	orrs	r1, r3
 8002574:	6021      	str	r1, [r4, #0]
 8002576:	2710      	movs	r7, #16
 8002578:	2d00      	cmp	r5, #0
 800257a:	d1b2      	bne.n	80024e2 <_printf_i+0xce>
 800257c:	2320      	movs	r3, #32
 800257e:	6822      	ldr	r2, [r4, #0]
 8002580:	439a      	bics	r2, r3
 8002582:	6022      	str	r2, [r4, #0]
 8002584:	e7ad      	b.n	80024e2 <_printf_i+0xce>
 8002586:	2220      	movs	r2, #32
 8002588:	6809      	ldr	r1, [r1, #0]
 800258a:	430a      	orrs	r2, r1
 800258c:	6022      	str	r2, [r4, #0]
 800258e:	0022      	movs	r2, r4
 8002590:	2178      	movs	r1, #120	; 0x78
 8002592:	3245      	adds	r2, #69	; 0x45
 8002594:	7011      	strb	r1, [r2, #0]
 8002596:	4a27      	ldr	r2, [pc, #156]	; (8002634 <_printf_i+0x220>)
 8002598:	e7e1      	b.n	800255e <_printf_i+0x14a>
 800259a:	0648      	lsls	r0, r1, #25
 800259c:	d5e6      	bpl.n	800256c <_printf_i+0x158>
 800259e:	b2ad      	uxth	r5, r5
 80025a0:	e7e4      	b.n	800256c <_printf_i+0x158>
 80025a2:	681a      	ldr	r2, [r3, #0]
 80025a4:	680d      	ldr	r5, [r1, #0]
 80025a6:	1d10      	adds	r0, r2, #4
 80025a8:	6949      	ldr	r1, [r1, #20]
 80025aa:	6018      	str	r0, [r3, #0]
 80025ac:	6813      	ldr	r3, [r2, #0]
 80025ae:	062e      	lsls	r6, r5, #24
 80025b0:	d501      	bpl.n	80025b6 <_printf_i+0x1a2>
 80025b2:	6019      	str	r1, [r3, #0]
 80025b4:	e002      	b.n	80025bc <_printf_i+0x1a8>
 80025b6:	066d      	lsls	r5, r5, #25
 80025b8:	d5fb      	bpl.n	80025b2 <_printf_i+0x19e>
 80025ba:	8019      	strh	r1, [r3, #0]
 80025bc:	2300      	movs	r3, #0
 80025be:	9e04      	ldr	r6, [sp, #16]
 80025c0:	6123      	str	r3, [r4, #16]
 80025c2:	e7bb      	b.n	800253c <_printf_i+0x128>
 80025c4:	681a      	ldr	r2, [r3, #0]
 80025c6:	1d11      	adds	r1, r2, #4
 80025c8:	6019      	str	r1, [r3, #0]
 80025ca:	6816      	ldr	r6, [r2, #0]
 80025cc:	2100      	movs	r1, #0
 80025ce:	0030      	movs	r0, r6
 80025d0:	6862      	ldr	r2, [r4, #4]
 80025d2:	f000 f831 	bl	8002638 <memchr>
 80025d6:	2800      	cmp	r0, #0
 80025d8:	d001      	beq.n	80025de <_printf_i+0x1ca>
 80025da:	1b80      	subs	r0, r0, r6
 80025dc:	6060      	str	r0, [r4, #4]
 80025de:	6863      	ldr	r3, [r4, #4]
 80025e0:	6123      	str	r3, [r4, #16]
 80025e2:	2300      	movs	r3, #0
 80025e4:	9a04      	ldr	r2, [sp, #16]
 80025e6:	7013      	strb	r3, [r2, #0]
 80025e8:	e7a8      	b.n	800253c <_printf_i+0x128>
 80025ea:	6923      	ldr	r3, [r4, #16]
 80025ec:	0032      	movs	r2, r6
 80025ee:	9906      	ldr	r1, [sp, #24]
 80025f0:	9805      	ldr	r0, [sp, #20]
 80025f2:	9d07      	ldr	r5, [sp, #28]
 80025f4:	47a8      	blx	r5
 80025f6:	1c43      	adds	r3, r0, #1
 80025f8:	d0aa      	beq.n	8002550 <_printf_i+0x13c>
 80025fa:	6823      	ldr	r3, [r4, #0]
 80025fc:	079b      	lsls	r3, r3, #30
 80025fe:	d415      	bmi.n	800262c <_printf_i+0x218>
 8002600:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002602:	68e0      	ldr	r0, [r4, #12]
 8002604:	4298      	cmp	r0, r3
 8002606:	daa5      	bge.n	8002554 <_printf_i+0x140>
 8002608:	0018      	movs	r0, r3
 800260a:	e7a3      	b.n	8002554 <_printf_i+0x140>
 800260c:	0022      	movs	r2, r4
 800260e:	2301      	movs	r3, #1
 8002610:	9906      	ldr	r1, [sp, #24]
 8002612:	9805      	ldr	r0, [sp, #20]
 8002614:	9e07      	ldr	r6, [sp, #28]
 8002616:	3219      	adds	r2, #25
 8002618:	47b0      	blx	r6
 800261a:	1c43      	adds	r3, r0, #1
 800261c:	d098      	beq.n	8002550 <_printf_i+0x13c>
 800261e:	3501      	adds	r5, #1
 8002620:	68e3      	ldr	r3, [r4, #12]
 8002622:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002624:	1a9b      	subs	r3, r3, r2
 8002626:	42ab      	cmp	r3, r5
 8002628:	dcf0      	bgt.n	800260c <_printf_i+0x1f8>
 800262a:	e7e9      	b.n	8002600 <_printf_i+0x1ec>
 800262c:	2500      	movs	r5, #0
 800262e:	e7f7      	b.n	8002620 <_printf_i+0x20c>
 8002630:	0800297d 	.word	0x0800297d
 8002634:	0800298e 	.word	0x0800298e

08002638 <memchr>:
 8002638:	b2c9      	uxtb	r1, r1
 800263a:	1882      	adds	r2, r0, r2
 800263c:	4290      	cmp	r0, r2
 800263e:	d101      	bne.n	8002644 <memchr+0xc>
 8002640:	2000      	movs	r0, #0
 8002642:	4770      	bx	lr
 8002644:	7803      	ldrb	r3, [r0, #0]
 8002646:	428b      	cmp	r3, r1
 8002648:	d0fb      	beq.n	8002642 <memchr+0xa>
 800264a:	3001      	adds	r0, #1
 800264c:	e7f6      	b.n	800263c <memchr+0x4>

0800264e <memcpy>:
 800264e:	2300      	movs	r3, #0
 8002650:	b510      	push	{r4, lr}
 8002652:	429a      	cmp	r2, r3
 8002654:	d100      	bne.n	8002658 <memcpy+0xa>
 8002656:	bd10      	pop	{r4, pc}
 8002658:	5ccc      	ldrb	r4, [r1, r3]
 800265a:	54c4      	strb	r4, [r0, r3]
 800265c:	3301      	adds	r3, #1
 800265e:	e7f8      	b.n	8002652 <memcpy+0x4>

08002660 <memmove>:
 8002660:	b510      	push	{r4, lr}
 8002662:	4288      	cmp	r0, r1
 8002664:	d902      	bls.n	800266c <memmove+0xc>
 8002666:	188b      	adds	r3, r1, r2
 8002668:	4298      	cmp	r0, r3
 800266a:	d303      	bcc.n	8002674 <memmove+0x14>
 800266c:	2300      	movs	r3, #0
 800266e:	e007      	b.n	8002680 <memmove+0x20>
 8002670:	5c8b      	ldrb	r3, [r1, r2]
 8002672:	5483      	strb	r3, [r0, r2]
 8002674:	3a01      	subs	r2, #1
 8002676:	d2fb      	bcs.n	8002670 <memmove+0x10>
 8002678:	bd10      	pop	{r4, pc}
 800267a:	5ccc      	ldrb	r4, [r1, r3]
 800267c:	54c4      	strb	r4, [r0, r3]
 800267e:	3301      	adds	r3, #1
 8002680:	429a      	cmp	r2, r3
 8002682:	d1fa      	bne.n	800267a <memmove+0x1a>
 8002684:	e7f8      	b.n	8002678 <memmove+0x18>
	...

08002688 <_free_r>:
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	0005      	movs	r5, r0
 800268c:	2900      	cmp	r1, #0
 800268e:	d010      	beq.n	80026b2 <_free_r+0x2a>
 8002690:	1f0c      	subs	r4, r1, #4
 8002692:	6823      	ldr	r3, [r4, #0]
 8002694:	2b00      	cmp	r3, #0
 8002696:	da00      	bge.n	800269a <_free_r+0x12>
 8002698:	18e4      	adds	r4, r4, r3
 800269a:	0028      	movs	r0, r5
 800269c:	f000 f918 	bl	80028d0 <__malloc_lock>
 80026a0:	4a1d      	ldr	r2, [pc, #116]	; (8002718 <_free_r+0x90>)
 80026a2:	6813      	ldr	r3, [r2, #0]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d105      	bne.n	80026b4 <_free_r+0x2c>
 80026a8:	6063      	str	r3, [r4, #4]
 80026aa:	6014      	str	r4, [r2, #0]
 80026ac:	0028      	movs	r0, r5
 80026ae:	f000 f917 	bl	80028e0 <__malloc_unlock>
 80026b2:	bd70      	pop	{r4, r5, r6, pc}
 80026b4:	42a3      	cmp	r3, r4
 80026b6:	d908      	bls.n	80026ca <_free_r+0x42>
 80026b8:	6821      	ldr	r1, [r4, #0]
 80026ba:	1860      	adds	r0, r4, r1
 80026bc:	4283      	cmp	r3, r0
 80026be:	d1f3      	bne.n	80026a8 <_free_r+0x20>
 80026c0:	6818      	ldr	r0, [r3, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	1841      	adds	r1, r0, r1
 80026c6:	6021      	str	r1, [r4, #0]
 80026c8:	e7ee      	b.n	80026a8 <_free_r+0x20>
 80026ca:	001a      	movs	r2, r3
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <_free_r+0x4e>
 80026d2:	42a3      	cmp	r3, r4
 80026d4:	d9f9      	bls.n	80026ca <_free_r+0x42>
 80026d6:	6811      	ldr	r1, [r2, #0]
 80026d8:	1850      	adds	r0, r2, r1
 80026da:	42a0      	cmp	r0, r4
 80026dc:	d10b      	bne.n	80026f6 <_free_r+0x6e>
 80026de:	6820      	ldr	r0, [r4, #0]
 80026e0:	1809      	adds	r1, r1, r0
 80026e2:	1850      	adds	r0, r2, r1
 80026e4:	6011      	str	r1, [r2, #0]
 80026e6:	4283      	cmp	r3, r0
 80026e8:	d1e0      	bne.n	80026ac <_free_r+0x24>
 80026ea:	6818      	ldr	r0, [r3, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	1841      	adds	r1, r0, r1
 80026f0:	6011      	str	r1, [r2, #0]
 80026f2:	6053      	str	r3, [r2, #4]
 80026f4:	e7da      	b.n	80026ac <_free_r+0x24>
 80026f6:	42a0      	cmp	r0, r4
 80026f8:	d902      	bls.n	8002700 <_free_r+0x78>
 80026fa:	230c      	movs	r3, #12
 80026fc:	602b      	str	r3, [r5, #0]
 80026fe:	e7d5      	b.n	80026ac <_free_r+0x24>
 8002700:	6821      	ldr	r1, [r4, #0]
 8002702:	1860      	adds	r0, r4, r1
 8002704:	4283      	cmp	r3, r0
 8002706:	d103      	bne.n	8002710 <_free_r+0x88>
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	1841      	adds	r1, r0, r1
 800270e:	6021      	str	r1, [r4, #0]
 8002710:	6063      	str	r3, [r4, #4]
 8002712:	6054      	str	r4, [r2, #4]
 8002714:	e7ca      	b.n	80026ac <_free_r+0x24>
 8002716:	46c0      	nop			; (mov r8, r8)
 8002718:	200000e8 	.word	0x200000e8

0800271c <sbrk_aligned>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	4e0f      	ldr	r6, [pc, #60]	; (800275c <sbrk_aligned+0x40>)
 8002720:	000d      	movs	r5, r1
 8002722:	6831      	ldr	r1, [r6, #0]
 8002724:	0004      	movs	r4, r0
 8002726:	2900      	cmp	r1, #0
 8002728:	d102      	bne.n	8002730 <sbrk_aligned+0x14>
 800272a:	f000 f8bf 	bl	80028ac <_sbrk_r>
 800272e:	6030      	str	r0, [r6, #0]
 8002730:	0029      	movs	r1, r5
 8002732:	0020      	movs	r0, r4
 8002734:	f000 f8ba 	bl	80028ac <_sbrk_r>
 8002738:	1c43      	adds	r3, r0, #1
 800273a:	d00a      	beq.n	8002752 <sbrk_aligned+0x36>
 800273c:	2303      	movs	r3, #3
 800273e:	1cc5      	adds	r5, r0, #3
 8002740:	439d      	bics	r5, r3
 8002742:	42a8      	cmp	r0, r5
 8002744:	d007      	beq.n	8002756 <sbrk_aligned+0x3a>
 8002746:	1a29      	subs	r1, r5, r0
 8002748:	0020      	movs	r0, r4
 800274a:	f000 f8af 	bl	80028ac <_sbrk_r>
 800274e:	1c43      	adds	r3, r0, #1
 8002750:	d101      	bne.n	8002756 <sbrk_aligned+0x3a>
 8002752:	2501      	movs	r5, #1
 8002754:	426d      	negs	r5, r5
 8002756:	0028      	movs	r0, r5
 8002758:	bd70      	pop	{r4, r5, r6, pc}
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	200000ec 	.word	0x200000ec

08002760 <_malloc_r>:
 8002760:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002762:	2203      	movs	r2, #3
 8002764:	1ccb      	adds	r3, r1, #3
 8002766:	4393      	bics	r3, r2
 8002768:	3308      	adds	r3, #8
 800276a:	0006      	movs	r6, r0
 800276c:	001f      	movs	r7, r3
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d232      	bcs.n	80027d8 <_malloc_r+0x78>
 8002772:	270c      	movs	r7, #12
 8002774:	42b9      	cmp	r1, r7
 8002776:	d831      	bhi.n	80027dc <_malloc_r+0x7c>
 8002778:	0030      	movs	r0, r6
 800277a:	f000 f8a9 	bl	80028d0 <__malloc_lock>
 800277e:	4d32      	ldr	r5, [pc, #200]	; (8002848 <_malloc_r+0xe8>)
 8002780:	682b      	ldr	r3, [r5, #0]
 8002782:	001c      	movs	r4, r3
 8002784:	2c00      	cmp	r4, #0
 8002786:	d12e      	bne.n	80027e6 <_malloc_r+0x86>
 8002788:	0039      	movs	r1, r7
 800278a:	0030      	movs	r0, r6
 800278c:	f7ff ffc6 	bl	800271c <sbrk_aligned>
 8002790:	0004      	movs	r4, r0
 8002792:	1c43      	adds	r3, r0, #1
 8002794:	d11e      	bne.n	80027d4 <_malloc_r+0x74>
 8002796:	682c      	ldr	r4, [r5, #0]
 8002798:	0025      	movs	r5, r4
 800279a:	2d00      	cmp	r5, #0
 800279c:	d14a      	bne.n	8002834 <_malloc_r+0xd4>
 800279e:	6823      	ldr	r3, [r4, #0]
 80027a0:	0029      	movs	r1, r5
 80027a2:	18e3      	adds	r3, r4, r3
 80027a4:	0030      	movs	r0, r6
 80027a6:	9301      	str	r3, [sp, #4]
 80027a8:	f000 f880 	bl	80028ac <_sbrk_r>
 80027ac:	9b01      	ldr	r3, [sp, #4]
 80027ae:	4283      	cmp	r3, r0
 80027b0:	d143      	bne.n	800283a <_malloc_r+0xda>
 80027b2:	6823      	ldr	r3, [r4, #0]
 80027b4:	3703      	adds	r7, #3
 80027b6:	1aff      	subs	r7, r7, r3
 80027b8:	2303      	movs	r3, #3
 80027ba:	439f      	bics	r7, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	2f0c      	cmp	r7, #12
 80027c0:	d200      	bcs.n	80027c4 <_malloc_r+0x64>
 80027c2:	270c      	movs	r7, #12
 80027c4:	0039      	movs	r1, r7
 80027c6:	0030      	movs	r0, r6
 80027c8:	f7ff ffa8 	bl	800271c <sbrk_aligned>
 80027cc:	1c43      	adds	r3, r0, #1
 80027ce:	d034      	beq.n	800283a <_malloc_r+0xda>
 80027d0:	6823      	ldr	r3, [r4, #0]
 80027d2:	19df      	adds	r7, r3, r7
 80027d4:	6027      	str	r7, [r4, #0]
 80027d6:	e013      	b.n	8002800 <_malloc_r+0xa0>
 80027d8:	2b00      	cmp	r3, #0
 80027da:	dacb      	bge.n	8002774 <_malloc_r+0x14>
 80027dc:	230c      	movs	r3, #12
 80027de:	2500      	movs	r5, #0
 80027e0:	6033      	str	r3, [r6, #0]
 80027e2:	0028      	movs	r0, r5
 80027e4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80027e6:	6822      	ldr	r2, [r4, #0]
 80027e8:	1bd1      	subs	r1, r2, r7
 80027ea:	d420      	bmi.n	800282e <_malloc_r+0xce>
 80027ec:	290b      	cmp	r1, #11
 80027ee:	d917      	bls.n	8002820 <_malloc_r+0xc0>
 80027f0:	19e2      	adds	r2, r4, r7
 80027f2:	6027      	str	r7, [r4, #0]
 80027f4:	42a3      	cmp	r3, r4
 80027f6:	d111      	bne.n	800281c <_malloc_r+0xbc>
 80027f8:	602a      	str	r2, [r5, #0]
 80027fa:	6863      	ldr	r3, [r4, #4]
 80027fc:	6011      	str	r1, [r2, #0]
 80027fe:	6053      	str	r3, [r2, #4]
 8002800:	0030      	movs	r0, r6
 8002802:	0025      	movs	r5, r4
 8002804:	f000 f86c 	bl	80028e0 <__malloc_unlock>
 8002808:	2207      	movs	r2, #7
 800280a:	350b      	adds	r5, #11
 800280c:	1d23      	adds	r3, r4, #4
 800280e:	4395      	bics	r5, r2
 8002810:	1aea      	subs	r2, r5, r3
 8002812:	429d      	cmp	r5, r3
 8002814:	d0e5      	beq.n	80027e2 <_malloc_r+0x82>
 8002816:	1b5b      	subs	r3, r3, r5
 8002818:	50a3      	str	r3, [r4, r2]
 800281a:	e7e2      	b.n	80027e2 <_malloc_r+0x82>
 800281c:	605a      	str	r2, [r3, #4]
 800281e:	e7ec      	b.n	80027fa <_malloc_r+0x9a>
 8002820:	6862      	ldr	r2, [r4, #4]
 8002822:	42a3      	cmp	r3, r4
 8002824:	d101      	bne.n	800282a <_malloc_r+0xca>
 8002826:	602a      	str	r2, [r5, #0]
 8002828:	e7ea      	b.n	8002800 <_malloc_r+0xa0>
 800282a:	605a      	str	r2, [r3, #4]
 800282c:	e7e8      	b.n	8002800 <_malloc_r+0xa0>
 800282e:	0023      	movs	r3, r4
 8002830:	6864      	ldr	r4, [r4, #4]
 8002832:	e7a7      	b.n	8002784 <_malloc_r+0x24>
 8002834:	002c      	movs	r4, r5
 8002836:	686d      	ldr	r5, [r5, #4]
 8002838:	e7af      	b.n	800279a <_malloc_r+0x3a>
 800283a:	230c      	movs	r3, #12
 800283c:	0030      	movs	r0, r6
 800283e:	6033      	str	r3, [r6, #0]
 8002840:	f000 f84e 	bl	80028e0 <__malloc_unlock>
 8002844:	e7cd      	b.n	80027e2 <_malloc_r+0x82>
 8002846:	46c0      	nop			; (mov r8, r8)
 8002848:	200000e8 	.word	0x200000e8

0800284c <_realloc_r>:
 800284c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800284e:	0007      	movs	r7, r0
 8002850:	000e      	movs	r6, r1
 8002852:	0014      	movs	r4, r2
 8002854:	2900      	cmp	r1, #0
 8002856:	d105      	bne.n	8002864 <_realloc_r+0x18>
 8002858:	0011      	movs	r1, r2
 800285a:	f7ff ff81 	bl	8002760 <_malloc_r>
 800285e:	0005      	movs	r5, r0
 8002860:	0028      	movs	r0, r5
 8002862:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8002864:	2a00      	cmp	r2, #0
 8002866:	d103      	bne.n	8002870 <_realloc_r+0x24>
 8002868:	f7ff ff0e 	bl	8002688 <_free_r>
 800286c:	0025      	movs	r5, r4
 800286e:	e7f7      	b.n	8002860 <_realloc_r+0x14>
 8002870:	f000 f83e 	bl	80028f0 <_malloc_usable_size_r>
 8002874:	9001      	str	r0, [sp, #4]
 8002876:	4284      	cmp	r4, r0
 8002878:	d803      	bhi.n	8002882 <_realloc_r+0x36>
 800287a:	0035      	movs	r5, r6
 800287c:	0843      	lsrs	r3, r0, #1
 800287e:	42a3      	cmp	r3, r4
 8002880:	d3ee      	bcc.n	8002860 <_realloc_r+0x14>
 8002882:	0021      	movs	r1, r4
 8002884:	0038      	movs	r0, r7
 8002886:	f7ff ff6b 	bl	8002760 <_malloc_r>
 800288a:	1e05      	subs	r5, r0, #0
 800288c:	d0e8      	beq.n	8002860 <_realloc_r+0x14>
 800288e:	9b01      	ldr	r3, [sp, #4]
 8002890:	0022      	movs	r2, r4
 8002892:	429c      	cmp	r4, r3
 8002894:	d900      	bls.n	8002898 <_realloc_r+0x4c>
 8002896:	001a      	movs	r2, r3
 8002898:	0031      	movs	r1, r6
 800289a:	0028      	movs	r0, r5
 800289c:	f7ff fed7 	bl	800264e <memcpy>
 80028a0:	0031      	movs	r1, r6
 80028a2:	0038      	movs	r0, r7
 80028a4:	f7ff fef0 	bl	8002688 <_free_r>
 80028a8:	e7da      	b.n	8002860 <_realloc_r+0x14>
	...

080028ac <_sbrk_r>:
 80028ac:	2300      	movs	r3, #0
 80028ae:	b570      	push	{r4, r5, r6, lr}
 80028b0:	4d06      	ldr	r5, [pc, #24]	; (80028cc <_sbrk_r+0x20>)
 80028b2:	0004      	movs	r4, r0
 80028b4:	0008      	movs	r0, r1
 80028b6:	602b      	str	r3, [r5, #0]
 80028b8:	f7fe f8f0 	bl	8000a9c <_sbrk>
 80028bc:	1c43      	adds	r3, r0, #1
 80028be:	d103      	bne.n	80028c8 <_sbrk_r+0x1c>
 80028c0:	682b      	ldr	r3, [r5, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d000      	beq.n	80028c8 <_sbrk_r+0x1c>
 80028c6:	6023      	str	r3, [r4, #0]
 80028c8:	bd70      	pop	{r4, r5, r6, pc}
 80028ca:	46c0      	nop			; (mov r8, r8)
 80028cc:	200000f0 	.word	0x200000f0

080028d0 <__malloc_lock>:
 80028d0:	b510      	push	{r4, lr}
 80028d2:	4802      	ldr	r0, [pc, #8]	; (80028dc <__malloc_lock+0xc>)
 80028d4:	f000 f814 	bl	8002900 <__retarget_lock_acquire_recursive>
 80028d8:	bd10      	pop	{r4, pc}
 80028da:	46c0      	nop			; (mov r8, r8)
 80028dc:	200000f4 	.word	0x200000f4

080028e0 <__malloc_unlock>:
 80028e0:	b510      	push	{r4, lr}
 80028e2:	4802      	ldr	r0, [pc, #8]	; (80028ec <__malloc_unlock+0xc>)
 80028e4:	f000 f80d 	bl	8002902 <__retarget_lock_release_recursive>
 80028e8:	bd10      	pop	{r4, pc}
 80028ea:	46c0      	nop			; (mov r8, r8)
 80028ec:	200000f4 	.word	0x200000f4

080028f0 <_malloc_usable_size_r>:
 80028f0:	1f0b      	subs	r3, r1, #4
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	1f18      	subs	r0, r3, #4
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	da01      	bge.n	80028fe <_malloc_usable_size_r+0xe>
 80028fa:	580b      	ldr	r3, [r1, r0]
 80028fc:	18c0      	adds	r0, r0, r3
 80028fe:	4770      	bx	lr

08002900 <__retarget_lock_acquire_recursive>:
 8002900:	4770      	bx	lr

08002902 <__retarget_lock_release_recursive>:
 8002902:	4770      	bx	lr

08002904 <_init>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	46c0      	nop			; (mov r8, r8)
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr

08002910 <_fini>:
 8002910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002912:	46c0      	nop			; (mov r8, r8)
 8002914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002916:	bc08      	pop	{r3}
 8002918:	469e      	mov	lr, r3
 800291a:	4770      	bx	lr
