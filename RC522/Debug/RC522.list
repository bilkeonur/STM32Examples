
RC522.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002bbc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08002c7c  08002c7c  00012c7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ce4  08002ce4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ce4  08002ce4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ce4  08002ce4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ce4  08002ce4  00012ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ce8  08002ce8  00012ce8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002cec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000009c  2000000c  08002cf8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a8  08002cf8  000200a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00005bb0  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000014fd  00000000  00000000  00025be4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000660  00000000  00000000  000270e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000005a8  00000000  00000000  00027748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001030f  00000000  00000000  00027cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008308  00000000  00000000  00037fff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0005b1bb  00000000  00000000  00040307  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0009b4c2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000154c  00000000  00000000  0009b514  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002c64 	.word	0x08002c64

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002c64 	.word	0x08002c64

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <delay>:
#include "stm32f0xx_hal.h"
#include "main.h"
#include "LCD.h"

void delay(uint32_t i)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
	for(; i != 0; i--);
 8000228:	e002      	b.n	8000230 <delay+0x10>
 800022a:	687b      	ldr	r3, [r7, #4]
 800022c:	3b01      	subs	r3, #1
 800022e:	607b      	str	r3, [r7, #4]
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b00      	cmp	r3, #0
 8000234:	d1f9      	bne.n	800022a <delay+0xa>
}
 8000236:	46c0      	nop			; (mov r8, r8)
 8000238:	46c0      	nop			; (mov r8, r8)
 800023a:	46bd      	mov	sp, r7
 800023c:	b002      	add	sp, #8
 800023e:	bd80      	pop	{r7, pc}

08000240 <lcdDelay>:

void lcdDelay(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	af00      	add	r7, sp, #0
	delay(1000);
 8000244:	23fa      	movs	r3, #250	; 0xfa
 8000246:	009b      	lsls	r3, r3, #2
 8000248:	0018      	movs	r0, r3
 800024a:	f7ff ffe9 	bl	8000220 <delay>
}
 800024e:	46c0      	nop			; (mov r8, r8)
 8000250:	46bd      	mov	sp, r7
 8000252:	bd80      	pop	{r7, pc}

08000254 <lcdCmd>:

void lcdCmd(char outChar)
{
 8000254:	b580      	push	{r7, lr}
 8000256:	b082      	sub	sp, #8
 8000258:	af00      	add	r7, sp, #0
 800025a:	0002      	movs	r2, r0
 800025c:	1dfb      	adds	r3, r7, #7
 800025e:	701a      	strb	r2, [r3, #0]
	LCD_RS_GPIO_Port->BRR  = LCD_RS_Pin;
 8000260:	4b57      	ldr	r3, [pc, #348]	; (80003c0 <lcdCmd+0x16c>)
 8000262:	2202      	movs	r2, #2
 8000264:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 8000266:	4b56      	ldr	r3, [pc, #344]	; (80003c0 <lcdCmd+0x16c>)
 8000268:	2208      	movs	r2, #8
 800026a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 800026c:	4b54      	ldr	r3, [pc, #336]	; (80003c0 <lcdCmd+0x16c>)
 800026e:	2210      	movs	r2, #16
 8000270:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 8000272:	4b53      	ldr	r3, [pc, #332]	; (80003c0 <lcdCmd+0x16c>)
 8000274:	2220      	movs	r2, #32
 8000276:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 8000278:	4b51      	ldr	r3, [pc, #324]	; (80003c0 <lcdCmd+0x16c>)
 800027a:	2240      	movs	r2, #64	; 0x40
 800027c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 800027e:	4b50      	ldr	r3, [pc, #320]	; (80003c0 <lcdCmd+0x16c>)
 8000280:	2280      	movs	r2, #128	; 0x80
 8000282:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 8000284:	f7ff ffdc 	bl	8000240 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000288:	4b4d      	ldr	r3, [pc, #308]	; (80003c0 <lcdCmd+0x16c>)
 800028a:	695a      	ldr	r2, [r3, #20]
 800028c:	4b4c      	ldr	r3, [pc, #304]	; (80003c0 <lcdCmd+0x16c>)
 800028e:	2108      	movs	r1, #8
 8000290:	430a      	orrs	r2, r1
 8000292:	615a      	str	r2, [r3, #20]

	if((outChar & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 8000294:	1dfb      	adds	r3, r7, #7
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2210      	movs	r2, #16
 800029a:	4013      	ands	r3, r2
 800029c:	d003      	beq.n	80002a6 <lcdCmd+0x52>
 800029e:	4b48      	ldr	r3, [pc, #288]	; (80003c0 <lcdCmd+0x16c>)
 80002a0:	2210      	movs	r2, #16
 80002a2:	619a      	str	r2, [r3, #24]
 80002a4:	e003      	b.n	80002ae <lcdCmd+0x5a>
 80002a6:	4b46      	ldr	r3, [pc, #280]	; (80003c0 <lcdCmd+0x16c>)
 80002a8:	2280      	movs	r2, #128	; 0x80
 80002aa:	0352      	lsls	r2, r2, #13
 80002ac:	619a      	str	r2, [r3, #24]
	if((outChar & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80002ae:	1dfb      	adds	r3, r7, #7
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	2220      	movs	r2, #32
 80002b4:	4013      	ands	r3, r2
 80002b6:	d003      	beq.n	80002c0 <lcdCmd+0x6c>
 80002b8:	4b41      	ldr	r3, [pc, #260]	; (80003c0 <lcdCmd+0x16c>)
 80002ba:	2220      	movs	r2, #32
 80002bc:	619a      	str	r2, [r3, #24]
 80002be:	e003      	b.n	80002c8 <lcdCmd+0x74>
 80002c0:	4b3f      	ldr	r3, [pc, #252]	; (80003c0 <lcdCmd+0x16c>)
 80002c2:	2280      	movs	r2, #128	; 0x80
 80002c4:	0392      	lsls	r2, r2, #14
 80002c6:	619a      	str	r2, [r3, #24]
	if((outChar & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80002c8:	1dfb      	adds	r3, r7, #7
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	2240      	movs	r2, #64	; 0x40
 80002ce:	4013      	ands	r3, r2
 80002d0:	d003      	beq.n	80002da <lcdCmd+0x86>
 80002d2:	4b3b      	ldr	r3, [pc, #236]	; (80003c0 <lcdCmd+0x16c>)
 80002d4:	2240      	movs	r2, #64	; 0x40
 80002d6:	619a      	str	r2, [r3, #24]
 80002d8:	e003      	b.n	80002e2 <lcdCmd+0x8e>
 80002da:	4b39      	ldr	r3, [pc, #228]	; (80003c0 <lcdCmd+0x16c>)
 80002dc:	2280      	movs	r2, #128	; 0x80
 80002de:	03d2      	lsls	r2, r2, #15
 80002e0:	619a      	str	r2, [r3, #24]
	if((outChar & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80002e2:	1dfb      	adds	r3, r7, #7
 80002e4:	781b      	ldrb	r3, [r3, #0]
 80002e6:	b25b      	sxtb	r3, r3
 80002e8:	2b00      	cmp	r3, #0
 80002ea:	da03      	bge.n	80002f4 <lcdCmd+0xa0>
 80002ec:	4b34      	ldr	r3, [pc, #208]	; (80003c0 <lcdCmd+0x16c>)
 80002ee:	2280      	movs	r2, #128	; 0x80
 80002f0:	619a      	str	r2, [r3, #24]
 80002f2:	e003      	b.n	80002fc <lcdCmd+0xa8>
 80002f4:	4b32      	ldr	r3, [pc, #200]	; (80003c0 <lcdCmd+0x16c>)
 80002f6:	2280      	movs	r2, #128	; 0x80
 80002f8:	0412      	lsls	r2, r2, #16
 80002fa:	619a      	str	r2, [r3, #24]

	lcdDelay();
 80002fc:	f7ff ffa0 	bl	8000240 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000300:	4b2f      	ldr	r3, [pc, #188]	; (80003c0 <lcdCmd+0x16c>)
 8000302:	2208      	movs	r2, #8
 8000304:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000306:	4b2e      	ldr	r3, [pc, #184]	; (80003c0 <lcdCmd+0x16c>)
 8000308:	2210      	movs	r2, #16
 800030a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800030c:	4b2c      	ldr	r3, [pc, #176]	; (80003c0 <lcdCmd+0x16c>)
 800030e:	2220      	movs	r2, #32
 8000310:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000312:	4b2b      	ldr	r3, [pc, #172]	; (80003c0 <lcdCmd+0x16c>)
 8000314:	2240      	movs	r2, #64	; 0x40
 8000316:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000318:	4b29      	ldr	r3, [pc, #164]	; (80003c0 <lcdCmd+0x16c>)
 800031a:	2280      	movs	r2, #128	; 0x80
 800031c:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 800031e:	f7ff ff8f 	bl	8000240 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000322:	4b27      	ldr	r3, [pc, #156]	; (80003c0 <lcdCmd+0x16c>)
 8000324:	695a      	ldr	r2, [r3, #20]
 8000326:	4b26      	ldr	r3, [pc, #152]	; (80003c0 <lcdCmd+0x16c>)
 8000328:	2108      	movs	r1, #8
 800032a:	430a      	orrs	r2, r1
 800032c:	615a      	str	r2, [r3, #20]

	if(outChar & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800032e:	1dfb      	adds	r3, r7, #7
 8000330:	781b      	ldrb	r3, [r3, #0]
 8000332:	2201      	movs	r2, #1
 8000334:	4013      	ands	r3, r2
 8000336:	d003      	beq.n	8000340 <lcdCmd+0xec>
 8000338:	4b21      	ldr	r3, [pc, #132]	; (80003c0 <lcdCmd+0x16c>)
 800033a:	2210      	movs	r2, #16
 800033c:	619a      	str	r2, [r3, #24]
 800033e:	e003      	b.n	8000348 <lcdCmd+0xf4>
 8000340:	4b1f      	ldr	r3, [pc, #124]	; (80003c0 <lcdCmd+0x16c>)
 8000342:	2280      	movs	r2, #128	; 0x80
 8000344:	0352      	lsls	r2, r2, #13
 8000346:	619a      	str	r2, [r3, #24]
	if((outChar & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000348:	1dfb      	adds	r3, r7, #7
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	2202      	movs	r2, #2
 800034e:	4013      	ands	r3, r2
 8000350:	d003      	beq.n	800035a <lcdCmd+0x106>
 8000352:	4b1b      	ldr	r3, [pc, #108]	; (80003c0 <lcdCmd+0x16c>)
 8000354:	2220      	movs	r2, #32
 8000356:	619a      	str	r2, [r3, #24]
 8000358:	e003      	b.n	8000362 <lcdCmd+0x10e>
 800035a:	4b19      	ldr	r3, [pc, #100]	; (80003c0 <lcdCmd+0x16c>)
 800035c:	2280      	movs	r2, #128	; 0x80
 800035e:	0392      	lsls	r2, r2, #14
 8000360:	619a      	str	r2, [r3, #24]
	if((outChar & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 8000362:	1dfb      	adds	r3, r7, #7
 8000364:	781b      	ldrb	r3, [r3, #0]
 8000366:	2204      	movs	r2, #4
 8000368:	4013      	ands	r3, r2
 800036a:	d003      	beq.n	8000374 <lcdCmd+0x120>
 800036c:	4b14      	ldr	r3, [pc, #80]	; (80003c0 <lcdCmd+0x16c>)
 800036e:	2240      	movs	r2, #64	; 0x40
 8000370:	619a      	str	r2, [r3, #24]
 8000372:	e003      	b.n	800037c <lcdCmd+0x128>
 8000374:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <lcdCmd+0x16c>)
 8000376:	2280      	movs	r2, #128	; 0x80
 8000378:	03d2      	lsls	r2, r2, #15
 800037a:	619a      	str	r2, [r3, #24]
	if((outChar & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 800037c:	1dfb      	adds	r3, r7, #7
 800037e:	781b      	ldrb	r3, [r3, #0]
 8000380:	2208      	movs	r2, #8
 8000382:	4013      	ands	r3, r2
 8000384:	d003      	beq.n	800038e <lcdCmd+0x13a>
 8000386:	4b0e      	ldr	r3, [pc, #56]	; (80003c0 <lcdCmd+0x16c>)
 8000388:	2280      	movs	r2, #128	; 0x80
 800038a:	619a      	str	r2, [r3, #24]
 800038c:	e003      	b.n	8000396 <lcdCmd+0x142>
 800038e:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <lcdCmd+0x16c>)
 8000390:	2280      	movs	r2, #128	; 0x80
 8000392:	0412      	lsls	r2, r2, #16
 8000394:	619a      	str	r2, [r3, #24]

	lcdDelay();
 8000396:	f7ff ff53 	bl	8000240 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 800039a:	4b09      	ldr	r3, [pc, #36]	; (80003c0 <lcdCmd+0x16c>)
 800039c:	2208      	movs	r2, #8
 800039e:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 80003a0:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <lcdCmd+0x16c>)
 80003a2:	2210      	movs	r2, #16
 80003a4:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 80003a6:	4b06      	ldr	r3, [pc, #24]	; (80003c0 <lcdCmd+0x16c>)
 80003a8:	2220      	movs	r2, #32
 80003aa:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 80003ac:	4b04      	ldr	r3, [pc, #16]	; (80003c0 <lcdCmd+0x16c>)
 80003ae:	2240      	movs	r2, #64	; 0x40
 80003b0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 80003b2:	4b03      	ldr	r3, [pc, #12]	; (80003c0 <lcdCmd+0x16c>)
 80003b4:	2280      	movs	r2, #128	; 0x80
 80003b6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b002      	add	sp, #8
 80003be:	bd80      	pop	{r7, pc}
 80003c0:	48000400 	.word	0x48000400

080003c4 <lcdCharCp>:

void lcdCharCp(char outChar)
{
 80003c4:	b580      	push	{r7, lr}
 80003c6:	b082      	sub	sp, #8
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	0002      	movs	r2, r0
 80003cc:	1dfb      	adds	r3, r7, #7
 80003ce:	701a      	strb	r2, [r3, #0]
	LCD_RS_GPIO_Port->ODR |= LCD_RS_Pin;
 80003d0:	4b59      	ldr	r3, [pc, #356]	; (8000538 <lcdCharCp+0x174>)
 80003d2:	695a      	ldr	r2, [r3, #20]
 80003d4:	4b58      	ldr	r3, [pc, #352]	; (8000538 <lcdCharCp+0x174>)
 80003d6:	2102      	movs	r1, #2
 80003d8:	430a      	orrs	r2, r1
 80003da:	615a      	str	r2, [r3, #20]

	LCD_EN_GPIO_Port->BRR  = LCD_EN_Pin;
 80003dc:	4b56      	ldr	r3, [pc, #344]	; (8000538 <lcdCharCp+0x174>)
 80003de:	2208      	movs	r2, #8
 80003e0:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR  = LCD_D4_Pin;
 80003e2:	4b55      	ldr	r3, [pc, #340]	; (8000538 <lcdCharCp+0x174>)
 80003e4:	2210      	movs	r2, #16
 80003e6:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR  = LCD_D5_Pin;
 80003e8:	4b53      	ldr	r3, [pc, #332]	; (8000538 <lcdCharCp+0x174>)
 80003ea:	2220      	movs	r2, #32
 80003ec:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR  = LCD_D6_Pin;
 80003ee:	4b52      	ldr	r3, [pc, #328]	; (8000538 <lcdCharCp+0x174>)
 80003f0:	2240      	movs	r2, #64	; 0x40
 80003f2:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR  = LCD_D7_Pin;
 80003f4:	4b50      	ldr	r3, [pc, #320]	; (8000538 <lcdCharCp+0x174>)
 80003f6:	2280      	movs	r2, #128	; 0x80
 80003f8:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 80003fa:	f7ff ff21 	bl	8000240 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 80003fe:	4b4e      	ldr	r3, [pc, #312]	; (8000538 <lcdCharCp+0x174>)
 8000400:	695a      	ldr	r2, [r3, #20]
 8000402:	4b4d      	ldr	r3, [pc, #308]	; (8000538 <lcdCharCp+0x174>)
 8000404:	2108      	movs	r1, #8
 8000406:	430a      	orrs	r2, r1
 8000408:	615a      	str	r2, [r3, #20]

	if((outChar & 0x10)>>4) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 800040a:	1dfb      	adds	r3, r7, #7
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2210      	movs	r2, #16
 8000410:	4013      	ands	r3, r2
 8000412:	d003      	beq.n	800041c <lcdCharCp+0x58>
 8000414:	4b48      	ldr	r3, [pc, #288]	; (8000538 <lcdCharCp+0x174>)
 8000416:	2210      	movs	r2, #16
 8000418:	619a      	str	r2, [r3, #24]
 800041a:	e003      	b.n	8000424 <lcdCharCp+0x60>
 800041c:	4b46      	ldr	r3, [pc, #280]	; (8000538 <lcdCharCp+0x174>)
 800041e:	2280      	movs	r2, #128	; 0x80
 8000420:	0352      	lsls	r2, r2, #13
 8000422:	619a      	str	r2, [r3, #24]
	if((outChar & 0x20)>>5) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 8000424:	1dfb      	adds	r3, r7, #7
 8000426:	781b      	ldrb	r3, [r3, #0]
 8000428:	2220      	movs	r2, #32
 800042a:	4013      	ands	r3, r2
 800042c:	d003      	beq.n	8000436 <lcdCharCp+0x72>
 800042e:	4b42      	ldr	r3, [pc, #264]	; (8000538 <lcdCharCp+0x174>)
 8000430:	2220      	movs	r2, #32
 8000432:	619a      	str	r2, [r3, #24]
 8000434:	e003      	b.n	800043e <lcdCharCp+0x7a>
 8000436:	4b40      	ldr	r3, [pc, #256]	; (8000538 <lcdCharCp+0x174>)
 8000438:	2280      	movs	r2, #128	; 0x80
 800043a:	0392      	lsls	r2, r2, #14
 800043c:	619a      	str	r2, [r3, #24]
	if((outChar & 0x40)>>6) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 800043e:	1dfb      	adds	r3, r7, #7
 8000440:	781b      	ldrb	r3, [r3, #0]
 8000442:	2240      	movs	r2, #64	; 0x40
 8000444:	4013      	ands	r3, r2
 8000446:	d003      	beq.n	8000450 <lcdCharCp+0x8c>
 8000448:	4b3b      	ldr	r3, [pc, #236]	; (8000538 <lcdCharCp+0x174>)
 800044a:	2240      	movs	r2, #64	; 0x40
 800044c:	619a      	str	r2, [r3, #24]
 800044e:	e003      	b.n	8000458 <lcdCharCp+0x94>
 8000450:	4b39      	ldr	r3, [pc, #228]	; (8000538 <lcdCharCp+0x174>)
 8000452:	2280      	movs	r2, #128	; 0x80
 8000454:	03d2      	lsls	r2, r2, #15
 8000456:	619a      	str	r2, [r3, #24]
	if((outChar & 0x80)>>7) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 8000458:	1dfb      	adds	r3, r7, #7
 800045a:	781b      	ldrb	r3, [r3, #0]
 800045c:	b25b      	sxtb	r3, r3
 800045e:	2b00      	cmp	r3, #0
 8000460:	da03      	bge.n	800046a <lcdCharCp+0xa6>
 8000462:	4b35      	ldr	r3, [pc, #212]	; (8000538 <lcdCharCp+0x174>)
 8000464:	2280      	movs	r2, #128	; 0x80
 8000466:	619a      	str	r2, [r3, #24]
 8000468:	e003      	b.n	8000472 <lcdCharCp+0xae>
 800046a:	4b33      	ldr	r3, [pc, #204]	; (8000538 <lcdCharCp+0x174>)
 800046c:	2280      	movs	r2, #128	; 0x80
 800046e:	0412      	lsls	r2, r2, #16
 8000470:	619a      	str	r2, [r3, #24]

	lcdDelay();
 8000472:	f7ff fee5 	bl	8000240 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000476:	4b30      	ldr	r3, [pc, #192]	; (8000538 <lcdCharCp+0x174>)
 8000478:	2208      	movs	r2, #8
 800047a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 800047c:	4b2e      	ldr	r3, [pc, #184]	; (8000538 <lcdCharCp+0x174>)
 800047e:	2210      	movs	r2, #16
 8000480:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 8000482:	4b2d      	ldr	r3, [pc, #180]	; (8000538 <lcdCharCp+0x174>)
 8000484:	2220      	movs	r2, #32
 8000486:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000488:	4b2b      	ldr	r3, [pc, #172]	; (8000538 <lcdCharCp+0x174>)
 800048a:	2240      	movs	r2, #64	; 0x40
 800048c:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 800048e:	4b2a      	ldr	r3, [pc, #168]	; (8000538 <lcdCharCp+0x174>)
 8000490:	2280      	movs	r2, #128	; 0x80
 8000492:	629a      	str	r2, [r3, #40]	; 0x28

	lcdDelay();
 8000494:	f7ff fed4 	bl	8000240 <lcdDelay>

	LCD_EN_GPIO_Port->ODR |= LCD_EN_Pin;
 8000498:	4b27      	ldr	r3, [pc, #156]	; (8000538 <lcdCharCp+0x174>)
 800049a:	695a      	ldr	r2, [r3, #20]
 800049c:	4b26      	ldr	r3, [pc, #152]	; (8000538 <lcdCharCp+0x174>)
 800049e:	2108      	movs	r1, #8
 80004a0:	430a      	orrs	r2, r1
 80004a2:	615a      	str	r2, [r3, #20]

	if(outChar & 0x01) LCD_D4_GPIO_Port->BSRR = LCD_D4_Pin; else LCD_D4_GPIO_Port->BSRR = (uint32_t)LCD_D4_Pin << 16;
 80004a4:	1dfb      	adds	r3, r7, #7
 80004a6:	781b      	ldrb	r3, [r3, #0]
 80004a8:	2201      	movs	r2, #1
 80004aa:	4013      	ands	r3, r2
 80004ac:	d003      	beq.n	80004b6 <lcdCharCp+0xf2>
 80004ae:	4b22      	ldr	r3, [pc, #136]	; (8000538 <lcdCharCp+0x174>)
 80004b0:	2210      	movs	r2, #16
 80004b2:	619a      	str	r2, [r3, #24]
 80004b4:	e003      	b.n	80004be <lcdCharCp+0xfa>
 80004b6:	4b20      	ldr	r3, [pc, #128]	; (8000538 <lcdCharCp+0x174>)
 80004b8:	2280      	movs	r2, #128	; 0x80
 80004ba:	0352      	lsls	r2, r2, #13
 80004bc:	619a      	str	r2, [r3, #24]
	if((outChar & 0x02)>>1) LCD_D5_GPIO_Port->BSRR = LCD_D5_Pin; else LCD_D5_GPIO_Port->BSRR = (uint32_t)LCD_D5_Pin << 16;
 80004be:	1dfb      	adds	r3, r7, #7
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	2202      	movs	r2, #2
 80004c4:	4013      	ands	r3, r2
 80004c6:	d003      	beq.n	80004d0 <lcdCharCp+0x10c>
 80004c8:	4b1b      	ldr	r3, [pc, #108]	; (8000538 <lcdCharCp+0x174>)
 80004ca:	2220      	movs	r2, #32
 80004cc:	619a      	str	r2, [r3, #24]
 80004ce:	e003      	b.n	80004d8 <lcdCharCp+0x114>
 80004d0:	4b19      	ldr	r3, [pc, #100]	; (8000538 <lcdCharCp+0x174>)
 80004d2:	2280      	movs	r2, #128	; 0x80
 80004d4:	0392      	lsls	r2, r2, #14
 80004d6:	619a      	str	r2, [r3, #24]
	if((outChar & 0x04)>>2) LCD_D6_GPIO_Port->BSRR = LCD_D6_Pin; else LCD_D6_GPIO_Port->BSRR = (uint32_t)LCD_D6_Pin << 16;
 80004d8:	1dfb      	adds	r3, r7, #7
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2204      	movs	r2, #4
 80004de:	4013      	ands	r3, r2
 80004e0:	d003      	beq.n	80004ea <lcdCharCp+0x126>
 80004e2:	4b15      	ldr	r3, [pc, #84]	; (8000538 <lcdCharCp+0x174>)
 80004e4:	2240      	movs	r2, #64	; 0x40
 80004e6:	619a      	str	r2, [r3, #24]
 80004e8:	e003      	b.n	80004f2 <lcdCharCp+0x12e>
 80004ea:	4b13      	ldr	r3, [pc, #76]	; (8000538 <lcdCharCp+0x174>)
 80004ec:	2280      	movs	r2, #128	; 0x80
 80004ee:	03d2      	lsls	r2, r2, #15
 80004f0:	619a      	str	r2, [r3, #24]
	if((outChar & 0x08)>>3) LCD_D7_GPIO_Port->BSRR = LCD_D7_Pin; else LCD_D7_GPIO_Port->BSRR = (uint32_t)LCD_D7_Pin << 16;
 80004f2:	1dfb      	adds	r3, r7, #7
 80004f4:	781b      	ldrb	r3, [r3, #0]
 80004f6:	2208      	movs	r2, #8
 80004f8:	4013      	ands	r3, r2
 80004fa:	d003      	beq.n	8000504 <lcdCharCp+0x140>
 80004fc:	4b0e      	ldr	r3, [pc, #56]	; (8000538 <lcdCharCp+0x174>)
 80004fe:	2280      	movs	r2, #128	; 0x80
 8000500:	619a      	str	r2, [r3, #24]
 8000502:	e003      	b.n	800050c <lcdCharCp+0x148>
 8000504:	4b0c      	ldr	r3, [pc, #48]	; (8000538 <lcdCharCp+0x174>)
 8000506:	2280      	movs	r2, #128	; 0x80
 8000508:	0412      	lsls	r2, r2, #16
 800050a:	619a      	str	r2, [r3, #24]

	lcdDelay();
 800050c:	f7ff fe98 	bl	8000240 <lcdDelay>

	LCD_EN_GPIO_Port->BRR = LCD_EN_Pin;
 8000510:	4b09      	ldr	r3, [pc, #36]	; (8000538 <lcdCharCp+0x174>)
 8000512:	2208      	movs	r2, #8
 8000514:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D4_GPIO_Port->BRR = LCD_D4_Pin;
 8000516:	4b08      	ldr	r3, [pc, #32]	; (8000538 <lcdCharCp+0x174>)
 8000518:	2210      	movs	r2, #16
 800051a:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D5_GPIO_Port->BRR = LCD_D5_Pin;
 800051c:	4b06      	ldr	r3, [pc, #24]	; (8000538 <lcdCharCp+0x174>)
 800051e:	2220      	movs	r2, #32
 8000520:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D6_GPIO_Port->BRR = LCD_D6_Pin;
 8000522:	4b05      	ldr	r3, [pc, #20]	; (8000538 <lcdCharCp+0x174>)
 8000524:	2240      	movs	r2, #64	; 0x40
 8000526:	629a      	str	r2, [r3, #40]	; 0x28
	LCD_D7_GPIO_Port->BRR = LCD_D7_Pin;
 8000528:	4b03      	ldr	r3, [pc, #12]	; (8000538 <lcdCharCp+0x174>)
 800052a:	2280      	movs	r2, #128	; 0x80
 800052c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800052e:	46c0      	nop			; (mov r8, r8)
 8000530:	46bd      	mov	sp, r7
 8000532:	b002      	add	sp, #8
 8000534:	bd80      	pop	{r7, pc}
 8000536:	46c0      	nop			; (mov r8, r8)
 8000538:	48000400 	.word	0x48000400

0800053c <lcdOutCp>:

void lcdOutCp(char *outChar)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	b082      	sub	sp, #8
 8000540:	af00      	add	r7, sp, #0
 8000542:	6078      	str	r0, [r7, #4]
	while(*outChar)
 8000544:	e008      	b.n	8000558 <lcdOutCp+0x1c>
	{
		lcdDelay();
 8000546:	f7ff fe7b 	bl	8000240 <lcdDelay>
		lcdCharCp(*outChar++);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	1c5a      	adds	r2, r3, #1
 800054e:	607a      	str	r2, [r7, #4]
 8000550:	781b      	ldrb	r3, [r3, #0]
 8000552:	0018      	movs	r0, r3
 8000554:	f7ff ff36 	bl	80003c4 <lcdCharCp>
	while(*outChar)
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b00      	cmp	r3, #0
 800055e:	d1f2      	bne.n	8000546 <lcdOutCp+0xa>
	}

	lcdDelay();
 8000560:	f7ff fe6e 	bl	8000240 <lcdDelay>
}
 8000564:	46c0      	nop			; (mov r8, r8)
 8000566:	46bd      	mov	sp, r7
 8000568:	b002      	add	sp, #8
 800056a:	bd80      	pop	{r7, pc}

0800056c <lcdInit>:

void lcdInit(char bits, char font, char lines)
{
 800056c:	b590      	push	{r4, r7, lr}
 800056e:	b083      	sub	sp, #12
 8000570:	af00      	add	r7, sp, #0
 8000572:	0004      	movs	r4, r0
 8000574:	0008      	movs	r0, r1
 8000576:	0011      	movs	r1, r2
 8000578:	1dfb      	adds	r3, r7, #7
 800057a:	1c22      	adds	r2, r4, #0
 800057c:	701a      	strb	r2, [r3, #0]
 800057e:	1dbb      	adds	r3, r7, #6
 8000580:	1c02      	adds	r2, r0, #0
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	1d7b      	adds	r3, r7, #5
 8000586:	1c0a      	adds	r2, r1, #0
 8000588:	701a      	strb	r2, [r3, #0]
	HAL_Delay(250);
 800058a:	20fa      	movs	r0, #250	; 0xfa
 800058c:	f000 fd88 	bl	80010a0 <HAL_Delay>
	lcdCmd(_RETURN_HOME);
 8000590:	2002      	movs	r0, #2
 8000592:	f7ff fe5f 	bl	8000254 <lcdCmd>
    HAL_Delay(50);
 8000596:	2032      	movs	r0, #50	; 0x32
 8000598:	f000 fd82 	bl	80010a0 <HAL_Delay>
    lcdCmd(0x20 | bits | font | lines);
 800059c:	1dfa      	adds	r2, r7, #7
 800059e:	1dbb      	adds	r3, r7, #6
 80005a0:	7812      	ldrb	r2, [r2, #0]
 80005a2:	781b      	ldrb	r3, [r3, #0]
 80005a4:	4313      	orrs	r3, r2
 80005a6:	b2da      	uxtb	r2, r3
 80005a8:	1d7b      	adds	r3, r7, #5
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	4313      	orrs	r3, r2
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	2220      	movs	r2, #32
 80005b2:	4313      	orrs	r3, r2
 80005b4:	b2db      	uxtb	r3, r3
 80005b6:	0018      	movs	r0, r3
 80005b8:	f7ff fe4c 	bl	8000254 <lcdCmd>
    HAL_Delay(50);
 80005bc:	2032      	movs	r0, #50	; 0x32
 80005be:	f000 fd6f 	bl	80010a0 <HAL_Delay>
    lcdCmd(_LCD_INIT);
 80005c2:	2006      	movs	r0, #6
 80005c4:	f7ff fe46 	bl	8000254 <lcdCmd>
    HAL_Delay(50);
 80005c8:	2032      	movs	r0, #50	; 0x32
 80005ca:	f000 fd69 	bl	80010a0 <HAL_Delay>
    lcdCmd(0x0E);
 80005ce:	200e      	movs	r0, #14
 80005d0:	f7ff fe40 	bl	8000254 <lcdCmd>
    HAL_Delay(50);
 80005d4:	2032      	movs	r0, #50	; 0x32
 80005d6:	f000 fd63 	bl	80010a0 <HAL_Delay>
    lcdCmd(0x0C);
 80005da:	200c      	movs	r0, #12
 80005dc:	f7ff fe3a 	bl	8000254 <lcdCmd>
    HAL_Delay(50);
 80005e0:	2032      	movs	r0, #50	; 0x32
 80005e2:	f000 fd5d 	bl	80010a0 <HAL_Delay>
    lcdCmd(0x01);
 80005e6:	2001      	movs	r0, #1
 80005e8:	f7ff fe34 	bl	8000254 <lcdCmd>
    HAL_Delay(100);
 80005ec:	2064      	movs	r0, #100	; 0x64
 80005ee:	f000 fd57 	bl	80010a0 <HAL_Delay>
}
 80005f2:	46c0      	nop			; (mov r8, r8)
 80005f4:	46bd      	mov	sp, r7
 80005f6:	b003      	add	sp, #12
 80005f8:	bd90      	pop	{r4, r7, pc}

080005fa <lcdGotoXY>:

void lcdGotoXY(unsigned char row, unsigned char column)
{
 80005fa:	b580      	push	{r7, lr}
 80005fc:	b082      	sub	sp, #8
 80005fe:	af00      	add	r7, sp, #0
 8000600:	0002      	movs	r2, r0
 8000602:	1dfb      	adds	r3, r7, #7
 8000604:	701a      	strb	r2, [r3, #0]
 8000606:	1dbb      	adds	r3, r7, #6
 8000608:	1c0a      	adds	r2, r1, #0
 800060a:	701a      	strb	r2, [r3, #0]
	if(row == 1)
 800060c:	1dfb      	adds	r3, r7, #7
 800060e:	781b      	ldrb	r3, [r3, #0]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d107      	bne.n	8000624 <lcdGotoXY+0x2a>
	{
		lcdCmd(0x80 + (column - 1));
 8000614:	1dbb      	adds	r3, r7, #6
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	337f      	adds	r3, #127	; 0x7f
 800061a:	b2db      	uxtb	r3, r3
 800061c:	0018      	movs	r0, r3
 800061e:	f7ff fe19 	bl	8000254 <lcdCmd>
	}
	else if(row == 2)
	{
		lcdCmd(0xC0 + (column - 1));
	}
}
 8000622:	e00a      	b.n	800063a <lcdGotoXY+0x40>
	else if(row == 2)
 8000624:	1dfb      	adds	r3, r7, #7
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b02      	cmp	r3, #2
 800062a:	d106      	bne.n	800063a <lcdGotoXY+0x40>
		lcdCmd(0xC0 + (column - 1));
 800062c:	1dbb      	adds	r3, r7, #6
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3b41      	subs	r3, #65	; 0x41
 8000632:	b2db      	uxtb	r3, r3
 8000634:	0018      	movs	r0, r3
 8000636:	f7ff fe0d 	bl	8000254 <lcdCmd>
}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	b002      	add	sp, #8
 8000640:	bd80      	pop	{r7, pc}

08000642 <lcdPrint>:
	lcdGotoXY(row, column);
	lcdCharCp(outChar);
}

void lcdPrint(unsigned char row, unsigned char column, char *outChar)
{
 8000642:	b580      	push	{r7, lr}
 8000644:	b082      	sub	sp, #8
 8000646:	af00      	add	r7, sp, #0
 8000648:	603a      	str	r2, [r7, #0]
 800064a:	1dfb      	adds	r3, r7, #7
 800064c:	1c02      	adds	r2, r0, #0
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	1dbb      	adds	r3, r7, #6
 8000652:	1c0a      	adds	r2, r1, #0
 8000654:	701a      	strb	r2, [r3, #0]
	lcdGotoXY(row, column);
 8000656:	1dbb      	adds	r3, r7, #6
 8000658:	781a      	ldrb	r2, [r3, #0]
 800065a:	1dfb      	adds	r3, r7, #7
 800065c:	781b      	ldrb	r3, [r3, #0]
 800065e:	0011      	movs	r1, r2
 8000660:	0018      	movs	r0, r3
 8000662:	f7ff ffca 	bl	80005fa <lcdGotoXY>
	lcdOutCp(outChar);
 8000666:	683b      	ldr	r3, [r7, #0]
 8000668:	0018      	movs	r0, r3
 800066a:	f7ff ff67 	bl	800053c <lcdOutCp>
}
 800066e:	46c0      	nop			; (mov r8, r8)
 8000670:	46bd      	mov	sp, r7
 8000672:	b002      	add	sp, #8
 8000674:	bd80      	pop	{r7, pc}

08000676 <lcdClear>:

void lcdClear(void)
{
 8000676:	b580      	push	{r7, lr}
 8000678:	af00      	add	r7, sp, #0
	lcdCmd(_CLEAR);
 800067a:	2001      	movs	r0, #1
 800067c:	f7ff fdea 	bl	8000254 <lcdCmd>
	HAL_Delay(2);
 8000680:	2002      	movs	r0, #2
 8000682:	f000 fd0d 	bl	80010a0 <HAL_Delay>
}
 8000686:	46c0      	nop			; (mov r8, r8)
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}

0800068c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	b082      	sub	sp, #8
 8000690:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000692:	f000 fca1 	bl	8000fd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000696:	f000 f87d 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800069a:	f000 f8f5 	bl	8000888 <MX_GPIO_Init>
  MX_SPI1_Init();
 800069e:	f000 f8b5 	bl	800080c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(RC522_RST_GPIO_Port, RC522_RST_Pin, GPIO_PIN_SET);
 80006a2:	2380      	movs	r3, #128	; 0x80
 80006a4:	0059      	lsls	r1, r3, #1
 80006a6:	2390      	movs	r3, #144	; 0x90
 80006a8:	05db      	lsls	r3, r3, #23
 80006aa:	2201      	movs	r2, #1
 80006ac:	0018      	movs	r0, r3
 80006ae:	f000 ff3f 	bl	8001530 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 80006b2:	2064      	movs	r0, #100	; 0x64
 80006b4:	f000 fcf4 	bl	80010a0 <HAL_Delay>
  MFRC522_Init();
 80006b8:	f000 fa29 	bl	8000b0e <MFRC522_Init>
  lcdInit(_LCD_4BIT,_LCD_FONT_5x8,_LCD_2LINE);
 80006bc:	2208      	movs	r2, #8
 80006be:	2100      	movs	r1, #0
 80006c0:	2000      	movs	r0, #0
 80006c2:	f7ff ff53 	bl	800056c <lcdInit>
  lcdClear();
 80006c6:	f7ff ffd6 	bl	8000676 <lcdClear>
  lcdPrint(1,1,"ONUR BiLKE");
 80006ca:	4b2c      	ldr	r3, [pc, #176]	; (800077c <main+0xf0>)
 80006cc:	001a      	movs	r2, r3
 80006ce:	2101      	movs	r1, #1
 80006d0:	2001      	movs	r0, #1
 80006d2:	f7ff ffb6 	bl	8000642 <lcdPrint>
  lcdPrint(2,1,"STM32 EXAMPLES");
 80006d6:	4b2a      	ldr	r3, [pc, #168]	; (8000780 <main+0xf4>)
 80006d8:	001a      	movs	r2, r3
 80006da:	2101      	movs	r1, #1
 80006dc:	2002      	movs	r0, #2
 80006de:	f7ff ffb0 	bl	8000642 <lcdPrint>

  status = Read_MFRC522(VersionReg);
 80006e2:	2037      	movs	r0, #55	; 0x37
 80006e4:	f000 f97e 	bl	80009e4 <Read_MFRC522>
 80006e8:	0003      	movs	r3, r0
 80006ea:	001a      	movs	r2, r3
 80006ec:	4b25      	ldr	r3, [pc, #148]	; (8000784 <main+0xf8>)
 80006ee:	701a      	strb	r2, [r3, #0]

  for (int i = 0; i < 16; i++)
 80006f0:	2300      	movs	r3, #0
 80006f2:	607b      	str	r3, [r7, #4]
 80006f4:	e007      	b.n	8000706 <main+0x7a>
  {
	  cardstr[i] = 0;
 80006f6:	4a24      	ldr	r2, [pc, #144]	; (8000788 <main+0xfc>)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	18d3      	adds	r3, r2, r3
 80006fc:	2200      	movs	r2, #0
 80006fe:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < 16; i++)
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	3301      	adds	r3, #1
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	2b0f      	cmp	r3, #15
 800070a:	ddf4      	ble.n	80006f6 <main+0x6a>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	status = MFRC522_Request(PICC_REQIDL, cardstr);
 800070c:	4b1e      	ldr	r3, [pc, #120]	; (8000788 <main+0xfc>)
 800070e:	0019      	movs	r1, r3
 8000710:	2026      	movs	r0, #38	; 0x26
 8000712:	f000 fa1d 	bl	8000b50 <MFRC522_Request>
 8000716:	0003      	movs	r3, r0
 8000718:	001a      	movs	r2, r3
 800071a:	4b1a      	ldr	r3, [pc, #104]	; (8000784 <main+0xf8>)
 800071c:	701a      	strb	r2, [r3, #0]
	status = MFRC522_Anticoll(cardstr);
 800071e:	4b1a      	ldr	r3, [pc, #104]	; (8000788 <main+0xfc>)
 8000720:	0018      	movs	r0, r3
 8000722:	f000 fb4d 	bl	8000dc0 <MFRC522_Anticoll>
 8000726:	0003      	movs	r3, r0
 8000728:	001a      	movs	r2, r3
 800072a:	4b16      	ldr	r3, [pc, #88]	; (8000784 <main+0xf8>)
 800072c:	701a      	strb	r2, [r3, #0]

	if(status == MI_OK)
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <main+0xf8>)
 8000730:	781b      	ldrb	r3, [r3, #0]
 8000732:	2b00      	cmp	r3, #0
 8000734:	d1ea      	bne.n	800070c <main+0x80>
	{
		if(cardstr[0]==41 && cardstr[1]==7 && cardstr[2]==181 && cardstr[3]==177)
 8000736:	4b14      	ldr	r3, [pc, #80]	; (8000788 <main+0xfc>)
 8000738:	781b      	ldrb	r3, [r3, #0]
 800073a:	2b29      	cmp	r3, #41	; 0x29
 800073c:	d114      	bne.n	8000768 <main+0xdc>
 800073e:	4b12      	ldr	r3, [pc, #72]	; (8000788 <main+0xfc>)
 8000740:	785b      	ldrb	r3, [r3, #1]
 8000742:	2b07      	cmp	r3, #7
 8000744:	d110      	bne.n	8000768 <main+0xdc>
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <main+0xfc>)
 8000748:	789b      	ldrb	r3, [r3, #2]
 800074a:	2bb5      	cmp	r3, #181	; 0xb5
 800074c:	d10c      	bne.n	8000768 <main+0xdc>
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <main+0xfc>)
 8000750:	78db      	ldrb	r3, [r3, #3]
 8000752:	2bb1      	cmp	r3, #177	; 0xb1
 8000754:	d108      	bne.n	8000768 <main+0xdc>
		{
			lcdClear();
 8000756:	f7ff ff8e 	bl	8000676 <lcdClear>
			lcdPrint(1,1,"CORRECT CARD");
 800075a:	4b0c      	ldr	r3, [pc, #48]	; (800078c <main+0x100>)
 800075c:	001a      	movs	r2, r3
 800075e:	2101      	movs	r1, #1
 8000760:	2001      	movs	r0, #1
 8000762:	f7ff ff6e 	bl	8000642 <lcdPrint>
 8000766:	e007      	b.n	8000778 <main+0xec>
		}
		else
		{
			lcdClear();
 8000768:	f7ff ff85 	bl	8000676 <lcdClear>
			lcdPrint(1,1,"WRONG CARD");
 800076c:	4b08      	ldr	r3, [pc, #32]	; (8000790 <main+0x104>)
 800076e:	001a      	movs	r2, r3
 8000770:	2101      	movs	r1, #1
 8000772:	2001      	movs	r0, #1
 8000774:	f7ff ff65 	bl	8000642 <lcdPrint>
	status = MFRC522_Request(PICC_REQIDL, cardstr);
 8000778:	e7c8      	b.n	800070c <main+0x80>
 800077a:	46c0      	nop			; (mov r8, r8)
 800077c:	08002c7c 	.word	0x08002c7c
 8000780:	08002c88 	.word	0x08002c88
 8000784:	20000028 	.word	0x20000028
 8000788:	2000002c 	.word	0x2000002c
 800078c:	08002c98 	.word	0x08002c98
 8000790:	08002ca8 	.word	0x08002ca8

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b590      	push	{r4, r7, lr}
 8000796:	b091      	sub	sp, #68	; 0x44
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	2410      	movs	r4, #16
 800079c:	193b      	adds	r3, r7, r4
 800079e:	0018      	movs	r0, r3
 80007a0:	2330      	movs	r3, #48	; 0x30
 80007a2:	001a      	movs	r2, r3
 80007a4:	2100      	movs	r1, #0
 80007a6:	f002 fa55 	bl	8002c54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007aa:	003b      	movs	r3, r7
 80007ac:	0018      	movs	r0, r3
 80007ae:	2310      	movs	r3, #16
 80007b0:	001a      	movs	r2, r3
 80007b2:	2100      	movs	r1, #0
 80007b4:	f002 fa4e 	bl	8002c54 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007b8:	193b      	adds	r3, r7, r4
 80007ba:	2201      	movs	r2, #1
 80007bc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007be:	193b      	adds	r3, r7, r4
 80007c0:	2201      	movs	r2, #1
 80007c2:	605a      	str	r2, [r3, #4]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80007c4:	193b      	adds	r3, r7, r4
 80007c6:	2200      	movs	r2, #0
 80007c8:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ca:	193b      	adds	r3, r7, r4
 80007cc:	0018      	movs	r0, r3
 80007ce:	f000 fecd 	bl	800156c <HAL_RCC_OscConfig>
 80007d2:	1e03      	subs	r3, r0, #0
 80007d4:	d001      	beq.n	80007da <SystemClock_Config+0x46>
  {
    Error_Handler();
 80007d6:	f000 f8c9 	bl	800096c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007da:	003b      	movs	r3, r7
 80007dc:	2207      	movs	r2, #7
 80007de:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 80007e0:	003b      	movs	r3, r7
 80007e2:	2201      	movs	r2, #1
 80007e4:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007e6:	003b      	movs	r3, r7
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007ec:	003b      	movs	r3, r7
 80007ee:	2200      	movs	r2, #0
 80007f0:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80007f2:	003b      	movs	r3, r7
 80007f4:	2100      	movs	r1, #0
 80007f6:	0018      	movs	r0, r3
 80007f8:	f001 f9d2 	bl	8001ba0 <HAL_RCC_ClockConfig>
 80007fc:	1e03      	subs	r3, r0, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000800:	f000 f8b4 	bl	800096c <Error_Handler>
  }
}
 8000804:	46c0      	nop			; (mov r8, r8)
 8000806:	46bd      	mov	sp, r7
 8000808:	b011      	add	sp, #68	; 0x44
 800080a:	bd90      	pop	{r4, r7, pc}

0800080c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000810:	4b1b      	ldr	r3, [pc, #108]	; (8000880 <MX_SPI1_Init+0x74>)
 8000812:	4a1c      	ldr	r2, [pc, #112]	; (8000884 <MX_SPI1_Init+0x78>)
 8000814:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000816:	4b1a      	ldr	r3, [pc, #104]	; (8000880 <MX_SPI1_Init+0x74>)
 8000818:	2282      	movs	r2, #130	; 0x82
 800081a:	0052      	lsls	r2, r2, #1
 800081c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081e:	4b18      	ldr	r3, [pc, #96]	; (8000880 <MX_SPI1_Init+0x74>)
 8000820:	2200      	movs	r2, #0
 8000822:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000824:	4b16      	ldr	r3, [pc, #88]	; (8000880 <MX_SPI1_Init+0x74>)
 8000826:	22e0      	movs	r2, #224	; 0xe0
 8000828:	00d2      	lsls	r2, r2, #3
 800082a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800082c:	4b14      	ldr	r3, [pc, #80]	; (8000880 <MX_SPI1_Init+0x74>)
 800082e:	2200      	movs	r2, #0
 8000830:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000832:	4b13      	ldr	r3, [pc, #76]	; (8000880 <MX_SPI1_Init+0x74>)
 8000834:	2200      	movs	r2, #0
 8000836:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000838:	4b11      	ldr	r3, [pc, #68]	; (8000880 <MX_SPI1_Init+0x74>)
 800083a:	2280      	movs	r2, #128	; 0x80
 800083c:	0092      	lsls	r2, r2, #2
 800083e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000840:	4b0f      	ldr	r3, [pc, #60]	; (8000880 <MX_SPI1_Init+0x74>)
 8000842:	2210      	movs	r2, #16
 8000844:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000846:	4b0e      	ldr	r3, [pc, #56]	; (8000880 <MX_SPI1_Init+0x74>)
 8000848:	2200      	movs	r2, #0
 800084a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800084c:	4b0c      	ldr	r3, [pc, #48]	; (8000880 <MX_SPI1_Init+0x74>)
 800084e:	2200      	movs	r2, #0
 8000850:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000852:	4b0b      	ldr	r3, [pc, #44]	; (8000880 <MX_SPI1_Init+0x74>)
 8000854:	2200      	movs	r2, #0
 8000856:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000858:	4b09      	ldr	r3, [pc, #36]	; (8000880 <MX_SPI1_Init+0x74>)
 800085a:	2207      	movs	r2, #7
 800085c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800085e:	4b08      	ldr	r3, [pc, #32]	; (8000880 <MX_SPI1_Init+0x74>)
 8000860:	2200      	movs	r2, #0
 8000862:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000864:	4b06      	ldr	r3, [pc, #24]	; (8000880 <MX_SPI1_Init+0x74>)
 8000866:	2208      	movs	r2, #8
 8000868:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800086a:	4b05      	ldr	r3, [pc, #20]	; (8000880 <MX_SPI1_Init+0x74>)
 800086c:	0018      	movs	r0, r3
 800086e:	f001 facb 	bl	8001e08 <HAL_SPI_Init>
 8000872:	1e03      	subs	r3, r0, #0
 8000874:	d001      	beq.n	800087a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000876:	f000 f879 	bl	800096c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800087a:	46c0      	nop			; (mov r8, r8)
 800087c:	46bd      	mov	sp, r7
 800087e:	bd80      	pop	{r7, pc}
 8000880:	20000040 	.word	0x20000040
 8000884:	40013000 	.word	0x40013000

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b089      	sub	sp, #36	; 0x24
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	240c      	movs	r4, #12
 8000890:	193b      	adds	r3, r7, r4
 8000892:	0018      	movs	r0, r3
 8000894:	2314      	movs	r3, #20
 8000896:	001a      	movs	r2, r3
 8000898:	2100      	movs	r1, #0
 800089a:	f002 f9db 	bl	8002c54 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800089e:	4b31      	ldr	r3, [pc, #196]	; (8000964 <MX_GPIO_Init+0xdc>)
 80008a0:	695a      	ldr	r2, [r3, #20]
 80008a2:	4b30      	ldr	r3, [pc, #192]	; (8000964 <MX_GPIO_Init+0xdc>)
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	03c9      	lsls	r1, r1, #15
 80008a8:	430a      	orrs	r2, r1
 80008aa:	615a      	str	r2, [r3, #20]
 80008ac:	4b2d      	ldr	r3, [pc, #180]	; (8000964 <MX_GPIO_Init+0xdc>)
 80008ae:	695a      	ldr	r2, [r3, #20]
 80008b0:	2380      	movs	r3, #128	; 0x80
 80008b2:	03db      	lsls	r3, r3, #15
 80008b4:	4013      	ands	r3, r2
 80008b6:	60bb      	str	r3, [r7, #8]
 80008b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <MX_GPIO_Init+0xdc>)
 80008bc:	695a      	ldr	r2, [r3, #20]
 80008be:	4b29      	ldr	r3, [pc, #164]	; (8000964 <MX_GPIO_Init+0xdc>)
 80008c0:	2180      	movs	r1, #128	; 0x80
 80008c2:	0289      	lsls	r1, r1, #10
 80008c4:	430a      	orrs	r2, r1
 80008c6:	615a      	str	r2, [r3, #20]
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <MX_GPIO_Init+0xdc>)
 80008ca:	695a      	ldr	r2, [r3, #20]
 80008cc:	2380      	movs	r3, #128	; 0x80
 80008ce:	029b      	lsls	r3, r3, #10
 80008d0:	4013      	ands	r3, r2
 80008d2:	607b      	str	r3, [r7, #4]
 80008d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b23      	ldr	r3, [pc, #140]	; (8000964 <MX_GPIO_Init+0xdc>)
 80008d8:	695a      	ldr	r2, [r3, #20]
 80008da:	4b22      	ldr	r3, [pc, #136]	; (8000964 <MX_GPIO_Init+0xdc>)
 80008dc:	2180      	movs	r1, #128	; 0x80
 80008de:	02c9      	lsls	r1, r1, #11
 80008e0:	430a      	orrs	r2, r1
 80008e2:	615a      	str	r2, [r3, #20]
 80008e4:	4b1f      	ldr	r3, [pc, #124]	; (8000964 <MX_GPIO_Init+0xdc>)
 80008e6:	695a      	ldr	r2, [r3, #20]
 80008e8:	2380      	movs	r3, #128	; 0x80
 80008ea:	02db      	lsls	r3, r3, #11
 80008ec:	4013      	ands	r3, r2
 80008ee:	603b      	str	r3, [r7, #0]
 80008f0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, RC522_CS_Pin|RC522_RST_Pin, GPIO_PIN_RESET);
 80008f2:	2388      	movs	r3, #136	; 0x88
 80008f4:	0059      	lsls	r1, r3, #1
 80008f6:	2390      	movs	r3, #144	; 0x90
 80008f8:	05db      	lsls	r3, r3, #23
 80008fa:	2200      	movs	r2, #0
 80008fc:	0018      	movs	r0, r3
 80008fe:	f000 fe17 	bl	8001530 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000902:	4b19      	ldr	r3, [pc, #100]	; (8000968 <MX_GPIO_Init+0xe0>)
 8000904:	2200      	movs	r2, #0
 8000906:	21fa      	movs	r1, #250	; 0xfa
 8000908:	0018      	movs	r0, r3
 800090a:	f000 fe11 	bl	8001530 <HAL_GPIO_WritePin>
                          |LCD_D6_Pin|LCD_D7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : RC522_CS_Pin RC522_RST_Pin */
  GPIO_InitStruct.Pin = RC522_CS_Pin|RC522_RST_Pin;
 800090e:	193b      	adds	r3, r7, r4
 8000910:	2288      	movs	r2, #136	; 0x88
 8000912:	0052      	lsls	r2, r2, #1
 8000914:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000916:	193b      	adds	r3, r7, r4
 8000918:	2201      	movs	r2, #1
 800091a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091c:	193b      	adds	r3, r7, r4
 800091e:	2200      	movs	r2, #0
 8000920:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	193b      	adds	r3, r7, r4
 8000924:	2200      	movs	r2, #0
 8000926:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000928:	193a      	adds	r2, r7, r4
 800092a:	2390      	movs	r3, #144	; 0x90
 800092c:	05db      	lsls	r3, r3, #23
 800092e:	0011      	movs	r1, r2
 8000930:	0018      	movs	r0, r3
 8000932:	f000 fc8d 	bl	8001250 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RS_Pin LCD_EN_Pin LCD_D4_Pin LCD_D5_Pin
                           LCD_D6_Pin LCD_D7_Pin */
  GPIO_InitStruct.Pin = LCD_RS_Pin|LCD_EN_Pin|LCD_D4_Pin|LCD_D5_Pin
 8000936:	0021      	movs	r1, r4
 8000938:	187b      	adds	r3, r7, r1
 800093a:	22fa      	movs	r2, #250	; 0xfa
 800093c:	601a      	str	r2, [r3, #0]
                          |LCD_D6_Pin|LCD_D7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800093e:	187b      	adds	r3, r7, r1
 8000940:	2201      	movs	r2, #1
 8000942:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	187b      	adds	r3, r7, r1
 8000946:	2200      	movs	r2, #0
 8000948:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094a:	187b      	adds	r3, r7, r1
 800094c:	2200      	movs	r2, #0
 800094e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000950:	187b      	adds	r3, r7, r1
 8000952:	4a05      	ldr	r2, [pc, #20]	; (8000968 <MX_GPIO_Init+0xe0>)
 8000954:	0019      	movs	r1, r3
 8000956:	0010      	movs	r0, r2
 8000958:	f000 fc7a 	bl	8001250 <HAL_GPIO_Init>

}
 800095c:	46c0      	nop			; (mov r8, r8)
 800095e:	46bd      	mov	sp, r7
 8000960:	b009      	add	sp, #36	; 0x24
 8000962:	bd90      	pop	{r4, r7, pc}
 8000964:	40021000 	.word	0x40021000
 8000968:	48000400 	.word	0x48000400

0800096c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800096c:	b580      	push	{r7, lr}
 800096e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000970:	b672      	cpsid	i
}
 8000972:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000974:	e7fe      	b.n	8000974 <Error_Handler+0x8>
	...

08000978 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(u_char addr, u_char val) {
 8000978:	b590      	push	{r4, r7, lr}
 800097a:	b085      	sub	sp, #20
 800097c:	af00      	add	r7, sp, #0
 800097e:	0002      	movs	r2, r0
 8000980:	1dfb      	adds	r3, r7, #7
 8000982:	701a      	strb	r2, [r3, #0]
 8000984:	1dbb      	adds	r3, r7, #6
 8000986:	1c0a      	adds	r2, r1, #0
 8000988:	701a      	strb	r2, [r3, #0]
  //uint32_t rx_bits;
	  u_char addr_bits = (((addr<<1) & 0x7E));
 800098a:	1dfb      	adds	r3, r7, #7
 800098c:	781b      	ldrb	r3, [r3, #0]
 800098e:	005b      	lsls	r3, r3, #1
 8000990:	b2db      	uxtb	r3, r3
 8000992:	227e      	movs	r2, #126	; 0x7e
 8000994:	4013      	ands	r3, r2
 8000996:	b2da      	uxtb	r2, r3
 8000998:	240f      	movs	r4, #15
 800099a:	193b      	adds	r3, r7, r4
 800099c:	701a      	strb	r2, [r3, #0]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 800099e:	2390      	movs	r3, #144	; 0x90
 80009a0:	05db      	lsls	r3, r3, #23
 80009a2:	2200      	movs	r2, #0
 80009a4:	2110      	movs	r1, #16
 80009a6:	0018      	movs	r0, r3
 80009a8:	f000 fdc2 	bl	8001530 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi1, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 80009ac:	23fa      	movs	r3, #250	; 0xfa
 80009ae:	005b      	lsls	r3, r3, #1
 80009b0:	1939      	adds	r1, r7, r4
 80009b2:	480b      	ldr	r0, [pc, #44]	; (80009e0 <Write_MFRC522+0x68>)
 80009b4:	2201      	movs	r2, #1
 80009b6:	f001 fadf 	bl	8001f78 <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi1, &val, 1, 500);
 80009ba:	23fa      	movs	r3, #250	; 0xfa
 80009bc:	005b      	lsls	r3, r3, #1
 80009be:	1db9      	adds	r1, r7, #6
 80009c0:	4807      	ldr	r0, [pc, #28]	; (80009e0 <Write_MFRC522+0x68>)
 80009c2:	2201      	movs	r2, #1
 80009c4:	f001 fad8 	bl	8001f78 <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 80009c8:	2390      	movs	r3, #144	; 0x90
 80009ca:	05db      	lsls	r3, r3, #23
 80009cc:	2201      	movs	r2, #1
 80009ce:	2110      	movs	r1, #16
 80009d0:	0018      	movs	r0, r3
 80009d2:	f000 fdad 	bl	8001530 <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 80009d6:	46c0      	nop			; (mov r8, r8)
 80009d8:	46bd      	mov	sp, r7
 80009da:	b005      	add	sp, #20
 80009dc:	bd90      	pop	{r4, r7, pc}
 80009de:	46c0      	nop			; (mov r8, r8)
 80009e0:	20000040 	.word	0x20000040

080009e4 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
u_char Read_MFRC522(u_char addr) {
 80009e4:	b590      	push	{r4, r7, lr}
 80009e6:	b085      	sub	sp, #20
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	0002      	movs	r2, r0
 80009ec:	1dfb      	adds	r3, r7, #7
 80009ee:	701a      	strb	r2, [r3, #0]
  //uint32_t rx_bits;
  u_char rx_bits;
  u_char addr_bits = (((addr<<1) & 0x7E) | 0x80);
 80009f0:	1dfb      	adds	r3, r7, #7
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	005b      	lsls	r3, r3, #1
 80009f6:	b25b      	sxtb	r3, r3
 80009f8:	227e      	movs	r2, #126	; 0x7e
 80009fa:	4013      	ands	r3, r2
 80009fc:	b25b      	sxtb	r3, r3
 80009fe:	2280      	movs	r2, #128	; 0x80
 8000a00:	4252      	negs	r2, r2
 8000a02:	4313      	orrs	r3, r2
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	b2da      	uxtb	r2, r3
 8000a08:	240e      	movs	r4, #14
 8000a0a:	193b      	adds	r3, r7, r4
 8000a0c:	701a      	strb	r2, [r3, #0]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_RESET);
 8000a0e:	2390      	movs	r3, #144	; 0x90
 8000a10:	05db      	lsls	r3, r3, #23
 8000a12:	2200      	movs	r2, #0
 8000a14:	2110      	movs	r1, #16
 8000a16:	0018      	movs	r0, r3
 8000a18:	f000 fd8a 	bl	8001530 <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi1, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi1, &addr_bits, 1, 500);
 8000a1c:	23fa      	movs	r3, #250	; 0xfa
 8000a1e:	005b      	lsls	r3, r3, #1
 8000a20:	1939      	adds	r1, r7, r4
 8000a22:	480c      	ldr	r0, [pc, #48]	; (8000a54 <Read_MFRC522+0x70>)
 8000a24:	2201      	movs	r2, #1
 8000a26:	f001 faa7 	bl	8001f78 <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi1, &rx_bits, 1, 500);
 8000a2a:	23fa      	movs	r3, #250	; 0xfa
 8000a2c:	005b      	lsls	r3, r3, #1
 8000a2e:	240f      	movs	r4, #15
 8000a30:	1939      	adds	r1, r7, r4
 8000a32:	4808      	ldr	r0, [pc, #32]	; (8000a54 <Read_MFRC522+0x70>)
 8000a34:	2201      	movs	r2, #1
 8000a36:	f001 fbf7 	bl	8002228 <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(RC522_CS_GPIO_Port, RC522_CS_Pin, GPIO_PIN_SET);
 8000a3a:	2390      	movs	r3, #144	; 0x90
 8000a3c:	05db      	lsls	r3, r3, #23
 8000a3e:	2201      	movs	r2, #1
 8000a40:	2110      	movs	r1, #16
 8000a42:	0018      	movs	r0, r3
 8000a44:	f000 fd74 	bl	8001530 <HAL_GPIO_WritePin>

	return (u_char) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8000a48:	193b      	adds	r3, r7, r4
 8000a4a:	781b      	ldrb	r3, [r3, #0]
}
 8000a4c:	0018      	movs	r0, r3
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	b005      	add	sp, #20
 8000a52:	bd90      	pop	{r4, r7, pc}
 8000a54:	20000040 	.word	0x20000040

08000a58 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(u_char reg, u_char mask)
{
 8000a58:	b5b0      	push	{r4, r5, r7, lr}
 8000a5a:	b084      	sub	sp, #16
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	0002      	movs	r2, r0
 8000a60:	1dfb      	adds	r3, r7, #7
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	1dbb      	adds	r3, r7, #6
 8000a66:	1c0a      	adds	r2, r1, #0
 8000a68:	701a      	strb	r2, [r3, #0]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8000a6a:	250f      	movs	r5, #15
 8000a6c:	197c      	adds	r4, r7, r5
 8000a6e:	1dfb      	adds	r3, r7, #7
 8000a70:	781b      	ldrb	r3, [r3, #0]
 8000a72:	0018      	movs	r0, r3
 8000a74:	f7ff ffb6 	bl	80009e4 <Read_MFRC522>
 8000a78:	0003      	movs	r3, r0
 8000a7a:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8000a7c:	197a      	adds	r2, r7, r5
 8000a7e:	1dbb      	adds	r3, r7, #6
 8000a80:	7812      	ldrb	r2, [r2, #0]
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	b2da      	uxtb	r2, r3
 8000a88:	1dfb      	adds	r3, r7, #7
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	0011      	movs	r1, r2
 8000a8e:	0018      	movs	r0, r3
 8000a90:	f7ff ff72 	bl	8000978 <Write_MFRC522>
}
 8000a94:	46c0      	nop			; (mov r8, r8)
 8000a96:	46bd      	mov	sp, r7
 8000a98:	b004      	add	sp, #16
 8000a9a:	bdb0      	pop	{r4, r5, r7, pc}

08000a9c <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(u_char reg, u_char mask)
{
 8000a9c:	b5b0      	push	{r4, r5, r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	0002      	movs	r2, r0
 8000aa4:	1dfb      	adds	r3, r7, #7
 8000aa6:	701a      	strb	r2, [r3, #0]
 8000aa8:	1dbb      	adds	r3, r7, #6
 8000aaa:	1c0a      	adds	r2, r1, #0
 8000aac:	701a      	strb	r2, [r3, #0]
    u_char tmp;
    tmp = Read_MFRC522(reg);
 8000aae:	250f      	movs	r5, #15
 8000ab0:	197c      	adds	r4, r7, r5
 8000ab2:	1dfb      	adds	r3, r7, #7
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	0018      	movs	r0, r3
 8000ab8:	f7ff ff94 	bl	80009e4 <Read_MFRC522>
 8000abc:	0003      	movs	r3, r0
 8000abe:	7023      	strb	r3, [r4, #0]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8000ac0:	1dbb      	adds	r3, r7, #6
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	b25b      	sxtb	r3, r3
 8000ac6:	43db      	mvns	r3, r3
 8000ac8:	b25b      	sxtb	r3, r3
 8000aca:	197a      	adds	r2, r7, r5
 8000acc:	7812      	ldrb	r2, [r2, #0]
 8000ace:	b252      	sxtb	r2, r2
 8000ad0:	4013      	ands	r3, r2
 8000ad2:	b25b      	sxtb	r3, r3
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	1dfb      	adds	r3, r7, #7
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	0011      	movs	r1, r2
 8000adc:	0018      	movs	r0, r3
 8000ade:	f7ff ff4b 	bl	8000978 <Write_MFRC522>
}
 8000ae2:	46c0      	nop			; (mov r8, r8)
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	b004      	add	sp, #16
 8000ae8:	bdb0      	pop	{r4, r5, r7, pc}

08000aea <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8000aea:	b580      	push	{r7, lr}
 8000aec:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 8000aee:	2103      	movs	r1, #3
 8000af0:	2014      	movs	r0, #20
 8000af2:	f7ff ffb1 	bl	8000a58 <SetBitMask>
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8000b00:	210f      	movs	r1, #15
 8000b02:	2001      	movs	r0, #1
 8000b04:	f7ff ff38 	bl	8000978 <Write_MFRC522>
}
 8000b08:	46c0      	nop			; (mov r8, r8)
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bd80      	pop	{r7, pc}

08000b0e <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8000b0e:	b580      	push	{r7, lr}
 8000b10:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 8000b12:	f7ff fff3 	bl	8000afc <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	202a      	movs	r0, #42	; 0x2a
 8000b1a:	f7ff ff2d 	bl	8000978 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 8000b1e:	21a9      	movs	r1, #169	; 0xa9
 8000b20:	202b      	movs	r0, #43	; 0x2b
 8000b22:	f7ff ff29 	bl	8000978 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 8000b26:	2103      	movs	r1, #3
 8000b28:	202d      	movs	r0, #45	; 0x2d
 8000b2a:	f7ff ff25 	bl	8000978 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8000b2e:	21e8      	movs	r1, #232	; 0xe8
 8000b30:	202c      	movs	r0, #44	; 0x2c
 8000b32:	f7ff ff21 	bl	8000978 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 8000b36:	2140      	movs	r1, #64	; 0x40
 8000b38:	2015      	movs	r0, #21
 8000b3a:	f7ff ff1d 	bl	8000978 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8000b3e:	213d      	movs	r1, #61	; 0x3d
 8000b40:	2011      	movs	r0, #17
 8000b42:	f7ff ff19 	bl	8000978 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 8000b46:	f7ff ffd0 	bl	8000aea <AntennaOn>
}
 8000b4a:	46c0      	nop			; (mov r8, r8)
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}

08000b50 <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Request(u_char reqMode, u_char *TagType)
{
 8000b50:	b5b0      	push	{r4, r5, r7, lr}
 8000b52:	b086      	sub	sp, #24
 8000b54:	af02      	add	r7, sp, #8
 8000b56:	0002      	movs	r2, r0
 8000b58:	6039      	str	r1, [r7, #0]
 8000b5a:	1dfb      	adds	r3, r7, #7
 8000b5c:	701a      	strb	r2, [r3, #0]
  u_char status;
  uint backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8000b5e:	2107      	movs	r1, #7
 8000b60:	200d      	movs	r0, #13
 8000b62:	f7ff ff09 	bl	8000978 <Write_MFRC522>

  TagType[0] = reqMode;
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	1dfa      	adds	r2, r7, #7
 8000b6a:	7812      	ldrb	r2, [r2, #0]
 8000b6c:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8000b6e:	250f      	movs	r5, #15
 8000b70:	197c      	adds	r4, r7, r5
 8000b72:	683a      	ldr	r2, [r7, #0]
 8000b74:	6839      	ldr	r1, [r7, #0]
 8000b76:	2308      	movs	r3, #8
 8000b78:	18fb      	adds	r3, r7, r3
 8000b7a:	9300      	str	r3, [sp, #0]
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	2201      	movs	r2, #1
 8000b80:	200c      	movs	r0, #12
 8000b82:	f000 f814 	bl	8000bae <MFRC522_ToCard>
 8000b86:	0003      	movs	r3, r0
 8000b88:	7023      	strb	r3, [r4, #0]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8000b8a:	197b      	adds	r3, r7, r5
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d102      	bne.n	8000b98 <MFRC522_Request+0x48>
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	2b10      	cmp	r3, #16
 8000b96:	d003      	beq.n	8000ba0 <MFRC522_Request+0x50>
    status = MI_ERR;
 8000b98:	230f      	movs	r3, #15
 8000b9a:	18fb      	adds	r3, r7, r3
 8000b9c:	2202      	movs	r2, #2
 8000b9e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8000ba0:	230f      	movs	r3, #15
 8000ba2:	18fb      	adds	r3, r7, r3
 8000ba4:	781b      	ldrb	r3, [r3, #0]
}
 8000ba6:	0018      	movs	r0, r3
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	b004      	add	sp, #16
 8000bac:	bdb0      	pop	{r4, r5, r7, pc}

08000bae <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
u_char MFRC522_ToCard(u_char command, u_char *sendData, u_char sendLen, u_char *backData, uint *backLen)
{
 8000bae:	b5b0      	push	{r4, r5, r7, lr}
 8000bb0:	b088      	sub	sp, #32
 8000bb2:	af00      	add	r7, sp, #0
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	0011      	movs	r1, r2
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	240f      	movs	r4, #15
 8000bbc:	193b      	adds	r3, r7, r4
 8000bbe:	1c02      	adds	r2, r0, #0
 8000bc0:	701a      	strb	r2, [r3, #0]
 8000bc2:	230e      	movs	r3, #14
 8000bc4:	18fb      	adds	r3, r7, r3
 8000bc6:	1c0a      	adds	r2, r1, #0
 8000bc8:	701a      	strb	r2, [r3, #0]
  u_char status = MI_ERR;
 8000bca:	231f      	movs	r3, #31
 8000bcc:	18fb      	adds	r3, r7, r3
 8000bce:	2202      	movs	r2, #2
 8000bd0:	701a      	strb	r2, [r3, #0]
  u_char irqEn = 0x00;
 8000bd2:	211e      	movs	r1, #30
 8000bd4:	187b      	adds	r3, r7, r1
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	701a      	strb	r2, [r3, #0]
  u_char waitIRq = 0x00;
 8000bda:	201d      	movs	r0, #29
 8000bdc:	183b      	adds	r3, r7, r0
 8000bde:	2200      	movs	r2, #0
 8000be0:	701a      	strb	r2, [r3, #0]
  u_char lastBits;
  u_char n;
  uint i;

  switch (command)
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b0c      	cmp	r3, #12
 8000be8:	d008      	beq.n	8000bfc <MFRC522_ToCard+0x4e>
 8000bea:	2b0e      	cmp	r3, #14
 8000bec:	d10f      	bne.n	8000c0e <MFRC522_ToCard+0x60>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8000bee:	187b      	adds	r3, r7, r1
 8000bf0:	2212      	movs	r2, #18
 8000bf2:	701a      	strb	r2, [r3, #0]
        waitIRq = 0x10;
 8000bf4:	183b      	adds	r3, r7, r0
 8000bf6:	2210      	movs	r2, #16
 8000bf8:	701a      	strb	r2, [r3, #0]
        break;
 8000bfa:	e009      	b.n	8000c10 <MFRC522_ToCard+0x62>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8000bfc:	231e      	movs	r3, #30
 8000bfe:	18fb      	adds	r3, r7, r3
 8000c00:	2277      	movs	r2, #119	; 0x77
 8000c02:	701a      	strb	r2, [r3, #0]
        waitIRq = 0x30;
 8000c04:	231d      	movs	r3, #29
 8000c06:	18fb      	adds	r3, r7, r3
 8000c08:	2230      	movs	r2, #48	; 0x30
 8000c0a:	701a      	strb	r2, [r3, #0]
        break;
 8000c0c:	e000      	b.n	8000c10 <MFRC522_ToCard+0x62>
      }
    default:
      break;
 8000c0e:	46c0      	nop			; (mov r8, r8)
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 8000c10:	231e      	movs	r3, #30
 8000c12:	18fb      	adds	r3, r7, r3
 8000c14:	781b      	ldrb	r3, [r3, #0]
 8000c16:	2280      	movs	r2, #128	; 0x80
 8000c18:	4252      	negs	r2, r2
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b2db      	uxtb	r3, r3
 8000c1e:	0019      	movs	r1, r3
 8000c20:	2002      	movs	r0, #2
 8000c22:	f7ff fea9 	bl	8000978 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 8000c26:	2180      	movs	r1, #128	; 0x80
 8000c28:	2004      	movs	r0, #4
 8000c2a:	f7ff ff37 	bl	8000a9c <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8000c2e:	2180      	movs	r1, #128	; 0x80
 8000c30:	200a      	movs	r0, #10
 8000c32:	f7ff ff11 	bl	8000a58 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 8000c36:	2100      	movs	r1, #0
 8000c38:	2001      	movs	r0, #1
 8000c3a:	f7ff fe9d 	bl	8000978 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8000c3e:	2300      	movs	r3, #0
 8000c40:	61bb      	str	r3, [r7, #24]
 8000c42:	e00a      	b.n	8000c5a <MFRC522_ToCard+0xac>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 8000c44:	68ba      	ldr	r2, [r7, #8]
 8000c46:	69bb      	ldr	r3, [r7, #24]
 8000c48:	18d3      	adds	r3, r2, r3
 8000c4a:	781b      	ldrb	r3, [r3, #0]
 8000c4c:	0019      	movs	r1, r3
 8000c4e:	2009      	movs	r0, #9
 8000c50:	f7ff fe92 	bl	8000978 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 8000c54:	69bb      	ldr	r3, [r7, #24]
 8000c56:	3301      	adds	r3, #1
 8000c58:	61bb      	str	r3, [r7, #24]
 8000c5a:	230e      	movs	r3, #14
 8000c5c:	18fb      	adds	r3, r7, r3
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d3ee      	bcc.n	8000c44 <MFRC522_ToCard+0x96>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 8000c66:	240f      	movs	r4, #15
 8000c68:	193b      	adds	r3, r7, r4
 8000c6a:	781b      	ldrb	r3, [r3, #0]
 8000c6c:	0019      	movs	r1, r3
 8000c6e:	2001      	movs	r0, #1
 8000c70:	f7ff fe82 	bl	8000978 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8000c74:	193b      	adds	r3, r7, r4
 8000c76:	781b      	ldrb	r3, [r3, #0]
 8000c78:	2b0c      	cmp	r3, #12
 8000c7a:	d103      	bne.n	8000c84 <MFRC522_ToCard+0xd6>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8000c7c:	2180      	movs	r1, #128	; 0x80
 8000c7e:	200d      	movs	r0, #13
 8000c80:	f7ff feea 	bl	8000a58 <SetBitMask>
  }

  // Waiting to receive data to complete
  i = 2000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8000c84:	23fa      	movs	r3, #250	; 0xfa
 8000c86:	00db      	lsls	r3, r3, #3
 8000c88:	61bb      	str	r3, [r7, #24]
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 8000c8a:	251c      	movs	r5, #28
 8000c8c:	197c      	adds	r4, r7, r5
 8000c8e:	2004      	movs	r0, #4
 8000c90:	f7ff fea8 	bl	80009e4 <Read_MFRC522>
 8000c94:	0003      	movs	r3, r0
 8000c96:	7023      	strb	r3, [r4, #0]
    i--;
 8000c98:	69bb      	ldr	r3, [r7, #24]
 8000c9a:	3b01      	subs	r3, #1
 8000c9c:	61bb      	str	r3, [r7, #24]
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8000c9e:	69bb      	ldr	r3, [r7, #24]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	d00d      	beq.n	8000cc0 <MFRC522_ToCard+0x112>
 8000ca4:	197b      	adds	r3, r7, r5
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4013      	ands	r3, r2
 8000cac:	d108      	bne.n	8000cc0 <MFRC522_ToCard+0x112>
 8000cae:	197b      	adds	r3, r7, r5
 8000cb0:	221d      	movs	r2, #29
 8000cb2:	18ba      	adds	r2, r7, r2
 8000cb4:	781b      	ldrb	r3, [r3, #0]
 8000cb6:	7812      	ldrb	r2, [r2, #0]
 8000cb8:	4013      	ands	r3, r2
 8000cba:	b2db      	uxtb	r3, r3
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d0e4      	beq.n	8000c8a <MFRC522_ToCard+0xdc>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8000cc0:	2180      	movs	r1, #128	; 0x80
 8000cc2:	200d      	movs	r0, #13
 8000cc4:	f7ff feea 	bl	8000a9c <ClearBitMask>

  if (i != 0)
 8000cc8:	69bb      	ldr	r3, [r7, #24]
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d100      	bne.n	8000cd0 <MFRC522_ToCard+0x122>
 8000cce:	e070      	b.n	8000db2 <MFRC522_ToCard+0x204>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8000cd0:	2006      	movs	r0, #6
 8000cd2:	f7ff fe87 	bl	80009e4 <Read_MFRC522>
 8000cd6:	0003      	movs	r3, r0
 8000cd8:	001a      	movs	r2, r3
 8000cda:	231b      	movs	r3, #27
 8000cdc:	4013      	ands	r3, r2
 8000cde:	d164      	bne.n	8000daa <MFRC522_ToCard+0x1fc>
    {
      status = MI_OK;
 8000ce0:	211f      	movs	r1, #31
 8000ce2:	187b      	adds	r3, r7, r1
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	701a      	strb	r2, [r3, #0]
      if (n & irqEn & 0x01)
 8000ce8:	231c      	movs	r3, #28
 8000cea:	18fb      	adds	r3, r7, r3
 8000cec:	221e      	movs	r2, #30
 8000cee:	18ba      	adds	r2, r7, r2
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	7812      	ldrb	r2, [r2, #0]
 8000cf4:	4013      	ands	r3, r2
 8000cf6:	b2db      	uxtb	r3, r3
 8000cf8:	001a      	movs	r2, r3
 8000cfa:	2301      	movs	r3, #1
 8000cfc:	4013      	ands	r3, r2
 8000cfe:	d002      	beq.n	8000d06 <MFRC522_ToCard+0x158>
      {
        status = MI_NOTAGERR;             // ??
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2201      	movs	r2, #1
 8000d04:	701a      	strb	r2, [r3, #0]
      }

      if (command == PCD_TRANSCEIVE)
 8000d06:	230f      	movs	r3, #15
 8000d08:	18fb      	adds	r3, r7, r3
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b0c      	cmp	r3, #12
 8000d0e:	d150      	bne.n	8000db2 <MFRC522_ToCard+0x204>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8000d10:	251c      	movs	r5, #28
 8000d12:	197c      	adds	r4, r7, r5
 8000d14:	200a      	movs	r0, #10
 8000d16:	f7ff fe65 	bl	80009e4 <Read_MFRC522>
 8000d1a:	0003      	movs	r3, r0
 8000d1c:	7023      	strb	r3, [r4, #0]
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8000d1e:	200c      	movs	r0, #12
 8000d20:	f7ff fe60 	bl	80009e4 <Read_MFRC522>
 8000d24:	0003      	movs	r3, r0
 8000d26:	0019      	movs	r1, r3
 8000d28:	2017      	movs	r0, #23
 8000d2a:	183b      	adds	r3, r7, r0
 8000d2c:	2207      	movs	r2, #7
 8000d2e:	400a      	ands	r2, r1
 8000d30:	701a      	strb	r2, [r3, #0]
        if (lastBits)
 8000d32:	0001      	movs	r1, r0
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d00a      	beq.n	8000d52 <MFRC522_ToCard+0x1a4>
        {
          *backLen = (n-1)*8 + lastBits;
 8000d3c:	197b      	adds	r3, r7, r5
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	3b01      	subs	r3, #1
 8000d42:	00da      	lsls	r2, r3, #3
 8000d44:	187b      	adds	r3, r7, r1
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	18d3      	adds	r3, r2, r3
 8000d4a:	001a      	movs	r2, r3
 8000d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d4e:	601a      	str	r2, [r3, #0]
 8000d50:	e006      	b.n	8000d60 <MFRC522_ToCard+0x1b2>
        }
        else
        {
          *backLen = n*8;
 8000d52:	231c      	movs	r3, #28
 8000d54:	18fb      	adds	r3, r7, r3
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	00db      	lsls	r3, r3, #3
 8000d5a:	001a      	movs	r2, r3
 8000d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000d5e:	601a      	str	r2, [r3, #0]
        }

        if (n == 0)
 8000d60:	221c      	movs	r2, #28
 8000d62:	18bb      	adds	r3, r7, r2
 8000d64:	781b      	ldrb	r3, [r3, #0]
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d102      	bne.n	8000d70 <MFRC522_ToCard+0x1c2>
        {
          n = 1;
 8000d6a:	18bb      	adds	r3, r7, r2
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	701a      	strb	r2, [r3, #0]
        }
        if (n > MAX_LEN)
 8000d70:	221c      	movs	r2, #28
 8000d72:	18bb      	adds	r3, r7, r2
 8000d74:	781b      	ldrb	r3, [r3, #0]
 8000d76:	2b10      	cmp	r3, #16
 8000d78:	d902      	bls.n	8000d80 <MFRC522_ToCard+0x1d2>
        {
          n = MAX_LEN;
 8000d7a:	18bb      	adds	r3, r7, r2
 8000d7c:	2210      	movs	r2, #16
 8000d7e:	701a      	strb	r2, [r3, #0]
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 8000d80:	2300      	movs	r3, #0
 8000d82:	61bb      	str	r3, [r7, #24]
 8000d84:	e00a      	b.n	8000d9c <MFRC522_ToCard+0x1ee>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8000d86:	687a      	ldr	r2, [r7, #4]
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	18d4      	adds	r4, r2, r3
 8000d8c:	2009      	movs	r0, #9
 8000d8e:	f7ff fe29 	bl	80009e4 <Read_MFRC522>
 8000d92:	0003      	movs	r3, r0
 8000d94:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8000d96:	69bb      	ldr	r3, [r7, #24]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	61bb      	str	r3, [r7, #24]
 8000d9c:	231c      	movs	r3, #28
 8000d9e:	18fb      	adds	r3, r7, r3
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	69ba      	ldr	r2, [r7, #24]
 8000da4:	429a      	cmp	r2, r3
 8000da6:	d3ee      	bcc.n	8000d86 <MFRC522_ToCard+0x1d8>
 8000da8:	e003      	b.n	8000db2 <MFRC522_ToCard+0x204>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8000daa:	231f      	movs	r3, #31
 8000dac:	18fb      	adds	r3, r7, r3
 8000dae:	2202      	movs	r2, #2
 8000db0:	701a      	strb	r2, [r3, #0]
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8000db2:	231f      	movs	r3, #31
 8000db4:	18fb      	adds	r3, r7, r3
 8000db6:	781b      	ldrb	r3, [r3, #0]
}
 8000db8:	0018      	movs	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	b008      	add	sp, #32
 8000dbe:	bdb0      	pop	{r4, r5, r7, pc}

08000dc0 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
u_char MFRC522_Anticoll(u_char *serNum)
{
 8000dc0:	b5b0      	push	{r4, r5, r7, lr}
 8000dc2:	b086      	sub	sp, #24
 8000dc4:	af02      	add	r7, sp, #8
 8000dc6:	6078      	str	r0, [r7, #4]
  u_char status;
  u_char i;
  u_char serNumCheck=0;
 8000dc8:	230d      	movs	r3, #13
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
  uint unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8000dd0:	2100      	movs	r1, #0
 8000dd2:	200d      	movs	r0, #13
 8000dd4:	f7ff fdd0 	bl	8000978 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2293      	movs	r2, #147	; 0x93
 8000ddc:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	3301      	adds	r3, #1
 8000de2:	2220      	movs	r2, #32
 8000de4:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8000de6:	250f      	movs	r5, #15
 8000de8:	197c      	adds	r4, r7, r5
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	6879      	ldr	r1, [r7, #4]
 8000dee:	2308      	movs	r3, #8
 8000df0:	18fb      	adds	r3, r7, r3
 8000df2:	9300      	str	r3, [sp, #0]
 8000df4:	0013      	movs	r3, r2
 8000df6:	2202      	movs	r2, #2
 8000df8:	200c      	movs	r0, #12
 8000dfa:	f7ff fed8 	bl	8000bae <MFRC522_ToCard>
 8000dfe:	0003      	movs	r3, r0
 8000e00:	7023      	strb	r3, [r4, #0]

  if (status == MI_OK)
 8000e02:	197b      	adds	r3, r7, r5
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d128      	bne.n	8000e5c <MFRC522_Anticoll+0x9c>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8000e0a:	230e      	movs	r3, #14
 8000e0c:	18fb      	adds	r3, r7, r3
 8000e0e:	2200      	movs	r2, #0
 8000e10:	701a      	strb	r2, [r3, #0]
 8000e12:	e010      	b.n	8000e36 <MFRC522_Anticoll+0x76>
    {
      serNumCheck ^= serNum[i];
 8000e14:	200e      	movs	r0, #14
 8000e16:	183b      	adds	r3, r7, r0
 8000e18:	781b      	ldrb	r3, [r3, #0]
 8000e1a:	687a      	ldr	r2, [r7, #4]
 8000e1c:	18d3      	adds	r3, r2, r3
 8000e1e:	7819      	ldrb	r1, [r3, #0]
 8000e20:	220d      	movs	r2, #13
 8000e22:	18bb      	adds	r3, r7, r2
 8000e24:	18ba      	adds	r2, r7, r2
 8000e26:	7812      	ldrb	r2, [r2, #0]
 8000e28:	404a      	eors	r2, r1
 8000e2a:	701a      	strb	r2, [r3, #0]
    for (i=0; i<4; i++)
 8000e2c:	183b      	adds	r3, r7, r0
 8000e2e:	781a      	ldrb	r2, [r3, #0]
 8000e30:	183b      	adds	r3, r7, r0
 8000e32:	3201      	adds	r2, #1
 8000e34:	701a      	strb	r2, [r3, #0]
 8000e36:	220e      	movs	r2, #14
 8000e38:	18bb      	adds	r3, r7, r2
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	2b03      	cmp	r3, #3
 8000e3e:	d9e9      	bls.n	8000e14 <MFRC522_Anticoll+0x54>
    }
    if (serNumCheck != serNum[i])
 8000e40:	18bb      	adds	r3, r7, r2
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	687a      	ldr	r2, [r7, #4]
 8000e46:	18d3      	adds	r3, r2, r3
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	220d      	movs	r2, #13
 8000e4c:	18ba      	adds	r2, r7, r2
 8000e4e:	7812      	ldrb	r2, [r2, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	d003      	beq.n	8000e5c <MFRC522_Anticoll+0x9c>
    {
      status = MI_ERR;
 8000e54:	230f      	movs	r3, #15
 8000e56:	18fb      	adds	r3, r7, r3
 8000e58:	2202      	movs	r2, #2
 8000e5a:	701a      	strb	r2, [r3, #0]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8000e5c:	230f      	movs	r3, #15
 8000e5e:	18fb      	adds	r3, r7, r3
 8000e60:	781b      	ldrb	r3, [r3, #0]
}
 8000e62:	0018      	movs	r0, r3
 8000e64:	46bd      	mov	sp, r7
 8000e66:	b004      	add	sp, #16
 8000e68:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000e6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b082      	sub	sp, #8
 8000e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e72:	4b0f      	ldr	r3, [pc, #60]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e74:	699a      	ldr	r2, [r3, #24]
 8000e76:	4b0e      	ldr	r3, [pc, #56]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e78:	2101      	movs	r1, #1
 8000e7a:	430a      	orrs	r2, r1
 8000e7c:	619a      	str	r2, [r3, #24]
 8000e7e:	4b0c      	ldr	r3, [pc, #48]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e80:	699b      	ldr	r3, [r3, #24]
 8000e82:	2201      	movs	r2, #1
 8000e84:	4013      	ands	r3, r2
 8000e86:	607b      	str	r3, [r7, #4]
 8000e88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e8a:	4b09      	ldr	r3, [pc, #36]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e8c:	69da      	ldr	r2, [r3, #28]
 8000e8e:	4b08      	ldr	r3, [pc, #32]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e90:	2180      	movs	r1, #128	; 0x80
 8000e92:	0549      	lsls	r1, r1, #21
 8000e94:	430a      	orrs	r2, r1
 8000e96:	61da      	str	r2, [r3, #28]
 8000e98:	4b05      	ldr	r3, [pc, #20]	; (8000eb0 <HAL_MspInit+0x44>)
 8000e9a:	69da      	ldr	r2, [r3, #28]
 8000e9c:	2380      	movs	r3, #128	; 0x80
 8000e9e:	055b      	lsls	r3, r3, #21
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	603b      	str	r3, [r7, #0]
 8000ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ea6:	46c0      	nop			; (mov r8, r8)
 8000ea8:	46bd      	mov	sp, r7
 8000eaa:	b002      	add	sp, #8
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	40021000 	.word	0x40021000

08000eb4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000eb4:	b590      	push	{r4, r7, lr}
 8000eb6:	b08b      	sub	sp, #44	; 0x2c
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ebc:	2414      	movs	r4, #20
 8000ebe:	193b      	adds	r3, r7, r4
 8000ec0:	0018      	movs	r0, r3
 8000ec2:	2314      	movs	r3, #20
 8000ec4:	001a      	movs	r2, r3
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	f001 fec4 	bl	8002c54 <memset>
  if(hspi->Instance==SPI1)
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	4a1c      	ldr	r2, [pc, #112]	; (8000f44 <HAL_SPI_MspInit+0x90>)
 8000ed2:	4293      	cmp	r3, r2
 8000ed4:	d132      	bne.n	8000f3c <HAL_SPI_MspInit+0x88>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000ed6:	4b1c      	ldr	r3, [pc, #112]	; (8000f48 <HAL_SPI_MspInit+0x94>)
 8000ed8:	699a      	ldr	r2, [r3, #24]
 8000eda:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_SPI_MspInit+0x94>)
 8000edc:	2180      	movs	r1, #128	; 0x80
 8000ede:	0149      	lsls	r1, r1, #5
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	619a      	str	r2, [r3, #24]
 8000ee4:	4b18      	ldr	r3, [pc, #96]	; (8000f48 <HAL_SPI_MspInit+0x94>)
 8000ee6:	699a      	ldr	r2, [r3, #24]
 8000ee8:	2380      	movs	r3, #128	; 0x80
 8000eea:	015b      	lsls	r3, r3, #5
 8000eec:	4013      	ands	r3, r2
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ef2:	4b15      	ldr	r3, [pc, #84]	; (8000f48 <HAL_SPI_MspInit+0x94>)
 8000ef4:	695a      	ldr	r2, [r3, #20]
 8000ef6:	4b14      	ldr	r3, [pc, #80]	; (8000f48 <HAL_SPI_MspInit+0x94>)
 8000ef8:	2180      	movs	r1, #128	; 0x80
 8000efa:	0289      	lsls	r1, r1, #10
 8000efc:	430a      	orrs	r2, r1
 8000efe:	615a      	str	r2, [r3, #20]
 8000f00:	4b11      	ldr	r3, [pc, #68]	; (8000f48 <HAL_SPI_MspInit+0x94>)
 8000f02:	695a      	ldr	r2, [r3, #20]
 8000f04:	2380      	movs	r3, #128	; 0x80
 8000f06:	029b      	lsls	r3, r3, #10
 8000f08:	4013      	ands	r3, r2
 8000f0a:	60fb      	str	r3, [r7, #12]
 8000f0c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000f0e:	0021      	movs	r1, r4
 8000f10:	187b      	adds	r3, r7, r1
 8000f12:	22e0      	movs	r2, #224	; 0xe0
 8000f14:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f16:	187b      	adds	r3, r7, r1
 8000f18:	2202      	movs	r2, #2
 8000f1a:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f1c:	187b      	adds	r3, r7, r1
 8000f1e:	2200      	movs	r2, #0
 8000f20:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f22:	187b      	adds	r3, r7, r1
 8000f24:	2203      	movs	r2, #3
 8000f26:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000f28:	187b      	adds	r3, r7, r1
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f2e:	187a      	adds	r2, r7, r1
 8000f30:	2390      	movs	r3, #144	; 0x90
 8000f32:	05db      	lsls	r3, r3, #23
 8000f34:	0011      	movs	r1, r2
 8000f36:	0018      	movs	r0, r3
 8000f38:	f000 f98a 	bl	8001250 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000f3c:	46c0      	nop			; (mov r8, r8)
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	b00b      	add	sp, #44	; 0x2c
 8000f42:	bd90      	pop	{r4, r7, pc}
 8000f44:	40013000 	.word	0x40013000
 8000f48:	40021000 	.word	0x40021000

08000f4c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f50:	e7fe      	b.n	8000f50 <NMI_Handler+0x4>

08000f52 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f56:	e7fe      	b.n	8000f56 <HardFault_Handler+0x4>

08000f58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f5c:	46c0      	nop			; (mov r8, r8)
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}

08000f62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f62:	b580      	push	{r7, lr}
 8000f64:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f66:	46c0      	nop			; (mov r8, r8)
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f70:	f000 f87a 	bl	8001068 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f74:	46c0      	nop			; (mov r8, r8)
 8000f76:	46bd      	mov	sp, r7
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	46bd      	mov	sp, r7
 8000f82:	bd80      	pop	{r7, pc}

08000f84 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000f84:	480d      	ldr	r0, [pc, #52]	; (8000fbc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000f86:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f88:	480d      	ldr	r0, [pc, #52]	; (8000fc0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f8a:	490e      	ldr	r1, [pc, #56]	; (8000fc4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f8c:	4a0e      	ldr	r2, [pc, #56]	; (8000fc8 <LoopForever+0xe>)
  movs r3, #0
 8000f8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f90:	e002      	b.n	8000f98 <LoopCopyDataInit>

08000f92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f96:	3304      	adds	r3, #4

08000f98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f9c:	d3f9      	bcc.n	8000f92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f9e:	4a0b      	ldr	r2, [pc, #44]	; (8000fcc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fa0:	4c0b      	ldr	r4, [pc, #44]	; (8000fd0 <LoopForever+0x16>)
  movs r3, #0
 8000fa2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fa4:	e001      	b.n	8000faa <LoopFillZerobss>

08000fa6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fa6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fa8:	3204      	adds	r2, #4

08000faa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000faa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fac:	d3fb      	bcc.n	8000fa6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fae:	f7ff ffe4 	bl	8000f7a <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8000fb2:	f001 fe2b 	bl	8002c0c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000fb6:	f7ff fb69 	bl	800068c <main>

08000fba <LoopForever>:

LoopForever:
    b LoopForever
 8000fba:	e7fe      	b.n	8000fba <LoopForever>
  ldr   r0, =_estack
 8000fbc:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8000fc0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fc4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000fc8:	08002cec 	.word	0x08002cec
  ldr r2, =_sbss
 8000fcc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000fd0:	200000a8 	.word	0x200000a8

08000fd4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000fd4:	e7fe      	b.n	8000fd4 <ADC1_IRQHandler>
	...

08000fd8 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fdc:	4b07      	ldr	r3, [pc, #28]	; (8000ffc <HAL_Init+0x24>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b06      	ldr	r3, [pc, #24]	; (8000ffc <HAL_Init+0x24>)
 8000fe2:	2110      	movs	r1, #16
 8000fe4:	430a      	orrs	r2, r1
 8000fe6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8000fe8:	2003      	movs	r0, #3
 8000fea:	f000 f809 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000fee:	f7ff ff3d 	bl	8000e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff2:	2300      	movs	r3, #0
}
 8000ff4:	0018      	movs	r0, r3
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	40022000 	.word	0x40022000

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b590      	push	{r4, r7, lr}
 8001002:	b083      	sub	sp, #12
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b14      	ldr	r3, [pc, #80]	; (800105c <HAL_InitTick+0x5c>)
 800100a:	681c      	ldr	r4, [r3, #0]
 800100c:	4b14      	ldr	r3, [pc, #80]	; (8001060 <HAL_InitTick+0x60>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	0019      	movs	r1, r3
 8001012:	23fa      	movs	r3, #250	; 0xfa
 8001014:	0098      	lsls	r0, r3, #2
 8001016:	f7ff f877 	bl	8000108 <__udivsi3>
 800101a:	0003      	movs	r3, r0
 800101c:	0019      	movs	r1, r3
 800101e:	0020      	movs	r0, r4
 8001020:	f7ff f872 	bl	8000108 <__udivsi3>
 8001024:	0003      	movs	r3, r0
 8001026:	0018      	movs	r0, r3
 8001028:	f000 f905 	bl	8001236 <HAL_SYSTICK_Config>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d001      	beq.n	8001034 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001030:	2301      	movs	r3, #1
 8001032:	e00f      	b.n	8001054 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	2b03      	cmp	r3, #3
 8001038:	d80b      	bhi.n	8001052 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800103a:	6879      	ldr	r1, [r7, #4]
 800103c:	2301      	movs	r3, #1
 800103e:	425b      	negs	r3, r3
 8001040:	2200      	movs	r2, #0
 8001042:	0018      	movs	r0, r3
 8001044:	f000 f8e2 	bl	800120c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001048:	4b06      	ldr	r3, [pc, #24]	; (8001064 <HAL_InitTick+0x64>)
 800104a:	687a      	ldr	r2, [r7, #4]
 800104c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800104e:	2300      	movs	r3, #0
 8001050:	e000      	b.n	8001054 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001052:	2301      	movs	r3, #1
}
 8001054:	0018      	movs	r0, r3
 8001056:	46bd      	mov	sp, r7
 8001058:	b003      	add	sp, #12
 800105a:	bd90      	pop	{r4, r7, pc}
 800105c:	20000000 	.word	0x20000000
 8001060:	20000008 	.word	0x20000008
 8001064:	20000004 	.word	0x20000004

08001068 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800106c:	4b05      	ldr	r3, [pc, #20]	; (8001084 <HAL_IncTick+0x1c>)
 800106e:	781b      	ldrb	r3, [r3, #0]
 8001070:	001a      	movs	r2, r3
 8001072:	4b05      	ldr	r3, [pc, #20]	; (8001088 <HAL_IncTick+0x20>)
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	18d2      	adds	r2, r2, r3
 8001078:	4b03      	ldr	r3, [pc, #12]	; (8001088 <HAL_IncTick+0x20>)
 800107a:	601a      	str	r2, [r3, #0]
}
 800107c:	46c0      	nop			; (mov r8, r8)
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	46c0      	nop			; (mov r8, r8)
 8001084:	20000008 	.word	0x20000008
 8001088:	200000a4 	.word	0x200000a4

0800108c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  return uwTick;
 8001090:	4b02      	ldr	r3, [pc, #8]	; (800109c <HAL_GetTick+0x10>)
 8001092:	681b      	ldr	r3, [r3, #0]
}
 8001094:	0018      	movs	r0, r3
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	46c0      	nop			; (mov r8, r8)
 800109c:	200000a4 	.word	0x200000a4

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff fff0 	bl	800108c <HAL_GetTick>
 80010ac:	0003      	movs	r3, r0
 80010ae:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	60fb      	str	r3, [r7, #12]
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	3301      	adds	r3, #1
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	001a      	movs	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	189b      	adds	r3, r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80010c6:	46c0      	nop			; (mov r8, r8)
 80010c8:	f7ff ffe0 	bl	800108c <HAL_GetTick>
 80010cc:	0002      	movs	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	46c0      	nop			; (mov r8, r8)
 80010da:	46c0      	nop			; (mov r8, r8)
 80010dc:	46bd      	mov	sp, r7
 80010de:	b004      	add	sp, #16
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	46c0      	nop			; (mov r8, r8)
 80010e4:	20000008 	.word	0x20000008

080010e8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010e8:	b590      	push	{r4, r7, lr}
 80010ea:	b083      	sub	sp, #12
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	0002      	movs	r2, r0
 80010f0:	6039      	str	r1, [r7, #0]
 80010f2:	1dfb      	adds	r3, r7, #7
 80010f4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	1dfb      	adds	r3, r7, #7
 80010f8:	781b      	ldrb	r3, [r3, #0]
 80010fa:	2b7f      	cmp	r3, #127	; 0x7f
 80010fc:	d828      	bhi.n	8001150 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010fe:	4a2f      	ldr	r2, [pc, #188]	; (80011bc <__NVIC_SetPriority+0xd4>)
 8001100:	1dfb      	adds	r3, r7, #7
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	b25b      	sxtb	r3, r3
 8001106:	089b      	lsrs	r3, r3, #2
 8001108:	33c0      	adds	r3, #192	; 0xc0
 800110a:	009b      	lsls	r3, r3, #2
 800110c:	589b      	ldr	r3, [r3, r2]
 800110e:	1dfa      	adds	r2, r7, #7
 8001110:	7812      	ldrb	r2, [r2, #0]
 8001112:	0011      	movs	r1, r2
 8001114:	2203      	movs	r2, #3
 8001116:	400a      	ands	r2, r1
 8001118:	00d2      	lsls	r2, r2, #3
 800111a:	21ff      	movs	r1, #255	; 0xff
 800111c:	4091      	lsls	r1, r2
 800111e:	000a      	movs	r2, r1
 8001120:	43d2      	mvns	r2, r2
 8001122:	401a      	ands	r2, r3
 8001124:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001126:	683b      	ldr	r3, [r7, #0]
 8001128:	019b      	lsls	r3, r3, #6
 800112a:	22ff      	movs	r2, #255	; 0xff
 800112c:	401a      	ands	r2, r3
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	0018      	movs	r0, r3
 8001134:	2303      	movs	r3, #3
 8001136:	4003      	ands	r3, r0
 8001138:	00db      	lsls	r3, r3, #3
 800113a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800113c:	481f      	ldr	r0, [pc, #124]	; (80011bc <__NVIC_SetPriority+0xd4>)
 800113e:	1dfb      	adds	r3, r7, #7
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	b25b      	sxtb	r3, r3
 8001144:	089b      	lsrs	r3, r3, #2
 8001146:	430a      	orrs	r2, r1
 8001148:	33c0      	adds	r3, #192	; 0xc0
 800114a:	009b      	lsls	r3, r3, #2
 800114c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800114e:	e031      	b.n	80011b4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001150:	4a1b      	ldr	r2, [pc, #108]	; (80011c0 <__NVIC_SetPriority+0xd8>)
 8001152:	1dfb      	adds	r3, r7, #7
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	0019      	movs	r1, r3
 8001158:	230f      	movs	r3, #15
 800115a:	400b      	ands	r3, r1
 800115c:	3b08      	subs	r3, #8
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3306      	adds	r3, #6
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	18d3      	adds	r3, r2, r3
 8001166:	3304      	adds	r3, #4
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	1dfa      	adds	r2, r7, #7
 800116c:	7812      	ldrb	r2, [r2, #0]
 800116e:	0011      	movs	r1, r2
 8001170:	2203      	movs	r2, #3
 8001172:	400a      	ands	r2, r1
 8001174:	00d2      	lsls	r2, r2, #3
 8001176:	21ff      	movs	r1, #255	; 0xff
 8001178:	4091      	lsls	r1, r2
 800117a:	000a      	movs	r2, r1
 800117c:	43d2      	mvns	r2, r2
 800117e:	401a      	ands	r2, r3
 8001180:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	019b      	lsls	r3, r3, #6
 8001186:	22ff      	movs	r2, #255	; 0xff
 8001188:	401a      	ands	r2, r3
 800118a:	1dfb      	adds	r3, r7, #7
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	0018      	movs	r0, r3
 8001190:	2303      	movs	r3, #3
 8001192:	4003      	ands	r3, r0
 8001194:	00db      	lsls	r3, r3, #3
 8001196:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001198:	4809      	ldr	r0, [pc, #36]	; (80011c0 <__NVIC_SetPriority+0xd8>)
 800119a:	1dfb      	adds	r3, r7, #7
 800119c:	781b      	ldrb	r3, [r3, #0]
 800119e:	001c      	movs	r4, r3
 80011a0:	230f      	movs	r3, #15
 80011a2:	4023      	ands	r3, r4
 80011a4:	3b08      	subs	r3, #8
 80011a6:	089b      	lsrs	r3, r3, #2
 80011a8:	430a      	orrs	r2, r1
 80011aa:	3306      	adds	r3, #6
 80011ac:	009b      	lsls	r3, r3, #2
 80011ae:	18c3      	adds	r3, r0, r3
 80011b0:	3304      	adds	r3, #4
 80011b2:	601a      	str	r2, [r3, #0]
}
 80011b4:	46c0      	nop			; (mov r8, r8)
 80011b6:	46bd      	mov	sp, r7
 80011b8:	b003      	add	sp, #12
 80011ba:	bd90      	pop	{r4, r7, pc}
 80011bc:	e000e100 	.word	0xe000e100
 80011c0:	e000ed00 	.word	0xe000ed00

080011c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b082      	sub	sp, #8
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	1e5a      	subs	r2, r3, #1
 80011d0:	2380      	movs	r3, #128	; 0x80
 80011d2:	045b      	lsls	r3, r3, #17
 80011d4:	429a      	cmp	r2, r3
 80011d6:	d301      	bcc.n	80011dc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011d8:	2301      	movs	r3, #1
 80011da:	e010      	b.n	80011fe <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011dc:	4b0a      	ldr	r3, [pc, #40]	; (8001208 <SysTick_Config+0x44>)
 80011de:	687a      	ldr	r2, [r7, #4]
 80011e0:	3a01      	subs	r2, #1
 80011e2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011e4:	2301      	movs	r3, #1
 80011e6:	425b      	negs	r3, r3
 80011e8:	2103      	movs	r1, #3
 80011ea:	0018      	movs	r0, r3
 80011ec:	f7ff ff7c 	bl	80010e8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011f0:	4b05      	ldr	r3, [pc, #20]	; (8001208 <SysTick_Config+0x44>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011f6:	4b04      	ldr	r3, [pc, #16]	; (8001208 <SysTick_Config+0x44>)
 80011f8:	2207      	movs	r2, #7
 80011fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011fc:	2300      	movs	r3, #0
}
 80011fe:	0018      	movs	r0, r3
 8001200:	46bd      	mov	sp, r7
 8001202:	b002      	add	sp, #8
 8001204:	bd80      	pop	{r7, pc}
 8001206:	46c0      	nop			; (mov r8, r8)
 8001208:	e000e010 	.word	0xe000e010

0800120c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
 8001216:	210f      	movs	r1, #15
 8001218:	187b      	adds	r3, r7, r1
 800121a:	1c02      	adds	r2, r0, #0
 800121c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800121e:	68ba      	ldr	r2, [r7, #8]
 8001220:	187b      	adds	r3, r7, r1
 8001222:	781b      	ldrb	r3, [r3, #0]
 8001224:	b25b      	sxtb	r3, r3
 8001226:	0011      	movs	r1, r2
 8001228:	0018      	movs	r0, r3
 800122a:	f7ff ff5d 	bl	80010e8 <__NVIC_SetPriority>
}
 800122e:	46c0      	nop			; (mov r8, r8)
 8001230:	46bd      	mov	sp, r7
 8001232:	b004      	add	sp, #16
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	0018      	movs	r0, r3
 8001242:	f7ff ffbf 	bl	80011c4 <SysTick_Config>
 8001246:	0003      	movs	r3, r0
}
 8001248:	0018      	movs	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	b002      	add	sp, #8
 800124e:	bd80      	pop	{r7, pc}

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b086      	sub	sp, #24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800125a:	2300      	movs	r3, #0
 800125c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800125e:	e14f      	b.n	8001500 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2101      	movs	r1, #1
 8001266:	697a      	ldr	r2, [r7, #20]
 8001268:	4091      	lsls	r1, r2
 800126a:	000a      	movs	r2, r1
 800126c:	4013      	ands	r3, r2
 800126e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001270:	68fb      	ldr	r3, [r7, #12]
 8001272:	2b00      	cmp	r3, #0
 8001274:	d100      	bne.n	8001278 <HAL_GPIO_Init+0x28>
 8001276:	e140      	b.n	80014fa <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2203      	movs	r2, #3
 800127e:	4013      	ands	r3, r2
 8001280:	2b01      	cmp	r3, #1
 8001282:	d005      	beq.n	8001290 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001284:	683b      	ldr	r3, [r7, #0]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	2203      	movs	r2, #3
 800128a:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800128c:	2b02      	cmp	r3, #2
 800128e:	d130      	bne.n	80012f2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	689b      	ldr	r3, [r3, #8]
 8001294:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	005b      	lsls	r3, r3, #1
 800129a:	2203      	movs	r2, #3
 800129c:	409a      	lsls	r2, r3
 800129e:	0013      	movs	r3, r2
 80012a0:	43da      	mvns	r2, r3
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4013      	ands	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	68da      	ldr	r2, [r3, #12]
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	005b      	lsls	r3, r3, #1
 80012b0:	409a      	lsls	r2, r3
 80012b2:	0013      	movs	r3, r2
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4313      	orrs	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	693a      	ldr	r2, [r7, #16]
 80012be:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	685b      	ldr	r3, [r3, #4]
 80012c4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80012c6:	2201      	movs	r2, #1
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	409a      	lsls	r2, r3
 80012cc:	0013      	movs	r3, r2
 80012ce:	43da      	mvns	r2, r3
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	4013      	ands	r3, r2
 80012d4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	091b      	lsrs	r3, r3, #4
 80012dc:	2201      	movs	r2, #1
 80012de:	401a      	ands	r2, r3
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0013      	movs	r3, r2
 80012e6:	693a      	ldr	r2, [r7, #16]
 80012e8:	4313      	orrs	r3, r2
 80012ea:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	693a      	ldr	r2, [r7, #16]
 80012f0:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	2203      	movs	r2, #3
 80012f8:	4013      	ands	r3, r2
 80012fa:	2b03      	cmp	r3, #3
 80012fc:	d017      	beq.n	800132e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	68db      	ldr	r3, [r3, #12]
 8001302:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001304:	697b      	ldr	r3, [r7, #20]
 8001306:	005b      	lsls	r3, r3, #1
 8001308:	2203      	movs	r2, #3
 800130a:	409a      	lsls	r2, r3
 800130c:	0013      	movs	r3, r2
 800130e:	43da      	mvns	r2, r3
 8001310:	693b      	ldr	r3, [r7, #16]
 8001312:	4013      	ands	r3, r2
 8001314:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	697b      	ldr	r3, [r7, #20]
 800131c:	005b      	lsls	r3, r3, #1
 800131e:	409a      	lsls	r2, r3
 8001320:	0013      	movs	r3, r2
 8001322:	693a      	ldr	r2, [r7, #16]
 8001324:	4313      	orrs	r3, r2
 8001326:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	693a      	ldr	r2, [r7, #16]
 800132c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	685b      	ldr	r3, [r3, #4]
 8001332:	2203      	movs	r2, #3
 8001334:	4013      	ands	r3, r2
 8001336:	2b02      	cmp	r3, #2
 8001338:	d123      	bne.n	8001382 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	08da      	lsrs	r2, r3, #3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	3208      	adds	r2, #8
 8001342:	0092      	lsls	r2, r2, #2
 8001344:	58d3      	ldr	r3, [r2, r3]
 8001346:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	2207      	movs	r2, #7
 800134c:	4013      	ands	r3, r2
 800134e:	009b      	lsls	r3, r3, #2
 8001350:	220f      	movs	r2, #15
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	43da      	mvns	r2, r3
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	4013      	ands	r3, r2
 800135c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	691a      	ldr	r2, [r3, #16]
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	2107      	movs	r1, #7
 8001366:	400b      	ands	r3, r1
 8001368:	009b      	lsls	r3, r3, #2
 800136a:	409a      	lsls	r2, r3
 800136c:	0013      	movs	r3, r2
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001374:	697b      	ldr	r3, [r7, #20]
 8001376:	08da      	lsrs	r2, r3, #3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	3208      	adds	r2, #8
 800137c:	0092      	lsls	r2, r2, #2
 800137e:	6939      	ldr	r1, [r7, #16]
 8001380:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	005b      	lsls	r3, r3, #1
 800138c:	2203      	movs	r2, #3
 800138e:	409a      	lsls	r2, r3
 8001390:	0013      	movs	r3, r2
 8001392:	43da      	mvns	r2, r3
 8001394:	693b      	ldr	r3, [r7, #16]
 8001396:	4013      	ands	r3, r2
 8001398:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	2203      	movs	r2, #3
 80013a0:	401a      	ands	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	005b      	lsls	r3, r3, #1
 80013a6:	409a      	lsls	r2, r3
 80013a8:	0013      	movs	r3, r2
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4313      	orrs	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	693a      	ldr	r2, [r7, #16]
 80013b4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685a      	ldr	r2, [r3, #4]
 80013ba:	23c0      	movs	r3, #192	; 0xc0
 80013bc:	029b      	lsls	r3, r3, #10
 80013be:	4013      	ands	r3, r2
 80013c0:	d100      	bne.n	80013c4 <HAL_GPIO_Init+0x174>
 80013c2:	e09a      	b.n	80014fa <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c4:	4b54      	ldr	r3, [pc, #336]	; (8001518 <HAL_GPIO_Init+0x2c8>)
 80013c6:	699a      	ldr	r2, [r3, #24]
 80013c8:	4b53      	ldr	r3, [pc, #332]	; (8001518 <HAL_GPIO_Init+0x2c8>)
 80013ca:	2101      	movs	r1, #1
 80013cc:	430a      	orrs	r2, r1
 80013ce:	619a      	str	r2, [r3, #24]
 80013d0:	4b51      	ldr	r3, [pc, #324]	; (8001518 <HAL_GPIO_Init+0x2c8>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	2201      	movs	r2, #1
 80013d6:	4013      	ands	r3, r2
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013dc:	4a4f      	ldr	r2, [pc, #316]	; (800151c <HAL_GPIO_Init+0x2cc>)
 80013de:	697b      	ldr	r3, [r7, #20]
 80013e0:	089b      	lsrs	r3, r3, #2
 80013e2:	3302      	adds	r3, #2
 80013e4:	009b      	lsls	r3, r3, #2
 80013e6:	589b      	ldr	r3, [r3, r2]
 80013e8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ea:	697b      	ldr	r3, [r7, #20]
 80013ec:	2203      	movs	r2, #3
 80013ee:	4013      	ands	r3, r2
 80013f0:	009b      	lsls	r3, r3, #2
 80013f2:	220f      	movs	r2, #15
 80013f4:	409a      	lsls	r2, r3
 80013f6:	0013      	movs	r3, r2
 80013f8:	43da      	mvns	r2, r3
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4013      	ands	r3, r2
 80013fe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001400:	687a      	ldr	r2, [r7, #4]
 8001402:	2390      	movs	r3, #144	; 0x90
 8001404:	05db      	lsls	r3, r3, #23
 8001406:	429a      	cmp	r2, r3
 8001408:	d013      	beq.n	8001432 <HAL_GPIO_Init+0x1e2>
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a44      	ldr	r2, [pc, #272]	; (8001520 <HAL_GPIO_Init+0x2d0>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d00d      	beq.n	800142e <HAL_GPIO_Init+0x1de>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a43      	ldr	r2, [pc, #268]	; (8001524 <HAL_GPIO_Init+0x2d4>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d007      	beq.n	800142a <HAL_GPIO_Init+0x1da>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a42      	ldr	r2, [pc, #264]	; (8001528 <HAL_GPIO_Init+0x2d8>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_GPIO_Init+0x1d6>
 8001422:	2303      	movs	r3, #3
 8001424:	e006      	b.n	8001434 <HAL_GPIO_Init+0x1e4>
 8001426:	2305      	movs	r3, #5
 8001428:	e004      	b.n	8001434 <HAL_GPIO_Init+0x1e4>
 800142a:	2302      	movs	r3, #2
 800142c:	e002      	b.n	8001434 <HAL_GPIO_Init+0x1e4>
 800142e:	2301      	movs	r3, #1
 8001430:	e000      	b.n	8001434 <HAL_GPIO_Init+0x1e4>
 8001432:	2300      	movs	r3, #0
 8001434:	697a      	ldr	r2, [r7, #20]
 8001436:	2103      	movs	r1, #3
 8001438:	400a      	ands	r2, r1
 800143a:	0092      	lsls	r2, r2, #2
 800143c:	4093      	lsls	r3, r2
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	4313      	orrs	r3, r2
 8001442:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001444:	4935      	ldr	r1, [pc, #212]	; (800151c <HAL_GPIO_Init+0x2cc>)
 8001446:	697b      	ldr	r3, [r7, #20]
 8001448:	089b      	lsrs	r3, r3, #2
 800144a:	3302      	adds	r3, #2
 800144c:	009b      	lsls	r3, r3, #2
 800144e:	693a      	ldr	r2, [r7, #16]
 8001450:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001452:	4b36      	ldr	r3, [pc, #216]	; (800152c <HAL_GPIO_Init+0x2dc>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43da      	mvns	r2, r3
 800145c:	693b      	ldr	r3, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	025b      	lsls	r3, r3, #9
 800146a:	4013      	ands	r3, r2
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001476:	4b2d      	ldr	r3, [pc, #180]	; (800152c <HAL_GPIO_Init+0x2dc>)
 8001478:	693a      	ldr	r2, [r7, #16]
 800147a:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 800147c:	4b2b      	ldr	r3, [pc, #172]	; (800152c <HAL_GPIO_Init+0x2dc>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43da      	mvns	r2, r3
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685a      	ldr	r2, [r3, #4]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	029b      	lsls	r3, r3, #10
 8001494:	4013      	ands	r3, r2
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80014a0:	4b22      	ldr	r3, [pc, #136]	; (800152c <HAL_GPIO_Init+0x2dc>)
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80014a6:	4b21      	ldr	r3, [pc, #132]	; (800152c <HAL_GPIO_Init+0x2dc>)
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43da      	mvns	r2, r3
 80014b0:	693b      	ldr	r3, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	2380      	movs	r3, #128	; 0x80
 80014bc:	035b      	lsls	r3, r3, #13
 80014be:	4013      	ands	r3, r2
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80014ca:	4b18      	ldr	r3, [pc, #96]	; (800152c <HAL_GPIO_Init+0x2dc>)
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 80014d0:	4b16      	ldr	r3, [pc, #88]	; (800152c <HAL_GPIO_Init+0x2dc>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	43da      	mvns	r2, r3
 80014da:	693b      	ldr	r3, [r7, #16]
 80014dc:	4013      	ands	r3, r2
 80014de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	2380      	movs	r3, #128	; 0x80
 80014e6:	039b      	lsls	r3, r3, #14
 80014e8:	4013      	ands	r3, r2
 80014ea:	d003      	beq.n	80014f4 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80014ec:	693a      	ldr	r2, [r7, #16]
 80014ee:	68fb      	ldr	r3, [r7, #12]
 80014f0:	4313      	orrs	r3, r2
 80014f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80014f4:	4b0d      	ldr	r3, [pc, #52]	; (800152c <HAL_GPIO_Init+0x2dc>)
 80014f6:	693a      	ldr	r2, [r7, #16]
 80014f8:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	3301      	adds	r3, #1
 80014fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	681a      	ldr	r2, [r3, #0]
 8001504:	697b      	ldr	r3, [r7, #20]
 8001506:	40da      	lsrs	r2, r3
 8001508:	1e13      	subs	r3, r2, #0
 800150a:	d000      	beq.n	800150e <HAL_GPIO_Init+0x2be>
 800150c:	e6a8      	b.n	8001260 <HAL_GPIO_Init+0x10>
  } 
}
 800150e:	46c0      	nop			; (mov r8, r8)
 8001510:	46c0      	nop			; (mov r8, r8)
 8001512:	46bd      	mov	sp, r7
 8001514:	b006      	add	sp, #24
 8001516:	bd80      	pop	{r7, pc}
 8001518:	40021000 	.word	0x40021000
 800151c:	40010000 	.word	0x40010000
 8001520:	48000400 	.word	0x48000400
 8001524:	48000800 	.word	0x48000800
 8001528:	48000c00 	.word	0x48000c00
 800152c:	40010400 	.word	0x40010400

08001530 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	0008      	movs	r0, r1
 800153a:	0011      	movs	r1, r2
 800153c:	1cbb      	adds	r3, r7, #2
 800153e:	1c02      	adds	r2, r0, #0
 8001540:	801a      	strh	r2, [r3, #0]
 8001542:	1c7b      	adds	r3, r7, #1
 8001544:	1c0a      	adds	r2, r1, #0
 8001546:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001548:	1c7b      	adds	r3, r7, #1
 800154a:	781b      	ldrb	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d004      	beq.n	800155a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001550:	1cbb      	adds	r3, r7, #2
 8001552:	881a      	ldrh	r2, [r3, #0]
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001558:	e003      	b.n	8001562 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800155a:	1cbb      	adds	r3, r7, #2
 800155c:	881a      	ldrh	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001562:	46c0      	nop			; (mov r8, r8)
 8001564:	46bd      	mov	sp, r7
 8001566:	b002      	add	sp, #8
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b088      	sub	sp, #32
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d101      	bne.n	800157e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157a:	2301      	movs	r3, #1
 800157c:	e301      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2201      	movs	r2, #1
 8001584:	4013      	ands	r3, r2
 8001586:	d100      	bne.n	800158a <HAL_RCC_OscConfig+0x1e>
 8001588:	e08d      	b.n	80016a6 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800158a:	4bc3      	ldr	r3, [pc, #780]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800158c:	685b      	ldr	r3, [r3, #4]
 800158e:	220c      	movs	r2, #12
 8001590:	4013      	ands	r3, r2
 8001592:	2b04      	cmp	r3, #4
 8001594:	d00e      	beq.n	80015b4 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001596:	4bc0      	ldr	r3, [pc, #768]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	220c      	movs	r2, #12
 800159c:	4013      	ands	r3, r2
 800159e:	2b08      	cmp	r3, #8
 80015a0:	d116      	bne.n	80015d0 <HAL_RCC_OscConfig+0x64>
 80015a2:	4bbd      	ldr	r3, [pc, #756]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	2380      	movs	r3, #128	; 0x80
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	401a      	ands	r2, r3
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	025b      	lsls	r3, r3, #9
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d10d      	bne.n	80015d0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015b4:	4bb8      	ldr	r3, [pc, #736]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	2380      	movs	r3, #128	; 0x80
 80015ba:	029b      	lsls	r3, r3, #10
 80015bc:	4013      	ands	r3, r2
 80015be:	d100      	bne.n	80015c2 <HAL_RCC_OscConfig+0x56>
 80015c0:	e070      	b.n	80016a4 <HAL_RCC_OscConfig+0x138>
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d000      	beq.n	80015cc <HAL_RCC_OscConfig+0x60>
 80015ca:	e06b      	b.n	80016a4 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e2d8      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	685b      	ldr	r3, [r3, #4]
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d107      	bne.n	80015e8 <HAL_RCC_OscConfig+0x7c>
 80015d8:	4baf      	ldr	r3, [pc, #700]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4bae      	ldr	r3, [pc, #696]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015de:	2180      	movs	r1, #128	; 0x80
 80015e0:	0249      	lsls	r1, r1, #9
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e02f      	b.n	8001648 <HAL_RCC_OscConfig+0xdc>
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d10c      	bne.n	800160a <HAL_RCC_OscConfig+0x9e>
 80015f0:	4ba9      	ldr	r3, [pc, #676]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4ba8      	ldr	r3, [pc, #672]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015f6:	49a9      	ldr	r1, [pc, #676]	; (800189c <HAL_RCC_OscConfig+0x330>)
 80015f8:	400a      	ands	r2, r1
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	4ba6      	ldr	r3, [pc, #664]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	4ba5      	ldr	r3, [pc, #660]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001602:	49a7      	ldr	r1, [pc, #668]	; (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001604:	400a      	ands	r2, r1
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	e01e      	b.n	8001648 <HAL_RCC_OscConfig+0xdc>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	2b05      	cmp	r3, #5
 8001610:	d10e      	bne.n	8001630 <HAL_RCC_OscConfig+0xc4>
 8001612:	4ba1      	ldr	r3, [pc, #644]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001614:	681a      	ldr	r2, [r3, #0]
 8001616:	4ba0      	ldr	r3, [pc, #640]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001618:	2180      	movs	r1, #128	; 0x80
 800161a:	02c9      	lsls	r1, r1, #11
 800161c:	430a      	orrs	r2, r1
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	4b9d      	ldr	r3, [pc, #628]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001622:	681a      	ldr	r2, [r3, #0]
 8001624:	4b9c      	ldr	r3, [pc, #624]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001626:	2180      	movs	r1, #128	; 0x80
 8001628:	0249      	lsls	r1, r1, #9
 800162a:	430a      	orrs	r2, r1
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	e00b      	b.n	8001648 <HAL_RCC_OscConfig+0xdc>
 8001630:	4b99      	ldr	r3, [pc, #612]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001632:	681a      	ldr	r2, [r3, #0]
 8001634:	4b98      	ldr	r3, [pc, #608]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001636:	4999      	ldr	r1, [pc, #612]	; (800189c <HAL_RCC_OscConfig+0x330>)
 8001638:	400a      	ands	r2, r1
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	4b96      	ldr	r3, [pc, #600]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	4b95      	ldr	r3, [pc, #596]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001642:	4997      	ldr	r1, [pc, #604]	; (80018a0 <HAL_RCC_OscConfig+0x334>)
 8001644:	400a      	ands	r2, r1
 8001646:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d014      	beq.n	800167a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001650:	f7ff fd1c 	bl	800108c <HAL_GetTick>
 8001654:	0003      	movs	r3, r0
 8001656:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800165a:	f7ff fd17 	bl	800108c <HAL_GetTick>
 800165e:	0002      	movs	r2, r0
 8001660:	69bb      	ldr	r3, [r7, #24]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b64      	cmp	r3, #100	; 0x64
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e28a      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800166c:	4b8a      	ldr	r3, [pc, #552]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	2380      	movs	r3, #128	; 0x80
 8001672:	029b      	lsls	r3, r3, #10
 8001674:	4013      	ands	r3, r2
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0xee>
 8001678:	e015      	b.n	80016a6 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800167a:	f7ff fd07 	bl	800108c <HAL_GetTick>
 800167e:	0003      	movs	r3, r0
 8001680:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001682:	e008      	b.n	8001696 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001684:	f7ff fd02 	bl	800108c <HAL_GetTick>
 8001688:	0002      	movs	r2, r0
 800168a:	69bb      	ldr	r3, [r7, #24]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b64      	cmp	r3, #100	; 0x64
 8001690:	d901      	bls.n	8001696 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001692:	2303      	movs	r3, #3
 8001694:	e275      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001696:	4b80      	ldr	r3, [pc, #512]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001698:	681a      	ldr	r2, [r3, #0]
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	029b      	lsls	r3, r3, #10
 800169e:	4013      	ands	r3, r2
 80016a0:	d1f0      	bne.n	8001684 <HAL_RCC_OscConfig+0x118>
 80016a2:	e000      	b.n	80016a6 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016a4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	2202      	movs	r2, #2
 80016ac:	4013      	ands	r3, r2
 80016ae:	d100      	bne.n	80016b2 <HAL_RCC_OscConfig+0x146>
 80016b0:	e069      	b.n	8001786 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80016b2:	4b79      	ldr	r3, [pc, #484]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	220c      	movs	r2, #12
 80016b8:	4013      	ands	r3, r2
 80016ba:	d00b      	beq.n	80016d4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80016bc:	4b76      	ldr	r3, [pc, #472]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016be:	685b      	ldr	r3, [r3, #4]
 80016c0:	220c      	movs	r2, #12
 80016c2:	4013      	ands	r3, r2
 80016c4:	2b08      	cmp	r3, #8
 80016c6:	d11c      	bne.n	8001702 <HAL_RCC_OscConfig+0x196>
 80016c8:	4b73      	ldr	r3, [pc, #460]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016ca:	685a      	ldr	r2, [r3, #4]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	025b      	lsls	r3, r3, #9
 80016d0:	4013      	ands	r3, r2
 80016d2:	d116      	bne.n	8001702 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80016d4:	4b70      	ldr	r3, [pc, #448]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	2202      	movs	r2, #2
 80016da:	4013      	ands	r3, r2
 80016dc:	d005      	beq.n	80016ea <HAL_RCC_OscConfig+0x17e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	68db      	ldr	r3, [r3, #12]
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d001      	beq.n	80016ea <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80016e6:	2301      	movs	r3, #1
 80016e8:	e24b      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016ea:	4b6b      	ldr	r3, [pc, #428]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	22f8      	movs	r2, #248	; 0xf8
 80016f0:	4393      	bics	r3, r2
 80016f2:	0019      	movs	r1, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	691b      	ldr	r3, [r3, #16]
 80016f8:	00da      	lsls	r2, r3, #3
 80016fa:	4b67      	ldr	r3, [pc, #412]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001700:	e041      	b.n	8001786 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b00      	cmp	r3, #0
 8001708:	d024      	beq.n	8001754 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800170a:	4b63      	ldr	r3, [pc, #396]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800170c:	681a      	ldr	r2, [r3, #0]
 800170e:	4b62      	ldr	r3, [pc, #392]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001710:	2101      	movs	r1, #1
 8001712:	430a      	orrs	r2, r1
 8001714:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001716:	f7ff fcb9 	bl	800108c <HAL_GetTick>
 800171a:	0003      	movs	r3, r0
 800171c:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800171e:	e008      	b.n	8001732 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001720:	f7ff fcb4 	bl	800108c <HAL_GetTick>
 8001724:	0002      	movs	r2, r0
 8001726:	69bb      	ldr	r3, [r7, #24]
 8001728:	1ad3      	subs	r3, r2, r3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d901      	bls.n	8001732 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800172e:	2303      	movs	r3, #3
 8001730:	e227      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001732:	4b59      	ldr	r3, [pc, #356]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2202      	movs	r2, #2
 8001738:	4013      	ands	r3, r2
 800173a:	d0f1      	beq.n	8001720 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173c:	4b56      	ldr	r3, [pc, #344]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	22f8      	movs	r2, #248	; 0xf8
 8001742:	4393      	bics	r3, r2
 8001744:	0019      	movs	r1, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	00da      	lsls	r2, r3, #3
 800174c:	4b52      	ldr	r3, [pc, #328]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800174e:	430a      	orrs	r2, r1
 8001750:	601a      	str	r2, [r3, #0]
 8001752:	e018      	b.n	8001786 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001754:	4b50      	ldr	r3, [pc, #320]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	4b4f      	ldr	r3, [pc, #316]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800175a:	2101      	movs	r1, #1
 800175c:	438a      	bics	r2, r1
 800175e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fc94 	bl	800108c <HAL_GetTick>
 8001764:	0003      	movs	r3, r0
 8001766:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fc8f 	bl	800108c <HAL_GetTick>
 800176e:	0002      	movs	r2, r0
 8001770:	69bb      	ldr	r3, [r7, #24]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e202      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800177c:	4b46      	ldr	r3, [pc, #280]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	2202      	movs	r2, #2
 8001782:	4013      	ands	r3, r2
 8001784:	d1f1      	bne.n	800176a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	2208      	movs	r2, #8
 800178c:	4013      	ands	r3, r2
 800178e:	d036      	beq.n	80017fe <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	69db      	ldr	r3, [r3, #28]
 8001794:	2b00      	cmp	r3, #0
 8001796:	d019      	beq.n	80017cc <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001798:	4b3f      	ldr	r3, [pc, #252]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800179a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800179c:	4b3e      	ldr	r3, [pc, #248]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800179e:	2101      	movs	r1, #1
 80017a0:	430a      	orrs	r2, r1
 80017a2:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a4:	f7ff fc72 	bl	800108c <HAL_GetTick>
 80017a8:	0003      	movs	r3, r0
 80017aa:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ac:	e008      	b.n	80017c0 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017ae:	f7ff fc6d 	bl	800108c <HAL_GetTick>
 80017b2:	0002      	movs	r2, r0
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d901      	bls.n	80017c0 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 80017bc:	2303      	movs	r3, #3
 80017be:	e1e0      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017c0:	4b35      	ldr	r3, [pc, #212]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80017c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c4:	2202      	movs	r2, #2
 80017c6:	4013      	ands	r3, r2
 80017c8:	d0f1      	beq.n	80017ae <HAL_RCC_OscConfig+0x242>
 80017ca:	e018      	b.n	80017fe <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80017cc:	4b32      	ldr	r3, [pc, #200]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80017ce:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80017d0:	4b31      	ldr	r3, [pc, #196]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80017d2:	2101      	movs	r1, #1
 80017d4:	438a      	bics	r2, r1
 80017d6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017d8:	f7ff fc58 	bl	800108c <HAL_GetTick>
 80017dc:	0003      	movs	r3, r0
 80017de:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017e0:	e008      	b.n	80017f4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80017e2:	f7ff fc53 	bl	800108c <HAL_GetTick>
 80017e6:	0002      	movs	r2, r0
 80017e8:	69bb      	ldr	r3, [r7, #24]
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d901      	bls.n	80017f4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	e1c6      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80017f4:	4b28      	ldr	r3, [pc, #160]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 80017f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017f8:	2202      	movs	r2, #2
 80017fa:	4013      	ands	r3, r2
 80017fc:	d1f1      	bne.n	80017e2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	2204      	movs	r2, #4
 8001804:	4013      	ands	r3, r2
 8001806:	d100      	bne.n	800180a <HAL_RCC_OscConfig+0x29e>
 8001808:	e0b4      	b.n	8001974 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 800180a:	201f      	movs	r0, #31
 800180c:	183b      	adds	r3, r7, r0
 800180e:	2200      	movs	r2, #0
 8001810:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001812:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001814:	69da      	ldr	r2, [r3, #28]
 8001816:	2380      	movs	r3, #128	; 0x80
 8001818:	055b      	lsls	r3, r3, #21
 800181a:	4013      	ands	r3, r2
 800181c:	d110      	bne.n	8001840 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800181e:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001820:	69da      	ldr	r2, [r3, #28]
 8001822:	4b1d      	ldr	r3, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001824:	2180      	movs	r1, #128	; 0x80
 8001826:	0549      	lsls	r1, r1, #21
 8001828:	430a      	orrs	r2, r1
 800182a:	61da      	str	r2, [r3, #28]
 800182c:	4b1a      	ldr	r3, [pc, #104]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800182e:	69da      	ldr	r2, [r3, #28]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	055b      	lsls	r3, r3, #21
 8001834:	4013      	ands	r3, r2
 8001836:	60fb      	str	r3, [r7, #12]
 8001838:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800183a:	183b      	adds	r3, r7, r0
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001840:	4b18      	ldr	r3, [pc, #96]	; (80018a4 <HAL_RCC_OscConfig+0x338>)
 8001842:	681a      	ldr	r2, [r3, #0]
 8001844:	2380      	movs	r3, #128	; 0x80
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4013      	ands	r3, r2
 800184a:	d11a      	bne.n	8001882 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800184c:	4b15      	ldr	r3, [pc, #84]	; (80018a4 <HAL_RCC_OscConfig+0x338>)
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	4b14      	ldr	r3, [pc, #80]	; (80018a4 <HAL_RCC_OscConfig+0x338>)
 8001852:	2180      	movs	r1, #128	; 0x80
 8001854:	0049      	lsls	r1, r1, #1
 8001856:	430a      	orrs	r2, r1
 8001858:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800185a:	f7ff fc17 	bl	800108c <HAL_GetTick>
 800185e:	0003      	movs	r3, r0
 8001860:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001862:	e008      	b.n	8001876 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001864:	f7ff fc12 	bl	800108c <HAL_GetTick>
 8001868:	0002      	movs	r2, r0
 800186a:	69bb      	ldr	r3, [r7, #24]
 800186c:	1ad3      	subs	r3, r2, r3
 800186e:	2b64      	cmp	r3, #100	; 0x64
 8001870:	d901      	bls.n	8001876 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001872:	2303      	movs	r3, #3
 8001874:	e185      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001876:	4b0b      	ldr	r3, [pc, #44]	; (80018a4 <HAL_RCC_OscConfig+0x338>)
 8001878:	681a      	ldr	r2, [r3, #0]
 800187a:	2380      	movs	r3, #128	; 0x80
 800187c:	005b      	lsls	r3, r3, #1
 800187e:	4013      	ands	r3, r2
 8001880:	d0f0      	beq.n	8001864 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d10e      	bne.n	80018a8 <HAL_RCC_OscConfig+0x33c>
 800188a:	4b03      	ldr	r3, [pc, #12]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 800188c:	6a1a      	ldr	r2, [r3, #32]
 800188e:	4b02      	ldr	r3, [pc, #8]	; (8001898 <HAL_RCC_OscConfig+0x32c>)
 8001890:	2101      	movs	r1, #1
 8001892:	430a      	orrs	r2, r1
 8001894:	621a      	str	r2, [r3, #32]
 8001896:	e035      	b.n	8001904 <HAL_RCC_OscConfig+0x398>
 8001898:	40021000 	.word	0x40021000
 800189c:	fffeffff 	.word	0xfffeffff
 80018a0:	fffbffff 	.word	0xfffbffff
 80018a4:	40007000 	.word	0x40007000
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d10c      	bne.n	80018ca <HAL_RCC_OscConfig+0x35e>
 80018b0:	4bb6      	ldr	r3, [pc, #728]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018b2:	6a1a      	ldr	r2, [r3, #32]
 80018b4:	4bb5      	ldr	r3, [pc, #724]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018b6:	2101      	movs	r1, #1
 80018b8:	438a      	bics	r2, r1
 80018ba:	621a      	str	r2, [r3, #32]
 80018bc:	4bb3      	ldr	r3, [pc, #716]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018be:	6a1a      	ldr	r2, [r3, #32]
 80018c0:	4bb2      	ldr	r3, [pc, #712]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018c2:	2104      	movs	r1, #4
 80018c4:	438a      	bics	r2, r1
 80018c6:	621a      	str	r2, [r3, #32]
 80018c8:	e01c      	b.n	8001904 <HAL_RCC_OscConfig+0x398>
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	689b      	ldr	r3, [r3, #8]
 80018ce:	2b05      	cmp	r3, #5
 80018d0:	d10c      	bne.n	80018ec <HAL_RCC_OscConfig+0x380>
 80018d2:	4bae      	ldr	r3, [pc, #696]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018d4:	6a1a      	ldr	r2, [r3, #32]
 80018d6:	4bad      	ldr	r3, [pc, #692]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018d8:	2104      	movs	r1, #4
 80018da:	430a      	orrs	r2, r1
 80018dc:	621a      	str	r2, [r3, #32]
 80018de:	4bab      	ldr	r3, [pc, #684]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018e0:	6a1a      	ldr	r2, [r3, #32]
 80018e2:	4baa      	ldr	r3, [pc, #680]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018e4:	2101      	movs	r1, #1
 80018e6:	430a      	orrs	r2, r1
 80018e8:	621a      	str	r2, [r3, #32]
 80018ea:	e00b      	b.n	8001904 <HAL_RCC_OscConfig+0x398>
 80018ec:	4ba7      	ldr	r3, [pc, #668]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018ee:	6a1a      	ldr	r2, [r3, #32]
 80018f0:	4ba6      	ldr	r3, [pc, #664]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018f2:	2101      	movs	r1, #1
 80018f4:	438a      	bics	r2, r1
 80018f6:	621a      	str	r2, [r3, #32]
 80018f8:	4ba4      	ldr	r3, [pc, #656]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018fa:	6a1a      	ldr	r2, [r3, #32]
 80018fc:	4ba3      	ldr	r3, [pc, #652]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80018fe:	2104      	movs	r1, #4
 8001900:	438a      	bics	r2, r1
 8001902:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d014      	beq.n	8001936 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800190c:	f7ff fbbe 	bl	800108c <HAL_GetTick>
 8001910:	0003      	movs	r3, r0
 8001912:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001914:	e009      	b.n	800192a <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001916:	f7ff fbb9 	bl	800108c <HAL_GetTick>
 800191a:	0002      	movs	r2, r0
 800191c:	69bb      	ldr	r3, [r7, #24]
 800191e:	1ad3      	subs	r3, r2, r3
 8001920:	4a9b      	ldr	r2, [pc, #620]	; (8001b90 <HAL_RCC_OscConfig+0x624>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d901      	bls.n	800192a <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001926:	2303      	movs	r3, #3
 8001928:	e12b      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800192a:	4b98      	ldr	r3, [pc, #608]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	2202      	movs	r2, #2
 8001930:	4013      	ands	r3, r2
 8001932:	d0f0      	beq.n	8001916 <HAL_RCC_OscConfig+0x3aa>
 8001934:	e013      	b.n	800195e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001936:	f7ff fba9 	bl	800108c <HAL_GetTick>
 800193a:	0003      	movs	r3, r0
 800193c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800193e:	e009      	b.n	8001954 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001940:	f7ff fba4 	bl	800108c <HAL_GetTick>
 8001944:	0002      	movs	r2, r0
 8001946:	69bb      	ldr	r3, [r7, #24]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	4a91      	ldr	r2, [pc, #580]	; (8001b90 <HAL_RCC_OscConfig+0x624>)
 800194c:	4293      	cmp	r3, r2
 800194e:	d901      	bls.n	8001954 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8001950:	2303      	movs	r3, #3
 8001952:	e116      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001954:	4b8d      	ldr	r3, [pc, #564]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001956:	6a1b      	ldr	r3, [r3, #32]
 8001958:	2202      	movs	r2, #2
 800195a:	4013      	ands	r3, r2
 800195c:	d1f0      	bne.n	8001940 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800195e:	231f      	movs	r3, #31
 8001960:	18fb      	adds	r3, r7, r3
 8001962:	781b      	ldrb	r3, [r3, #0]
 8001964:	2b01      	cmp	r3, #1
 8001966:	d105      	bne.n	8001974 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001968:	4b88      	ldr	r3, [pc, #544]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 800196a:	69da      	ldr	r2, [r3, #28]
 800196c:	4b87      	ldr	r3, [pc, #540]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 800196e:	4989      	ldr	r1, [pc, #548]	; (8001b94 <HAL_RCC_OscConfig+0x628>)
 8001970:	400a      	ands	r2, r1
 8001972:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	2210      	movs	r2, #16
 800197a:	4013      	ands	r3, r2
 800197c:	d063      	beq.n	8001a46 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	695b      	ldr	r3, [r3, #20]
 8001982:	2b01      	cmp	r3, #1
 8001984:	d12a      	bne.n	80019dc <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001986:	4b81      	ldr	r3, [pc, #516]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001988:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800198a:	4b80      	ldr	r3, [pc, #512]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 800198c:	2104      	movs	r1, #4
 800198e:	430a      	orrs	r2, r1
 8001990:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8001992:	4b7e      	ldr	r3, [pc, #504]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001994:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001996:	4b7d      	ldr	r3, [pc, #500]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001998:	2101      	movs	r1, #1
 800199a:	430a      	orrs	r2, r1
 800199c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800199e:	f7ff fb75 	bl	800108c <HAL_GetTick>
 80019a2:	0003      	movs	r3, r0
 80019a4:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019a6:	e008      	b.n	80019ba <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80019a8:	f7ff fb70 	bl	800108c <HAL_GetTick>
 80019ac:	0002      	movs	r2, r0
 80019ae:	69bb      	ldr	r3, [r7, #24]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	2b02      	cmp	r3, #2
 80019b4:	d901      	bls.n	80019ba <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 80019b6:	2303      	movs	r3, #3
 80019b8:	e0e3      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80019ba:	4b74      	ldr	r3, [pc, #464]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019be:	2202      	movs	r2, #2
 80019c0:	4013      	ands	r3, r2
 80019c2:	d0f1      	beq.n	80019a8 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019c4:	4b71      	ldr	r3, [pc, #452]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019c8:	22f8      	movs	r2, #248	; 0xf8
 80019ca:	4393      	bics	r3, r2
 80019cc:	0019      	movs	r1, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	699b      	ldr	r3, [r3, #24]
 80019d2:	00da      	lsls	r2, r3, #3
 80019d4:	4b6d      	ldr	r3, [pc, #436]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019d6:	430a      	orrs	r2, r1
 80019d8:	635a      	str	r2, [r3, #52]	; 0x34
 80019da:	e034      	b.n	8001a46 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	695b      	ldr	r3, [r3, #20]
 80019e0:	3305      	adds	r3, #5
 80019e2:	d111      	bne.n	8001a08 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80019e4:	4b69      	ldr	r3, [pc, #420]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019e6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80019e8:	4b68      	ldr	r3, [pc, #416]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019ea:	2104      	movs	r1, #4
 80019ec:	438a      	bics	r2, r1
 80019ee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80019f0:	4b66      	ldr	r3, [pc, #408]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 80019f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019f4:	22f8      	movs	r2, #248	; 0xf8
 80019f6:	4393      	bics	r3, r2
 80019f8:	0019      	movs	r1, r3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	699b      	ldr	r3, [r3, #24]
 80019fe:	00da      	lsls	r2, r3, #3
 8001a00:	4b62      	ldr	r3, [pc, #392]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a02:	430a      	orrs	r2, r1
 8001a04:	635a      	str	r2, [r3, #52]	; 0x34
 8001a06:	e01e      	b.n	8001a46 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8001a08:	4b60      	ldr	r3, [pc, #384]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a0a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a0c:	4b5f      	ldr	r3, [pc, #380]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a0e:	2104      	movs	r1, #4
 8001a10:	430a      	orrs	r2, r1
 8001a12:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8001a14:	4b5d      	ldr	r3, [pc, #372]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a16:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a18:	4b5c      	ldr	r3, [pc, #368]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a1a:	2101      	movs	r1, #1
 8001a1c:	438a      	bics	r2, r1
 8001a1e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a20:	f7ff fb34 	bl	800108c <HAL_GetTick>
 8001a24:	0003      	movs	r3, r0
 8001a26:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a28:	e008      	b.n	8001a3c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8001a2a:	f7ff fb2f 	bl	800108c <HAL_GetTick>
 8001a2e:	0002      	movs	r2, r0
 8001a30:	69bb      	ldr	r3, [r7, #24]
 8001a32:	1ad3      	subs	r3, r2, r3
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d901      	bls.n	8001a3c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8001a38:	2303      	movs	r3, #3
 8001a3a:	e0a2      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8001a3c:	4b53      	ldr	r3, [pc, #332]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a40:	2202      	movs	r2, #2
 8001a42:	4013      	ands	r3, r2
 8001a44:	d1f1      	bne.n	8001a2a <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	6a1b      	ldr	r3, [r3, #32]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d100      	bne.n	8001a50 <HAL_RCC_OscConfig+0x4e4>
 8001a4e:	e097      	b.n	8001b80 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a50:	4b4e      	ldr	r3, [pc, #312]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a52:	685b      	ldr	r3, [r3, #4]
 8001a54:	220c      	movs	r2, #12
 8001a56:	4013      	ands	r3, r2
 8001a58:	2b08      	cmp	r3, #8
 8001a5a:	d100      	bne.n	8001a5e <HAL_RCC_OscConfig+0x4f2>
 8001a5c:	e06b      	b.n	8001b36 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a1b      	ldr	r3, [r3, #32]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d14c      	bne.n	8001b00 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a66:	4b49      	ldr	r3, [pc, #292]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	4b48      	ldr	r3, [pc, #288]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a6c:	494a      	ldr	r1, [pc, #296]	; (8001b98 <HAL_RCC_OscConfig+0x62c>)
 8001a6e:	400a      	ands	r2, r1
 8001a70:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a72:	f7ff fb0b 	bl	800108c <HAL_GetTick>
 8001a76:	0003      	movs	r3, r0
 8001a78:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7a:	e008      	b.n	8001a8e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a7c:	f7ff fb06 	bl	800108c <HAL_GetTick>
 8001a80:	0002      	movs	r2, r0
 8001a82:	69bb      	ldr	r3, [r7, #24]
 8001a84:	1ad3      	subs	r3, r2, r3
 8001a86:	2b02      	cmp	r3, #2
 8001a88:	d901      	bls.n	8001a8e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	e079      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a8e:	4b3f      	ldr	r3, [pc, #252]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	2380      	movs	r3, #128	; 0x80
 8001a94:	049b      	lsls	r3, r3, #18
 8001a96:	4013      	ands	r3, r2
 8001a98:	d1f0      	bne.n	8001a7c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a9a:	4b3c      	ldr	r3, [pc, #240]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001a9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	4393      	bics	r3, r2
 8001aa2:	0019      	movs	r1, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa8:	4b38      	ldr	r3, [pc, #224]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001aaa:	430a      	orrs	r2, r1
 8001aac:	62da      	str	r2, [r3, #44]	; 0x2c
 8001aae:	4b37      	ldr	r3, [pc, #220]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001ab0:	685b      	ldr	r3, [r3, #4]
 8001ab2:	4a3a      	ldr	r2, [pc, #232]	; (8001b9c <HAL_RCC_OscConfig+0x630>)
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ac0:	431a      	orrs	r2, r3
 8001ac2:	4b32      	ldr	r3, [pc, #200]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001ac4:	430a      	orrs	r2, r1
 8001ac6:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ac8:	4b30      	ldr	r3, [pc, #192]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	4b2f      	ldr	r3, [pc, #188]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001ace:	2180      	movs	r1, #128	; 0x80
 8001ad0:	0449      	lsls	r1, r1, #17
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad6:	f7ff fad9 	bl	800108c <HAL_GetTick>
 8001ada:	0003      	movs	r3, r0
 8001adc:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ae0:	f7ff fad4 	bl	800108c <HAL_GetTick>
 8001ae4:	0002      	movs	r2, r0
 8001ae6:	69bb      	ldr	r3, [r7, #24]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b02      	cmp	r3, #2
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e047      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af2:	4b26      	ldr	r3, [pc, #152]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001af4:	681a      	ldr	r2, [r3, #0]
 8001af6:	2380      	movs	r3, #128	; 0x80
 8001af8:	049b      	lsls	r3, r3, #18
 8001afa:	4013      	ands	r3, r2
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x574>
 8001afe:	e03f      	b.n	8001b80 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b00:	4b22      	ldr	r3, [pc, #136]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	4b21      	ldr	r3, [pc, #132]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001b06:	4924      	ldr	r1, [pc, #144]	; (8001b98 <HAL_RCC_OscConfig+0x62c>)
 8001b08:	400a      	ands	r2, r1
 8001b0a:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0c:	f7ff fabe 	bl	800108c <HAL_GetTick>
 8001b10:	0003      	movs	r3, r0
 8001b12:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b14:	e008      	b.n	8001b28 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b16:	f7ff fab9 	bl	800108c <HAL_GetTick>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	69bb      	ldr	r3, [r7, #24]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d901      	bls.n	8001b28 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8001b24:	2303      	movs	r3, #3
 8001b26:	e02c      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001b28:	4b18      	ldr	r3, [pc, #96]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	2380      	movs	r3, #128	; 0x80
 8001b2e:	049b      	lsls	r3, r3, #18
 8001b30:	4013      	ands	r3, r2
 8001b32:	d1f0      	bne.n	8001b16 <HAL_RCC_OscConfig+0x5aa>
 8001b34:	e024      	b.n	8001b80 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6a1b      	ldr	r3, [r3, #32]
 8001b3a:	2b01      	cmp	r3, #1
 8001b3c:	d101      	bne.n	8001b42 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e01f      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8001b42:	4b12      	ldr	r3, [pc, #72]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8001b48:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <HAL_RCC_OscConfig+0x620>)
 8001b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b4c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	697a      	ldr	r2, [r7, #20]
 8001b50:	2380      	movs	r3, #128	; 0x80
 8001b52:	025b      	lsls	r3, r3, #9
 8001b54:	401a      	ands	r2, r3
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b5a:	429a      	cmp	r2, r3
 8001b5c:	d10e      	bne.n	8001b7c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	220f      	movs	r2, #15
 8001b62:	401a      	ands	r2, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	d107      	bne.n	8001b7c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8001b6c:	697a      	ldr	r2, [r7, #20]
 8001b6e:	23f0      	movs	r3, #240	; 0xf0
 8001b70:	039b      	lsls	r3, r3, #14
 8001b72:	401a      	ands	r2, r3
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d001      	beq.n	8001b80 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e000      	b.n	8001b82 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8001b80:	2300      	movs	r3, #0
}
 8001b82:	0018      	movs	r0, r3
 8001b84:	46bd      	mov	sp, r7
 8001b86:	b008      	add	sp, #32
 8001b88:	bd80      	pop	{r7, pc}
 8001b8a:	46c0      	nop			; (mov r8, r8)
 8001b8c:	40021000 	.word	0x40021000
 8001b90:	00001388 	.word	0x00001388
 8001b94:	efffffff 	.word	0xefffffff
 8001b98:	feffffff 	.word	0xfeffffff
 8001b9c:	ffc2ffff 	.word	0xffc2ffff

08001ba0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
 8001ba8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d101      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0b3      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bb4:	4b5b      	ldr	r3, [pc, #364]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	2201      	movs	r2, #1
 8001bba:	4013      	ands	r3, r2
 8001bbc:	683a      	ldr	r2, [r7, #0]
 8001bbe:	429a      	cmp	r2, r3
 8001bc0:	d911      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bc2:	4b58      	ldr	r3, [pc, #352]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	4393      	bics	r3, r2
 8001bca:	0019      	movs	r1, r3
 8001bcc:	4b55      	ldr	r3, [pc, #340]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001bce:	683a      	ldr	r2, [r7, #0]
 8001bd0:	430a      	orrs	r2, r1
 8001bd2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bd4:	4b53      	ldr	r3, [pc, #332]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2201      	movs	r2, #1
 8001bda:	4013      	ands	r3, r2
 8001bdc:	683a      	ldr	r2, [r7, #0]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d001      	beq.n	8001be6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e09a      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	2202      	movs	r2, #2
 8001bec:	4013      	ands	r3, r2
 8001bee:	d015      	beq.n	8001c1c <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2204      	movs	r2, #4
 8001bf6:	4013      	ands	r3, r2
 8001bf8:	d006      	beq.n	8001c08 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001bfa:	4b4b      	ldr	r3, [pc, #300]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001bfc:	685a      	ldr	r2, [r3, #4]
 8001bfe:	4b4a      	ldr	r3, [pc, #296]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c00:	21e0      	movs	r1, #224	; 0xe0
 8001c02:	00c9      	lsls	r1, r1, #3
 8001c04:	430a      	orrs	r2, r1
 8001c06:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c08:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	22f0      	movs	r2, #240	; 0xf0
 8001c0e:	4393      	bics	r3, r2
 8001c10:	0019      	movs	r1, r3
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689a      	ldr	r2, [r3, #8]
 8001c16:	4b44      	ldr	r3, [pc, #272]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	2201      	movs	r2, #1
 8001c22:	4013      	ands	r3, r2
 8001c24:	d040      	beq.n	8001ca8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	2b01      	cmp	r3, #1
 8001c2c:	d107      	bne.n	8001c3e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c2e:	4b3e      	ldr	r3, [pc, #248]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	2380      	movs	r3, #128	; 0x80
 8001c34:	029b      	lsls	r3, r3, #10
 8001c36:	4013      	ands	r3, r2
 8001c38:	d114      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	e06e      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	2b02      	cmp	r3, #2
 8001c44:	d107      	bne.n	8001c56 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c46:	4b38      	ldr	r3, [pc, #224]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	049b      	lsls	r3, r3, #18
 8001c4e:	4013      	ands	r3, r2
 8001c50:	d108      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e062      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	2202      	movs	r2, #2
 8001c5c:	4013      	ands	r3, r2
 8001c5e:	d101      	bne.n	8001c64 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8001c60:	2301      	movs	r3, #1
 8001c62:	e05b      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c64:	4b30      	ldr	r3, [pc, #192]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2203      	movs	r2, #3
 8001c6a:	4393      	bics	r3, r2
 8001c6c:	0019      	movs	r1, r3
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685a      	ldr	r2, [r3, #4]
 8001c72:	4b2d      	ldr	r3, [pc, #180]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c74:	430a      	orrs	r2, r1
 8001c76:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001c78:	f7ff fa08 	bl	800108c <HAL_GetTick>
 8001c7c:	0003      	movs	r3, r0
 8001c7e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c80:	e009      	b.n	8001c96 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c82:	f7ff fa03 	bl	800108c <HAL_GetTick>
 8001c86:	0002      	movs	r2, r0
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	1ad3      	subs	r3, r2, r3
 8001c8c:	4a27      	ldr	r2, [pc, #156]	; (8001d2c <HAL_RCC_ClockConfig+0x18c>)
 8001c8e:	4293      	cmp	r3, r2
 8001c90:	d901      	bls.n	8001c96 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8001c92:	2303      	movs	r3, #3
 8001c94:	e042      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c96:	4b24      	ldr	r3, [pc, #144]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	220c      	movs	r2, #12
 8001c9c:	401a      	ands	r2, r3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d1ec      	bne.n	8001c82 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ca8:	4b1e      	ldr	r3, [pc, #120]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	2201      	movs	r2, #1
 8001cae:	4013      	ands	r3, r2
 8001cb0:	683a      	ldr	r2, [r7, #0]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d211      	bcs.n	8001cda <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cb6:	4b1b      	ldr	r3, [pc, #108]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	2201      	movs	r2, #1
 8001cbc:	4393      	bics	r3, r2
 8001cbe:	0019      	movs	r1, r3
 8001cc0:	4b18      	ldr	r3, [pc, #96]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cc8:	4b16      	ldr	r3, [pc, #88]	; (8001d24 <HAL_RCC_ClockConfig+0x184>)
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	2201      	movs	r2, #1
 8001cce:	4013      	ands	r3, r2
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	429a      	cmp	r2, r3
 8001cd4:	d001      	beq.n	8001cda <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e020      	b.n	8001d1c <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	2204      	movs	r2, #4
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	d009      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ce4:	4b10      	ldr	r3, [pc, #64]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	4a11      	ldr	r2, [pc, #68]	; (8001d30 <HAL_RCC_ClockConfig+0x190>)
 8001cea:	4013      	ands	r3, r2
 8001cec:	0019      	movs	r1, r3
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	68da      	ldr	r2, [r3, #12]
 8001cf2:	4b0d      	ldr	r3, [pc, #52]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001cf4:	430a      	orrs	r2, r1
 8001cf6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001cf8:	f000 f820 	bl	8001d3c <HAL_RCC_GetSysClockFreq>
 8001cfc:	0001      	movs	r1, r0
 8001cfe:	4b0a      	ldr	r3, [pc, #40]	; (8001d28 <HAL_RCC_ClockConfig+0x188>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	091b      	lsrs	r3, r3, #4
 8001d04:	220f      	movs	r2, #15
 8001d06:	4013      	ands	r3, r2
 8001d08:	4a0a      	ldr	r2, [pc, #40]	; (8001d34 <HAL_RCC_ClockConfig+0x194>)
 8001d0a:	5cd3      	ldrb	r3, [r2, r3]
 8001d0c:	000a      	movs	r2, r1
 8001d0e:	40da      	lsrs	r2, r3
 8001d10:	4b09      	ldr	r3, [pc, #36]	; (8001d38 <HAL_RCC_ClockConfig+0x198>)
 8001d12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001d14:	2003      	movs	r0, #3
 8001d16:	f7ff f973 	bl	8001000 <HAL_InitTick>
  
  return HAL_OK;
 8001d1a:	2300      	movs	r3, #0
}
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	b004      	add	sp, #16
 8001d22:	bd80      	pop	{r7, pc}
 8001d24:	40022000 	.word	0x40022000
 8001d28:	40021000 	.word	0x40021000
 8001d2c:	00001388 	.word	0x00001388
 8001d30:	fffff8ff 	.word	0xfffff8ff
 8001d34:	08002cd4 	.word	0x08002cd4
 8001d38:	20000000 	.word	0x20000000

08001d3c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d3c:	b590      	push	{r4, r7, lr}
 8001d3e:	b08f      	sub	sp, #60	; 0x3c
 8001d40:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8001d42:	2314      	movs	r3, #20
 8001d44:	18fb      	adds	r3, r7, r3
 8001d46:	4a2b      	ldr	r2, [pc, #172]	; (8001df4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8001d48:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d4a:	c313      	stmia	r3!, {r0, r1, r4}
 8001d4c:	6812      	ldr	r2, [r2, #0]
 8001d4e:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	4a29      	ldr	r2, [pc, #164]	; (8001df8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001d54:	ca13      	ldmia	r2!, {r0, r1, r4}
 8001d56:	c313      	stmia	r3!, {r0, r1, r4}
 8001d58:	6812      	ldr	r2, [r2, #0]
 8001d5a:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d60:	2300      	movs	r3, #0
 8001d62:	62bb      	str	r3, [r7, #40]	; 0x28
 8001d64:	2300      	movs	r3, #0
 8001d66:	637b      	str	r3, [r7, #52]	; 0x34
 8001d68:	2300      	movs	r3, #0
 8001d6a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8001d70:	4b22      	ldr	r3, [pc, #136]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d72:	685b      	ldr	r3, [r3, #4]
 8001d74:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001d76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d78:	220c      	movs	r2, #12
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d002      	beq.n	8001d86 <HAL_RCC_GetSysClockFreq+0x4a>
 8001d80:	2b08      	cmp	r3, #8
 8001d82:	d003      	beq.n	8001d8c <HAL_RCC_GetSysClockFreq+0x50>
 8001d84:	e02d      	b.n	8001de2 <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001d88:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001d8a:	e02d      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8001d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d8e:	0c9b      	lsrs	r3, r3, #18
 8001d90:	220f      	movs	r2, #15
 8001d92:	4013      	ands	r3, r2
 8001d94:	2214      	movs	r2, #20
 8001d96:	18ba      	adds	r2, r7, r2
 8001d98:	5cd3      	ldrb	r3, [r2, r3]
 8001d9a:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_RCC_GetSysClockFreq+0xc0>)
 8001d9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001da0:	220f      	movs	r2, #15
 8001da2:	4013      	ands	r3, r2
 8001da4:	1d3a      	adds	r2, r7, #4
 8001da6:	5cd3      	ldrb	r3, [r2, r3]
 8001da8:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8001daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dac:	2380      	movs	r3, #128	; 0x80
 8001dae:	025b      	lsls	r3, r3, #9
 8001db0:	4013      	ands	r3, r2
 8001db2:	d009      	beq.n	8001dc8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8001db4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001db6:	4812      	ldr	r0, [pc, #72]	; (8001e00 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001db8:	f7fe f9a6 	bl	8000108 <__udivsi3>
 8001dbc:	0003      	movs	r3, r0
 8001dbe:	001a      	movs	r2, r3
 8001dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc2:	4353      	muls	r3, r2
 8001dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8001dc6:	e009      	b.n	8001ddc <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8001dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001dca:	000a      	movs	r2, r1
 8001dcc:	0152      	lsls	r2, r2, #5
 8001dce:	1a52      	subs	r2, r2, r1
 8001dd0:	0193      	lsls	r3, r2, #6
 8001dd2:	1a9b      	subs	r3, r3, r2
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	185b      	adds	r3, r3, r1
 8001dd8:	021b      	lsls	r3, r3, #8
 8001dda:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 8001ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001dde:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001de0:	e002      	b.n	8001de8 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001de2:	4b08      	ldr	r3, [pc, #32]	; (8001e04 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8001de6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8001de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8001dea:	0018      	movs	r0, r3
 8001dec:	46bd      	mov	sp, r7
 8001dee:	b00f      	add	sp, #60	; 0x3c
 8001df0:	bd90      	pop	{r4, r7, pc}
 8001df2:	46c0      	nop			; (mov r8, r8)
 8001df4:	08002cb4 	.word	0x08002cb4
 8001df8:	08002cc4 	.word	0x08002cc4
 8001dfc:	40021000 	.word	0x40021000
 8001e00:	00f42400 	.word	0x00f42400
 8001e04:	007a1200 	.word	0x007a1200

08001e08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b084      	sub	sp, #16
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d101      	bne.n	8001e1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e0a8      	b.n	8001f6c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d109      	bne.n	8001e36 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	685a      	ldr	r2, [r3, #4]
 8001e26:	2382      	movs	r3, #130	; 0x82
 8001e28:	005b      	lsls	r3, r3, #1
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d009      	beq.n	8001e42 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	2200      	movs	r2, #0
 8001e32:	61da      	str	r2, [r3, #28]
 8001e34:	e005      	b.n	8001e42 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	2200      	movs	r2, #0
 8001e40:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	225d      	movs	r2, #93	; 0x5d
 8001e4c:	5c9b      	ldrb	r3, [r3, r2]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d107      	bne.n	8001e64 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	225c      	movs	r2, #92	; 0x5c
 8001e58:	2100      	movs	r1, #0
 8001e5a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	0018      	movs	r0, r3
 8001e60:	f7ff f828 	bl	8000eb4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	225d      	movs	r2, #93	; 0x5d
 8001e68:	2102      	movs	r1, #2
 8001e6a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	681a      	ldr	r2, [r3, #0]
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	2140      	movs	r1, #64	; 0x40
 8001e78:	438a      	bics	r2, r1
 8001e7a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	68da      	ldr	r2, [r3, #12]
 8001e80:	23e0      	movs	r3, #224	; 0xe0
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d902      	bls.n	8001e8e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	e002      	b.n	8001e94 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001e8e:	2380      	movs	r3, #128	; 0x80
 8001e90:	015b      	lsls	r3, r3, #5
 8001e92:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	68da      	ldr	r2, [r3, #12]
 8001e98:	23f0      	movs	r3, #240	; 0xf0
 8001e9a:	011b      	lsls	r3, r3, #4
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d008      	beq.n	8001eb2 <HAL_SPI_Init+0xaa>
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	68da      	ldr	r2, [r3, #12]
 8001ea4:	23e0      	movs	r3, #224	; 0xe0
 8001ea6:	00db      	lsls	r3, r3, #3
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d002      	beq.n	8001eb2 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	2382      	movs	r3, #130	; 0x82
 8001eb8:	005b      	lsls	r3, r3, #1
 8001eba:	401a      	ands	r2, r3
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6899      	ldr	r1, [r3, #8]
 8001ec0:	2384      	movs	r3, #132	; 0x84
 8001ec2:	021b      	lsls	r3, r3, #8
 8001ec4:	400b      	ands	r3, r1
 8001ec6:	431a      	orrs	r2, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	691b      	ldr	r3, [r3, #16]
 8001ecc:	2102      	movs	r1, #2
 8001ece:	400b      	ands	r3, r1
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	2101      	movs	r1, #1
 8001ed8:	400b      	ands	r3, r1
 8001eda:	431a      	orrs	r2, r3
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6999      	ldr	r1, [r3, #24]
 8001ee0:	2380      	movs	r3, #128	; 0x80
 8001ee2:	009b      	lsls	r3, r3, #2
 8001ee4:	400b      	ands	r3, r1
 8001ee6:	431a      	orrs	r2, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	2138      	movs	r1, #56	; 0x38
 8001eee:	400b      	ands	r3, r1
 8001ef0:	431a      	orrs	r2, r3
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6a1b      	ldr	r3, [r3, #32]
 8001ef6:	2180      	movs	r1, #128	; 0x80
 8001ef8:	400b      	ands	r3, r1
 8001efa:	431a      	orrs	r2, r3
 8001efc:	0011      	movs	r1, r2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f02:	2380      	movs	r3, #128	; 0x80
 8001f04:	019b      	lsls	r3, r3, #6
 8001f06:	401a      	ands	r2, r3
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	430a      	orrs	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	699b      	ldr	r3, [r3, #24]
 8001f14:	0c1b      	lsrs	r3, r3, #16
 8001f16:	2204      	movs	r2, #4
 8001f18:	401a      	ands	r2, r3
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1e:	2110      	movs	r1, #16
 8001f20:	400b      	ands	r3, r1
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f28:	2108      	movs	r1, #8
 8001f2a:	400b      	ands	r3, r1
 8001f2c:	431a      	orrs	r2, r3
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	68d9      	ldr	r1, [r3, #12]
 8001f32:	23f0      	movs	r3, #240	; 0xf0
 8001f34:	011b      	lsls	r3, r3, #4
 8001f36:	400b      	ands	r3, r1
 8001f38:	431a      	orrs	r2, r3
 8001f3a:	0011      	movs	r1, r2
 8001f3c:	68fa      	ldr	r2, [r7, #12]
 8001f3e:	2380      	movs	r3, #128	; 0x80
 8001f40:	015b      	lsls	r3, r3, #5
 8001f42:	401a      	ands	r2, r3
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	430a      	orrs	r2, r1
 8001f4a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	69da      	ldr	r2, [r3, #28]
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4907      	ldr	r1, [pc, #28]	; (8001f74 <HAL_SPI_Init+0x16c>)
 8001f58:	400a      	ands	r2, r1
 8001f5a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	225d      	movs	r2, #93	; 0x5d
 8001f66:	2101      	movs	r1, #1
 8001f68:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001f6a:	2300      	movs	r3, #0
}
 8001f6c:	0018      	movs	r0, r3
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	b004      	add	sp, #16
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	fffff7ff 	.word	0xfffff7ff

08001f78 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b088      	sub	sp, #32
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	60f8      	str	r0, [r7, #12]
 8001f80:	60b9      	str	r1, [r7, #8]
 8001f82:	603b      	str	r3, [r7, #0]
 8001f84:	1dbb      	adds	r3, r7, #6
 8001f86:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001f88:	231f      	movs	r3, #31
 8001f8a:	18fb      	adds	r3, r7, r3
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	225c      	movs	r2, #92	; 0x5c
 8001f94:	5c9b      	ldrb	r3, [r3, r2]
 8001f96:	2b01      	cmp	r3, #1
 8001f98:	d101      	bne.n	8001f9e <HAL_SPI_Transmit+0x26>
 8001f9a:	2302      	movs	r3, #2
 8001f9c:	e140      	b.n	8002220 <HAL_SPI_Transmit+0x2a8>
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	225c      	movs	r2, #92	; 0x5c
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001fa6:	f7ff f871 	bl	800108c <HAL_GetTick>
 8001faa:	0003      	movs	r3, r0
 8001fac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8001fae:	2316      	movs	r3, #22
 8001fb0:	18fb      	adds	r3, r7, r3
 8001fb2:	1dba      	adds	r2, r7, #6
 8001fb4:	8812      	ldrh	r2, [r2, #0]
 8001fb6:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	225d      	movs	r2, #93	; 0x5d
 8001fbc:	5c9b      	ldrb	r3, [r3, r2]
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	2b01      	cmp	r3, #1
 8001fc2:	d004      	beq.n	8001fce <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8001fc4:	231f      	movs	r3, #31
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	2202      	movs	r2, #2
 8001fca:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fcc:	e11d      	b.n	800220a <HAL_SPI_Transmit+0x292>
  }

  if ((pData == NULL) || (Size == 0U))
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_SPI_Transmit+0x64>
 8001fd4:	1dbb      	adds	r3, r7, #6
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d104      	bne.n	8001fe6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8001fdc:	231f      	movs	r3, #31
 8001fde:	18fb      	adds	r3, r7, r3
 8001fe0:	2201      	movs	r2, #1
 8001fe2:	701a      	strb	r2, [r3, #0]
    goto error;
 8001fe4:	e111      	b.n	800220a <HAL_SPI_Transmit+0x292>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	225d      	movs	r2, #93	; 0x5d
 8001fea:	2103      	movs	r1, #3
 8001fec:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	68ba      	ldr	r2, [r7, #8]
 8001ff8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	1dba      	adds	r2, r7, #6
 8001ffe:	8812      	ldrh	r2, [r2, #0]
 8002000:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	1dba      	adds	r2, r7, #6
 8002006:	8812      	ldrh	r2, [r2, #0]
 8002008:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	2200      	movs	r2, #0
 800200e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2244      	movs	r2, #68	; 0x44
 8002014:	2100      	movs	r1, #0
 8002016:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002018:	68fb      	ldr	r3, [r7, #12]
 800201a:	2246      	movs	r2, #70	; 0x46
 800201c:	2100      	movs	r1, #0
 800201e:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	689a      	ldr	r2, [r3, #8]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	021b      	lsls	r3, r3, #8
 8002034:	429a      	cmp	r2, r3
 8002036:	d110      	bne.n	800205a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	681a      	ldr	r2, [r3, #0]
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	2140      	movs	r1, #64	; 0x40
 8002044:	438a      	bics	r2, r1
 8002046:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	681a      	ldr	r2, [r3, #0]
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	2180      	movs	r1, #128	; 0x80
 8002054:	01c9      	lsls	r1, r1, #7
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	2240      	movs	r2, #64	; 0x40
 8002062:	4013      	ands	r3, r2
 8002064:	2b40      	cmp	r3, #64	; 0x40
 8002066:	d007      	beq.n	8002078 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	681a      	ldr	r2, [r3, #0]
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	2140      	movs	r1, #64	; 0x40
 8002074:	430a      	orrs	r2, r1
 8002076:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	68da      	ldr	r2, [r3, #12]
 800207c:	23e0      	movs	r3, #224	; 0xe0
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	429a      	cmp	r2, r3
 8002082:	d94e      	bls.n	8002122 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	685b      	ldr	r3, [r3, #4]
 8002088:	2b00      	cmp	r3, #0
 800208a:	d004      	beq.n	8002096 <HAL_SPI_Transmit+0x11e>
 800208c:	2316      	movs	r3, #22
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	881b      	ldrh	r3, [r3, #0]
 8002092:	2b01      	cmp	r3, #1
 8002094:	d13f      	bne.n	8002116 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800209a:	881a      	ldrh	r2, [r3, #0]
 800209c:	68fb      	ldr	r3, [r7, #12]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020a6:	1c9a      	adds	r2, r3, #2
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020b0:	b29b      	uxth	r3, r3
 80020b2:	3b01      	subs	r3, #1
 80020b4:	b29a      	uxth	r2, r3
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80020ba:	e02c      	b.n	8002116 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80020bc:	68fb      	ldr	r3, [r7, #12]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	689b      	ldr	r3, [r3, #8]
 80020c2:	2202      	movs	r2, #2
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	d112      	bne.n	80020f0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ce:	881a      	ldrh	r2, [r3, #0]
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020da:	1c9a      	adds	r2, r3, #2
 80020dc:	68fb      	ldr	r3, [r7, #12]
 80020de:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80020e4:	b29b      	uxth	r3, r3
 80020e6:	3b01      	subs	r3, #1
 80020e8:	b29a      	uxth	r2, r3
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	87da      	strh	r2, [r3, #62]	; 0x3e
 80020ee:	e012      	b.n	8002116 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80020f0:	f7fe ffcc 	bl	800108c <HAL_GetTick>
 80020f4:	0002      	movs	r2, r0
 80020f6:	69bb      	ldr	r3, [r7, #24]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	683a      	ldr	r2, [r7, #0]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d802      	bhi.n	8002106 <HAL_SPI_Transmit+0x18e>
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	3301      	adds	r3, #1
 8002104:	d102      	bne.n	800210c <HAL_SPI_Transmit+0x194>
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	d104      	bne.n	8002116 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 800210c:	231f      	movs	r3, #31
 800210e:	18fb      	adds	r3, r7, r3
 8002110:	2203      	movs	r2, #3
 8002112:	701a      	strb	r2, [r3, #0]
          goto error;
 8002114:	e079      	b.n	800220a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800211a:	b29b      	uxth	r3, r3
 800211c:	2b00      	cmp	r3, #0
 800211e:	d1cd      	bne.n	80020bc <HAL_SPI_Transmit+0x144>
 8002120:	e04f      	b.n	80021c2 <HAL_SPI_Transmit+0x24a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d004      	beq.n	8002134 <HAL_SPI_Transmit+0x1bc>
 800212a:	2316      	movs	r3, #22
 800212c:	18fb      	adds	r3, r7, r3
 800212e:	881b      	ldrh	r3, [r3, #0]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d141      	bne.n	80021b8 <HAL_SPI_Transmit+0x240>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	330c      	adds	r3, #12
 800213e:	7812      	ldrb	r2, [r2, #0]
 8002140:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002146:	1c5a      	adds	r2, r3, #1
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800214c:	68fb      	ldr	r3, [r7, #12]
 800214e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002150:	b29b      	uxth	r3, r3
 8002152:	3b01      	subs	r3, #1
 8002154:	b29a      	uxth	r2, r3
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while (hspi->TxXferCount > 0U)
 800215a:	e02d      	b.n	80021b8 <HAL_SPI_Transmit+0x240>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	689b      	ldr	r3, [r3, #8]
 8002162:	2202      	movs	r2, #2
 8002164:	4013      	ands	r3, r2
 8002166:	2b02      	cmp	r3, #2
 8002168:	d113      	bne.n	8002192 <HAL_SPI_Transmit+0x21a>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	330c      	adds	r3, #12
 8002174:	7812      	ldrb	r2, [r2, #0]
 8002176:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800217c:	1c5a      	adds	r2, r3, #1
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002186:	b29b      	uxth	r3, r3
 8002188:	3b01      	subs	r3, #1
 800218a:	b29a      	uxth	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002190:	e012      	b.n	80021b8 <HAL_SPI_Transmit+0x240>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002192:	f7fe ff7b 	bl	800108c <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d802      	bhi.n	80021a8 <HAL_SPI_Transmit+0x230>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	3301      	adds	r3, #1
 80021a6:	d102      	bne.n	80021ae <HAL_SPI_Transmit+0x236>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d104      	bne.n	80021b8 <HAL_SPI_Transmit+0x240>
        {
          errorcode = HAL_TIMEOUT;
 80021ae:	231f      	movs	r3, #31
 80021b0:	18fb      	adds	r3, r7, r3
 80021b2:	2203      	movs	r2, #3
 80021b4:	701a      	strb	r2, [r3, #0]
          goto error;
 80021b6:	e028      	b.n	800220a <HAL_SPI_Transmit+0x292>
    while (hspi->TxXferCount > 0U)
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80021bc:	b29b      	uxth	r3, r3
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1cc      	bne.n	800215c <HAL_SPI_Transmit+0x1e4>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80021c2:	69ba      	ldr	r2, [r7, #24]
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	0018      	movs	r0, r3
 80021ca:	f000 fcd9 	bl	8002b80 <SPI_EndRxTxTransaction>
 80021ce:	1e03      	subs	r3, r0, #0
 80021d0:	d002      	beq.n	80021d8 <HAL_SPI_Transmit+0x260>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2220      	movs	r2, #32
 80021d6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d10a      	bne.n	80021f6 <HAL_SPI_Transmit+0x27e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	68db      	ldr	r3, [r3, #12]
 80021ea:	613b      	str	r3, [r7, #16]
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d004      	beq.n	8002208 <HAL_SPI_Transmit+0x290>
  {
    errorcode = HAL_ERROR;
 80021fe:	231f      	movs	r3, #31
 8002200:	18fb      	adds	r3, r7, r3
 8002202:	2201      	movs	r2, #1
 8002204:	701a      	strb	r2, [r3, #0]
 8002206:	e000      	b.n	800220a <HAL_SPI_Transmit+0x292>
  }

error:
 8002208:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	225d      	movs	r2, #93	; 0x5d
 800220e:	2101      	movs	r1, #1
 8002210:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	225c      	movs	r2, #92	; 0x5c
 8002216:	2100      	movs	r1, #0
 8002218:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800221a:	231f      	movs	r3, #31
 800221c:	18fb      	adds	r3, r7, r3
 800221e:	781b      	ldrb	r3, [r3, #0]
}
 8002220:	0018      	movs	r0, r3
 8002222:	46bd      	mov	sp, r7
 8002224:	b008      	add	sp, #32
 8002226:	bd80      	pop	{r7, pc}

08002228 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002228:	b590      	push	{r4, r7, lr}
 800222a:	b089      	sub	sp, #36	; 0x24
 800222c:	af02      	add	r7, sp, #8
 800222e:	60f8      	str	r0, [r7, #12]
 8002230:	60b9      	str	r1, [r7, #8]
 8002232:	603b      	str	r3, [r7, #0]
 8002234:	1dbb      	adds	r3, r7, #6
 8002236:	801a      	strh	r2, [r3, #0]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002238:	2317      	movs	r3, #23
 800223a:	18fb      	adds	r3, r7, r3
 800223c:	2200      	movs	r2, #0
 800223e:	701a      	strb	r2, [r3, #0]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	685a      	ldr	r2, [r3, #4]
 8002244:	2382      	movs	r3, #130	; 0x82
 8002246:	005b      	lsls	r3, r3, #1
 8002248:	429a      	cmp	r2, r3
 800224a:	d113      	bne.n	8002274 <HAL_SPI_Receive+0x4c>
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	689b      	ldr	r3, [r3, #8]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d10f      	bne.n	8002274 <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	225d      	movs	r2, #93	; 0x5d
 8002258:	2104      	movs	r1, #4
 800225a:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800225c:	1dbb      	adds	r3, r7, #6
 800225e:	881c      	ldrh	r4, [r3, #0]
 8002260:	68ba      	ldr	r2, [r7, #8]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	68f8      	ldr	r0, [r7, #12]
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	9300      	str	r3, [sp, #0]
 800226a:	0023      	movs	r3, r4
 800226c:	f000 f928 	bl	80024c0 <HAL_SPI_TransmitReceive>
 8002270:	0003      	movs	r3, r0
 8002272:	e11c      	b.n	80024ae <HAL_SPI_Receive+0x286>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	225c      	movs	r2, #92	; 0x5c
 8002278:	5c9b      	ldrb	r3, [r3, r2]
 800227a:	2b01      	cmp	r3, #1
 800227c:	d101      	bne.n	8002282 <HAL_SPI_Receive+0x5a>
 800227e:	2302      	movs	r3, #2
 8002280:	e115      	b.n	80024ae <HAL_SPI_Receive+0x286>
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	225c      	movs	r2, #92	; 0x5c
 8002286:	2101      	movs	r1, #1
 8002288:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800228a:	f7fe feff 	bl	800108c <HAL_GetTick>
 800228e:	0003      	movs	r3, r0
 8002290:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	225d      	movs	r2, #93	; 0x5d
 8002296:	5c9b      	ldrb	r3, [r3, r2]
 8002298:	b2db      	uxtb	r3, r3
 800229a:	2b01      	cmp	r3, #1
 800229c:	d004      	beq.n	80022a8 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 800229e:	2317      	movs	r3, #23
 80022a0:	18fb      	adds	r3, r7, r3
 80022a2:	2202      	movs	r2, #2
 80022a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80022a6:	e0f7      	b.n	8002498 <HAL_SPI_Receive+0x270>
  }

  if ((pData == NULL) || (Size == 0U))
 80022a8:	68bb      	ldr	r3, [r7, #8]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d003      	beq.n	80022b6 <HAL_SPI_Receive+0x8e>
 80022ae:	1dbb      	adds	r3, r7, #6
 80022b0:	881b      	ldrh	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d104      	bne.n	80022c0 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 80022b6:	2317      	movs	r3, #23
 80022b8:	18fb      	adds	r3, r7, r3
 80022ba:	2201      	movs	r2, #1
 80022bc:	701a      	strb	r2, [r3, #0]
    goto error;
 80022be:	e0eb      	b.n	8002498 <HAL_SPI_Receive+0x270>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	225d      	movs	r2, #93	; 0x5d
 80022c4:	2104      	movs	r1, #4
 80022c6:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	2200      	movs	r2, #0
 80022cc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80022ce:	68fb      	ldr	r3, [r7, #12]
 80022d0:	68ba      	ldr	r2, [r7, #8]
 80022d2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	1dba      	adds	r2, r7, #6
 80022d8:	2144      	movs	r1, #68	; 0x44
 80022da:	8812      	ldrh	r2, [r2, #0]
 80022dc:	525a      	strh	r2, [r3, r1]
  hspi->RxXferCount = Size;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	1dba      	adds	r2, r7, #6
 80022e2:	2146      	movs	r1, #70	; 0x46
 80022e4:	8812      	ldrh	r2, [r2, #0]
 80022e6:	525a      	strh	r2, [r3, r1]

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	2200      	movs	r2, #0
 80022ec:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	2200      	movs	r2, #0
 80022f2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	2200      	movs	r2, #0
 80022fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	2200      	movs	r2, #0
 8002304:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	68da      	ldr	r2, [r3, #12]
 800230a:	23e0      	movs	r3, #224	; 0xe0
 800230c:	00db      	lsls	r3, r3, #3
 800230e:	429a      	cmp	r2, r3
 8002310:	d908      	bls.n	8002324 <HAL_SPI_Receive+0xfc>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	685a      	ldr	r2, [r3, #4]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4966      	ldr	r1, [pc, #408]	; (80024b8 <HAL_SPI_Receive+0x290>)
 800231e:	400a      	ands	r2, r1
 8002320:	605a      	str	r2, [r3, #4]
 8002322:	e008      	b.n	8002336 <HAL_SPI_Receive+0x10e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	68fb      	ldr	r3, [r7, #12]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2180      	movs	r1, #128	; 0x80
 8002330:	0149      	lsls	r1, r1, #5
 8002332:	430a      	orrs	r2, r1
 8002334:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	2380      	movs	r3, #128	; 0x80
 800233c:	021b      	lsls	r3, r3, #8
 800233e:	429a      	cmp	r2, r3
 8002340:	d10f      	bne.n	8002362 <HAL_SPI_Receive+0x13a>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2140      	movs	r1, #64	; 0x40
 800234e:	438a      	bics	r2, r1
 8002350:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	681a      	ldr	r2, [r3, #0]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4957      	ldr	r1, [pc, #348]	; (80024bc <HAL_SPI_Receive+0x294>)
 800235e:	400a      	ands	r2, r1
 8002360:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2240      	movs	r2, #64	; 0x40
 800236a:	4013      	ands	r3, r2
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	d007      	beq.n	8002380 <HAL_SPI_Receive+0x158>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	681a      	ldr	r2, [r3, #0]
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2140      	movs	r1, #64	; 0x40
 800237c:	430a      	orrs	r2, r1
 800237e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	68da      	ldr	r2, [r3, #12]
 8002384:	23e0      	movs	r3, #224	; 0xe0
 8002386:	00db      	lsls	r3, r3, #3
 8002388:	429a      	cmp	r2, r3
 800238a:	d900      	bls.n	800238e <HAL_SPI_Receive+0x166>
 800238c:	e069      	b.n	8002462 <HAL_SPI_Receive+0x23a>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800238e:	e031      	b.n	80023f4 <HAL_SPI_Receive+0x1cc>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	689b      	ldr	r3, [r3, #8]
 8002396:	2201      	movs	r2, #1
 8002398:	4013      	ands	r3, r2
 800239a:	2b01      	cmp	r3, #1
 800239c:	d117      	bne.n	80023ce <HAL_SPI_Receive+0x1a6>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	330c      	adds	r3, #12
 80023a4:	001a      	movs	r2, r3
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023aa:	7812      	ldrb	r2, [r2, #0]
 80023ac:	b2d2      	uxtb	r2, r2
 80023ae:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b4:	1c5a      	adds	r2, r3, #1
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	2246      	movs	r2, #70	; 0x46
 80023be:	5a9b      	ldrh	r3, [r3, r2]
 80023c0:	b29b      	uxth	r3, r3
 80023c2:	3b01      	subs	r3, #1
 80023c4:	b299      	uxth	r1, r3
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	2246      	movs	r2, #70	; 0x46
 80023ca:	5299      	strh	r1, [r3, r2]
 80023cc:	e012      	b.n	80023f4 <HAL_SPI_Receive+0x1cc>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023ce:	f7fe fe5d 	bl	800108c <HAL_GetTick>
 80023d2:	0002      	movs	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d802      	bhi.n	80023e4 <HAL_SPI_Receive+0x1bc>
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	3301      	adds	r3, #1
 80023e2:	d102      	bne.n	80023ea <HAL_SPI_Receive+0x1c2>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d104      	bne.n	80023f4 <HAL_SPI_Receive+0x1cc>
        {
          errorcode = HAL_TIMEOUT;
 80023ea:	2317      	movs	r3, #23
 80023ec:	18fb      	adds	r3, r7, r3
 80023ee:	2203      	movs	r2, #3
 80023f0:	701a      	strb	r2, [r3, #0]
          goto error;
 80023f2:	e051      	b.n	8002498 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2246      	movs	r2, #70	; 0x46
 80023f8:	5a9b      	ldrh	r3, [r3, r2]
 80023fa:	b29b      	uxth	r3, r3
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d1c7      	bne.n	8002390 <HAL_SPI_Receive+0x168>
 8002400:	e035      	b.n	800246e <HAL_SPI_Receive+0x246>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	2201      	movs	r2, #1
 800240a:	4013      	ands	r3, r2
 800240c:	2b01      	cmp	r3, #1
 800240e:	d115      	bne.n	800243c <HAL_SPI_Receive+0x214>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68da      	ldr	r2, [r3, #12]
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	b292      	uxth	r2, r2
 800241c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002422:	1c9a      	adds	r2, r3, #2
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	2246      	movs	r2, #70	; 0x46
 800242c:	5a9b      	ldrh	r3, [r3, r2]
 800242e:	b29b      	uxth	r3, r3
 8002430:	3b01      	subs	r3, #1
 8002432:	b299      	uxth	r1, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	2246      	movs	r2, #70	; 0x46
 8002438:	5299      	strh	r1, [r3, r2]
 800243a:	e012      	b.n	8002462 <HAL_SPI_Receive+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800243c:	f7fe fe26 	bl	800108c <HAL_GetTick>
 8002440:	0002      	movs	r2, r0
 8002442:	693b      	ldr	r3, [r7, #16]
 8002444:	1ad3      	subs	r3, r2, r3
 8002446:	683a      	ldr	r2, [r7, #0]
 8002448:	429a      	cmp	r2, r3
 800244a:	d802      	bhi.n	8002452 <HAL_SPI_Receive+0x22a>
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	3301      	adds	r3, #1
 8002450:	d102      	bne.n	8002458 <HAL_SPI_Receive+0x230>
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d104      	bne.n	8002462 <HAL_SPI_Receive+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8002458:	2317      	movs	r3, #23
 800245a:	18fb      	adds	r3, r7, r3
 800245c:	2203      	movs	r2, #3
 800245e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002460:	e01a      	b.n	8002498 <HAL_SPI_Receive+0x270>
    while (hspi->RxXferCount > 0U)
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2246      	movs	r2, #70	; 0x46
 8002466:	5a9b      	ldrh	r3, [r3, r2]
 8002468:	b29b      	uxth	r3, r3
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1c9      	bne.n	8002402 <HAL_SPI_Receive+0x1da>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800246e:	693a      	ldr	r2, [r7, #16]
 8002470:	6839      	ldr	r1, [r7, #0]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	0018      	movs	r0, r3
 8002476:	f000 fb25 	bl	8002ac4 <SPI_EndRxTransaction>
 800247a:	1e03      	subs	r3, r0, #0
 800247c:	d002      	beq.n	8002484 <HAL_SPI_Receive+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	2220      	movs	r2, #32
 8002482:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002488:	2b00      	cmp	r3, #0
 800248a:	d004      	beq.n	8002496 <HAL_SPI_Receive+0x26e>
  {
    errorcode = HAL_ERROR;
 800248c:	2317      	movs	r3, #23
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	2201      	movs	r2, #1
 8002492:	701a      	strb	r2, [r3, #0]
 8002494:	e000      	b.n	8002498 <HAL_SPI_Receive+0x270>
  }

error :
 8002496:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	225d      	movs	r2, #93	; 0x5d
 800249c:	2101      	movs	r1, #1
 800249e:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	225c      	movs	r2, #92	; 0x5c
 80024a4:	2100      	movs	r1, #0
 80024a6:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80024a8:	2317      	movs	r3, #23
 80024aa:	18fb      	adds	r3, r7, r3
 80024ac:	781b      	ldrb	r3, [r3, #0]
}
 80024ae:	0018      	movs	r0, r3
 80024b0:	46bd      	mov	sp, r7
 80024b2:	b007      	add	sp, #28
 80024b4:	bd90      	pop	{r4, r7, pc}
 80024b6:	46c0      	nop			; (mov r8, r8)
 80024b8:	ffffefff 	.word	0xffffefff
 80024bc:	ffffbfff 	.word	0xffffbfff

080024c0 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	b08a      	sub	sp, #40	; 0x28
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
 80024cc:	001a      	movs	r2, r3
 80024ce:	1cbb      	adds	r3, r7, #2
 80024d0:	801a      	strh	r2, [r3, #0]
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80024d2:	2301      	movs	r3, #1
 80024d4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80024d6:	2323      	movs	r3, #35	; 0x23
 80024d8:	18fb      	adds	r3, r7, r3
 80024da:	2200      	movs	r2, #0
 80024dc:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	225c      	movs	r2, #92	; 0x5c
 80024e2:	5c9b      	ldrb	r3, [r3, r2]
 80024e4:	2b01      	cmp	r3, #1
 80024e6:	d101      	bne.n	80024ec <HAL_SPI_TransmitReceive+0x2c>
 80024e8:	2302      	movs	r3, #2
 80024ea:	e1b5      	b.n	8002858 <HAL_SPI_TransmitReceive+0x398>
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	225c      	movs	r2, #92	; 0x5c
 80024f0:	2101      	movs	r1, #1
 80024f2:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80024f4:	f7fe fdca 	bl	800108c <HAL_GetTick>
 80024f8:	0003      	movs	r3, r0
 80024fa:	61fb      	str	r3, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80024fc:	201b      	movs	r0, #27
 80024fe:	183b      	adds	r3, r7, r0
 8002500:	68fa      	ldr	r2, [r7, #12]
 8002502:	215d      	movs	r1, #93	; 0x5d
 8002504:	5c52      	ldrb	r2, [r2, r1]
 8002506:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	685b      	ldr	r3, [r3, #4]
 800250c:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800250e:	2312      	movs	r3, #18
 8002510:	18fb      	adds	r3, r7, r3
 8002512:	1cba      	adds	r2, r7, #2
 8002514:	8812      	ldrh	r2, [r2, #0]
 8002516:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002518:	183b      	adds	r3, r7, r0
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2b01      	cmp	r3, #1
 800251e:	d011      	beq.n	8002544 <HAL_SPI_TransmitReceive+0x84>
 8002520:	697a      	ldr	r2, [r7, #20]
 8002522:	2382      	movs	r3, #130	; 0x82
 8002524:	005b      	lsls	r3, r3, #1
 8002526:	429a      	cmp	r2, r3
 8002528:	d107      	bne.n	800253a <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	689b      	ldr	r3, [r3, #8]
 800252e:	2b00      	cmp	r3, #0
 8002530:	d103      	bne.n	800253a <HAL_SPI_TransmitReceive+0x7a>
 8002532:	183b      	adds	r3, r7, r0
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b04      	cmp	r3, #4
 8002538:	d004      	beq.n	8002544 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 800253a:	2323      	movs	r3, #35	; 0x23
 800253c:	18fb      	adds	r3, r7, r3
 800253e:	2202      	movs	r2, #2
 8002540:	701a      	strb	r2, [r3, #0]
    goto error;
 8002542:	e17e      	b.n	8002842 <HAL_SPI_TransmitReceive+0x382>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d006      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x98>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d003      	beq.n	8002558 <HAL_SPI_TransmitReceive+0x98>
 8002550:	1cbb      	adds	r3, r7, #2
 8002552:	881b      	ldrh	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d104      	bne.n	8002562 <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002558:	2323      	movs	r3, #35	; 0x23
 800255a:	18fb      	adds	r3, r7, r3
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002560:	e16f      	b.n	8002842 <HAL_SPI_TransmitReceive+0x382>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	225d      	movs	r2, #93	; 0x5d
 8002566:	5c9b      	ldrb	r3, [r3, r2]
 8002568:	b2db      	uxtb	r3, r3
 800256a:	2b04      	cmp	r3, #4
 800256c:	d003      	beq.n	8002576 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	225d      	movs	r2, #93	; 0x5d
 8002572:	2105      	movs	r1, #5
 8002574:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	1cba      	adds	r2, r7, #2
 8002586:	2146      	movs	r1, #70	; 0x46
 8002588:	8812      	ldrh	r2, [r2, #0]
 800258a:	525a      	strh	r2, [r3, r1]
  hspi->RxXferSize  = Size;
 800258c:	68fb      	ldr	r3, [r7, #12]
 800258e:	1cba      	adds	r2, r7, #2
 8002590:	2144      	movs	r1, #68	; 0x44
 8002592:	8812      	ldrh	r2, [r2, #0]
 8002594:	525a      	strh	r2, [r3, r1]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	68ba      	ldr	r2, [r7, #8]
 800259a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1cba      	adds	r2, r7, #2
 80025a0:	8812      	ldrh	r2, [r2, #0]
 80025a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	1cba      	adds	r2, r7, #2
 80025a8:	8812      	ldrh	r2, [r2, #0]
 80025aa:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80025ac:	68fb      	ldr	r3, [r7, #12]
 80025ae:	2200      	movs	r2, #0
 80025b0:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	2200      	movs	r2, #0
 80025b6:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	68da      	ldr	r2, [r3, #12]
 80025bc:	23e0      	movs	r3, #224	; 0xe0
 80025be:	00db      	lsls	r3, r3, #3
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d908      	bls.n	80025d6 <HAL_SPI_TransmitReceive+0x116>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	49a4      	ldr	r1, [pc, #656]	; (8002860 <HAL_SPI_TransmitReceive+0x3a0>)
 80025d0:	400a      	ands	r2, r1
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	e008      	b.n	80025e8 <HAL_SPI_TransmitReceive+0x128>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	2180      	movs	r1, #128	; 0x80
 80025e2:	0149      	lsls	r1, r1, #5
 80025e4:	430a      	orrs	r2, r1
 80025e6:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	2240      	movs	r2, #64	; 0x40
 80025f0:	4013      	ands	r3, r2
 80025f2:	2b40      	cmp	r3, #64	; 0x40
 80025f4:	d007      	beq.n	8002606 <HAL_SPI_TransmitReceive+0x146>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	681a      	ldr	r2, [r3, #0]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	2140      	movs	r1, #64	; 0x40
 8002602:	430a      	orrs	r2, r1
 8002604:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	68da      	ldr	r2, [r3, #12]
 800260a:	23e0      	movs	r3, #224	; 0xe0
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	429a      	cmp	r2, r3
 8002610:	d800      	bhi.n	8002614 <HAL_SPI_TransmitReceive+0x154>
 8002612:	e07f      	b.n	8002714 <HAL_SPI_TransmitReceive+0x254>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	685b      	ldr	r3, [r3, #4]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d005      	beq.n	8002628 <HAL_SPI_TransmitReceive+0x168>
 800261c:	2312      	movs	r3, #18
 800261e:	18fb      	adds	r3, r7, r3
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d000      	beq.n	8002628 <HAL_SPI_TransmitReceive+0x168>
 8002626:	e069      	b.n	80026fc <HAL_SPI_TransmitReceive+0x23c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800262c:	881a      	ldrh	r2, [r3, #0]
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002638:	1c9a      	adds	r2, r3, #2
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800263e:	68fb      	ldr	r3, [r7, #12]
 8002640:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002642:	b29b      	uxth	r3, r3
 8002644:	3b01      	subs	r3, #1
 8002646:	b29a      	uxth	r2, r3
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800264c:	e056      	b.n	80026fc <HAL_SPI_TransmitReceive+0x23c>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	2202      	movs	r2, #2
 8002656:	4013      	ands	r3, r2
 8002658:	2b02      	cmp	r3, #2
 800265a:	d11b      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x1d4>
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002660:	b29b      	uxth	r3, r3
 8002662:	2b00      	cmp	r3, #0
 8002664:	d016      	beq.n	8002694 <HAL_SPI_TransmitReceive+0x1d4>
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	2b01      	cmp	r3, #1
 800266a:	d113      	bne.n	8002694 <HAL_SPI_TransmitReceive+0x1d4>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002670:	881a      	ldrh	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800267c:	1c9a      	adds	r2, r3, #2
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002686:	b29b      	uxth	r3, r3
 8002688:	3b01      	subs	r3, #1
 800268a:	b29a      	uxth	r2, r3
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002690:	2300      	movs	r3, #0
 8002692:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	2201      	movs	r2, #1
 800269c:	4013      	ands	r3, r2
 800269e:	2b01      	cmp	r3, #1
 80026a0:	d11c      	bne.n	80026dc <HAL_SPI_TransmitReceive+0x21c>
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2246      	movs	r2, #70	; 0x46
 80026a6:	5a9b      	ldrh	r3, [r3, r2]
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d016      	beq.n	80026dc <HAL_SPI_TransmitReceive+0x21c>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68da      	ldr	r2, [r3, #12]
 80026b4:	68fb      	ldr	r3, [r7, #12]
 80026b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b8:	b292      	uxth	r2, r2
 80026ba:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c0:	1c9a      	adds	r2, r3, #2
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	2246      	movs	r2, #70	; 0x46
 80026ca:	5a9b      	ldrh	r3, [r3, r2]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b299      	uxth	r1, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2246      	movs	r2, #70	; 0x46
 80026d6:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80026d8:	2301      	movs	r3, #1
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80026dc:	f7fe fcd6 	bl	800108c <HAL_GetTick>
 80026e0:	0002      	movs	r2, r0
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	1ad3      	subs	r3, r2, r3
 80026e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026e8:	429a      	cmp	r2, r3
 80026ea:	d807      	bhi.n	80026fc <HAL_SPI_TransmitReceive+0x23c>
 80026ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ee:	3301      	adds	r3, #1
 80026f0:	d004      	beq.n	80026fc <HAL_SPI_TransmitReceive+0x23c>
      {
        errorcode = HAL_TIMEOUT;
 80026f2:	2323      	movs	r3, #35	; 0x23
 80026f4:	18fb      	adds	r3, r7, r3
 80026f6:	2203      	movs	r2, #3
 80026f8:	701a      	strb	r2, [r3, #0]
        goto error;
 80026fa:	e0a2      	b.n	8002842 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002700:	b29b      	uxth	r3, r3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d1a3      	bne.n	800264e <HAL_SPI_TransmitReceive+0x18e>
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	2246      	movs	r2, #70	; 0x46
 800270a:	5a9b      	ldrh	r3, [r3, r2]
 800270c:	b29b      	uxth	r3, r3
 800270e:	2b00      	cmp	r3, #0
 8002710:	d19d      	bne.n	800264e <HAL_SPI_TransmitReceive+0x18e>
 8002712:	e085      	b.n	8002820 <HAL_SPI_TransmitReceive+0x360>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d005      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x268>
 800271c:	2312      	movs	r3, #18
 800271e:	18fb      	adds	r3, r7, r3
 8002720:	881b      	ldrh	r3, [r3, #0]
 8002722:	2b01      	cmp	r3, #1
 8002724:	d000      	beq.n	8002728 <HAL_SPI_TransmitReceive+0x268>
 8002726:	e070      	b.n	800280a <HAL_SPI_TransmitReceive+0x34a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	330c      	adds	r3, #12
 8002732:	7812      	ldrb	r2, [r2, #0]
 8002734:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800273a:	1c5a      	adds	r2, r3, #1
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002744:	b29b      	uxth	r3, r3
 8002746:	3b01      	subs	r3, #1
 8002748:	b29a      	uxth	r2, r3
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800274e:	e05c      	b.n	800280a <HAL_SPI_TransmitReceive+0x34a>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	689b      	ldr	r3, [r3, #8]
 8002756:	2202      	movs	r2, #2
 8002758:	4013      	ands	r3, r2
 800275a:	2b02      	cmp	r3, #2
 800275c:	d11c      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x2d8>
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002762:	b29b      	uxth	r3, r3
 8002764:	2b00      	cmp	r3, #0
 8002766:	d017      	beq.n	8002798 <HAL_SPI_TransmitReceive+0x2d8>
 8002768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800276a:	2b01      	cmp	r3, #1
 800276c:	d114      	bne.n	8002798 <HAL_SPI_TransmitReceive+0x2d8>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	330c      	adds	r3, #12
 8002778:	7812      	ldrb	r2, [r2, #0]
 800277a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002780:	1c5a      	adds	r2, r3, #1
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002786:	68fb      	ldr	r3, [r7, #12]
 8002788:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800278a:	b29b      	uxth	r3, r3
 800278c:	3b01      	subs	r3, #1
 800278e:	b29a      	uxth	r2, r3
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002794:	2300      	movs	r3, #0
 8002796:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	2201      	movs	r2, #1
 80027a0:	4013      	ands	r3, r2
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d11e      	bne.n	80027e4 <HAL_SPI_TransmitReceive+0x324>
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	2246      	movs	r2, #70	; 0x46
 80027aa:	5a9b      	ldrh	r3, [r3, r2]
 80027ac:	b29b      	uxth	r3, r3
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d018      	beq.n	80027e4 <HAL_SPI_TransmitReceive+0x324>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	330c      	adds	r3, #12
 80027b8:	001a      	movs	r2, r3
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	7812      	ldrb	r2, [r2, #0]
 80027c0:	b2d2      	uxtb	r2, r2
 80027c2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c8:	1c5a      	adds	r2, r3, #1
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	2246      	movs	r2, #70	; 0x46
 80027d2:	5a9b      	ldrh	r3, [r3, r2]
 80027d4:	b29b      	uxth	r3, r3
 80027d6:	3b01      	subs	r3, #1
 80027d8:	b299      	uxth	r1, r3
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2246      	movs	r2, #70	; 0x46
 80027de:	5299      	strh	r1, [r3, r2]
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80027e0:	2301      	movs	r3, #1
 80027e2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80027e4:	f7fe fc52 	bl	800108c <HAL_GetTick>
 80027e8:	0002      	movs	r2, r0
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	1ad3      	subs	r3, r2, r3
 80027ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80027f0:	429a      	cmp	r2, r3
 80027f2:	d802      	bhi.n	80027fa <HAL_SPI_TransmitReceive+0x33a>
 80027f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027f6:	3301      	adds	r3, #1
 80027f8:	d102      	bne.n	8002800 <HAL_SPI_TransmitReceive+0x340>
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d104      	bne.n	800280a <HAL_SPI_TransmitReceive+0x34a>
      {
        errorcode = HAL_TIMEOUT;
 8002800:	2323      	movs	r3, #35	; 0x23
 8002802:	18fb      	adds	r3, r7, r3
 8002804:	2203      	movs	r2, #3
 8002806:	701a      	strb	r2, [r3, #0]
        goto error;
 8002808:	e01b      	b.n	8002842 <HAL_SPI_TransmitReceive+0x382>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800280e:	b29b      	uxth	r3, r3
 8002810:	2b00      	cmp	r3, #0
 8002812:	d19d      	bne.n	8002750 <HAL_SPI_TransmitReceive+0x290>
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	2246      	movs	r2, #70	; 0x46
 8002818:	5a9b      	ldrh	r3, [r3, r2]
 800281a:	b29b      	uxth	r3, r3
 800281c:	2b00      	cmp	r3, #0
 800281e:	d197      	bne.n	8002750 <HAL_SPI_TransmitReceive+0x290>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002820:	69fa      	ldr	r2, [r7, #28]
 8002822:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	0018      	movs	r0, r3
 8002828:	f000 f9aa 	bl	8002b80 <SPI_EndRxTxTransaction>
 800282c:	1e03      	subs	r3, r0, #0
 800282e:	d007      	beq.n	8002840 <HAL_SPI_TransmitReceive+0x380>
  {
    errorcode = HAL_ERROR;
 8002830:	2323      	movs	r3, #35	; 0x23
 8002832:	18fb      	adds	r3, r7, r3
 8002834:	2201      	movs	r2, #1
 8002836:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	2220      	movs	r2, #32
 800283c:	661a      	str	r2, [r3, #96]	; 0x60
 800283e:	e000      	b.n	8002842 <HAL_SPI_TransmitReceive+0x382>
  }

error :
 8002840:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	225d      	movs	r2, #93	; 0x5d
 8002846:	2101      	movs	r1, #1
 8002848:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	225c      	movs	r2, #92	; 0x5c
 800284e:	2100      	movs	r1, #0
 8002850:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002852:	2323      	movs	r3, #35	; 0x23
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	781b      	ldrb	r3, [r3, #0]
}
 8002858:	0018      	movs	r0, r3
 800285a:	46bd      	mov	sp, r7
 800285c:	b00a      	add	sp, #40	; 0x28
 800285e:	bd80      	pop	{r7, pc}
 8002860:	ffffefff 	.word	0xffffefff

08002864 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b088      	sub	sp, #32
 8002868:	af00      	add	r7, sp, #0
 800286a:	60f8      	str	r0, [r7, #12]
 800286c:	60b9      	str	r1, [r7, #8]
 800286e:	603b      	str	r3, [r7, #0]
 8002870:	1dfb      	adds	r3, r7, #7
 8002872:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002874:	f7fe fc0a 	bl	800108c <HAL_GetTick>
 8002878:	0002      	movs	r2, r0
 800287a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800287c:	1a9b      	subs	r3, r3, r2
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	18d3      	adds	r3, r2, r3
 8002882:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002884:	f7fe fc02 	bl	800108c <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800288c:	4b3a      	ldr	r3, [pc, #232]	; (8002978 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	015b      	lsls	r3, r3, #5
 8002892:	0d1b      	lsrs	r3, r3, #20
 8002894:	69fa      	ldr	r2, [r7, #28]
 8002896:	4353      	muls	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800289a:	e058      	b.n	800294e <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	3301      	adds	r3, #1
 80028a0:	d055      	beq.n	800294e <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80028a2:	f7fe fbf3 	bl	800108c <HAL_GetTick>
 80028a6:	0002      	movs	r2, r0
 80028a8:	69bb      	ldr	r3, [r7, #24]
 80028aa:	1ad3      	subs	r3, r2, r3
 80028ac:	69fa      	ldr	r2, [r7, #28]
 80028ae:	429a      	cmp	r2, r3
 80028b0:	d902      	bls.n	80028b8 <SPI_WaitFlagStateUntilTimeout+0x54>
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d142      	bne.n	800293e <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	685a      	ldr	r2, [r3, #4]
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	21e0      	movs	r1, #224	; 0xe0
 80028c4:	438a      	bics	r2, r1
 80028c6:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	685a      	ldr	r2, [r3, #4]
 80028cc:	2382      	movs	r3, #130	; 0x82
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d113      	bne.n	80028fc <SPI_WaitFlagStateUntilTimeout+0x98>
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	689a      	ldr	r2, [r3, #8]
 80028d8:	2380      	movs	r3, #128	; 0x80
 80028da:	021b      	lsls	r3, r3, #8
 80028dc:	429a      	cmp	r2, r3
 80028de:	d005      	beq.n	80028ec <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	689a      	ldr	r2, [r3, #8]
 80028e4:	2380      	movs	r3, #128	; 0x80
 80028e6:	00db      	lsls	r3, r3, #3
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d107      	bne.n	80028fc <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	681a      	ldr	r2, [r3, #0]
 80028f2:	68fb      	ldr	r3, [r7, #12]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	2140      	movs	r1, #64	; 0x40
 80028f8:	438a      	bics	r2, r1
 80028fa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002900:	2380      	movs	r3, #128	; 0x80
 8002902:	019b      	lsls	r3, r3, #6
 8002904:	429a      	cmp	r2, r3
 8002906:	d110      	bne.n	800292a <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	681a      	ldr	r2, [r3, #0]
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	491a      	ldr	r1, [pc, #104]	; (800297c <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002914:	400a      	ands	r2, r1
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	681a      	ldr	r2, [r3, #0]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	2180      	movs	r1, #128	; 0x80
 8002924:	0189      	lsls	r1, r1, #6
 8002926:	430a      	orrs	r2, r1
 8002928:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	225d      	movs	r2, #93	; 0x5d
 800292e:	2101      	movs	r1, #1
 8002930:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	225c      	movs	r2, #92	; 0x5c
 8002936:	2100      	movs	r1, #0
 8002938:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e017      	b.n	800296e <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 800293e:	697b      	ldr	r3, [r7, #20]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d101      	bne.n	8002948 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002944:	2300      	movs	r3, #0
 8002946:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002948:	697b      	ldr	r3, [r7, #20]
 800294a:	3b01      	subs	r3, #1
 800294c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	689b      	ldr	r3, [r3, #8]
 8002954:	68ba      	ldr	r2, [r7, #8]
 8002956:	4013      	ands	r3, r2
 8002958:	68ba      	ldr	r2, [r7, #8]
 800295a:	1ad3      	subs	r3, r2, r3
 800295c:	425a      	negs	r2, r3
 800295e:	4153      	adcs	r3, r2
 8002960:	b2db      	uxtb	r3, r3
 8002962:	001a      	movs	r2, r3
 8002964:	1dfb      	adds	r3, r7, #7
 8002966:	781b      	ldrb	r3, [r3, #0]
 8002968:	429a      	cmp	r2, r3
 800296a:	d197      	bne.n	800289c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800296c:	2300      	movs	r3, #0
}
 800296e:	0018      	movs	r0, r3
 8002970:	46bd      	mov	sp, r7
 8002972:	b008      	add	sp, #32
 8002974:	bd80      	pop	{r7, pc}
 8002976:	46c0      	nop			; (mov r8, r8)
 8002978:	20000000 	.word	0x20000000
 800297c:	ffffdfff 	.word	0xffffdfff

08002980 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b08a      	sub	sp, #40	; 0x28
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	60b9      	str	r1, [r7, #8]
 800298a:	607a      	str	r2, [r7, #4]
 800298c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800298e:	2317      	movs	r3, #23
 8002990:	18fb      	adds	r3, r7, r3
 8002992:	2200      	movs	r2, #0
 8002994:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002996:	f7fe fb79 	bl	800108c <HAL_GetTick>
 800299a:	0002      	movs	r2, r0
 800299c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800299e:	1a9b      	subs	r3, r3, r2
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	18d3      	adds	r3, r2, r3
 80029a4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 80029a6:	f7fe fb71 	bl	800108c <HAL_GetTick>
 80029aa:	0003      	movs	r3, r0
 80029ac:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	330c      	adds	r3, #12
 80029b4:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80029b6:	4b41      	ldr	r3, [pc, #260]	; (8002abc <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80029b8:	681a      	ldr	r2, [r3, #0]
 80029ba:	0013      	movs	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	189b      	adds	r3, r3, r2
 80029c0:	00da      	lsls	r2, r3, #3
 80029c2:	1ad3      	subs	r3, r2, r3
 80029c4:	0d1b      	lsrs	r3, r3, #20
 80029c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c8:	4353      	muls	r3, r2
 80029ca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80029cc:	e068      	b.n	8002aa0 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80029ce:	68ba      	ldr	r2, [r7, #8]
 80029d0:	23c0      	movs	r3, #192	; 0xc0
 80029d2:	00db      	lsls	r3, r3, #3
 80029d4:	429a      	cmp	r2, r3
 80029d6:	d10a      	bne.n	80029ee <SPI_WaitFifoStateUntilTimeout+0x6e>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d107      	bne.n	80029ee <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	781b      	ldrb	r3, [r3, #0]
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	2117      	movs	r1, #23
 80029e6:	187b      	adds	r3, r7, r1
 80029e8:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80029ea:	187b      	adds	r3, r7, r1
 80029ec:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	3301      	adds	r3, #1
 80029f2:	d055      	beq.n	8002aa0 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80029f4:	f7fe fb4a 	bl	800108c <HAL_GetTick>
 80029f8:	0002      	movs	r2, r0
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d902      	bls.n	8002a0a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d142      	bne.n	8002a90 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	685a      	ldr	r2, [r3, #4]
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	21e0      	movs	r1, #224	; 0xe0
 8002a16:	438a      	bics	r2, r1
 8002a18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	685a      	ldr	r2, [r3, #4]
 8002a1e:	2382      	movs	r3, #130	; 0x82
 8002a20:	005b      	lsls	r3, r3, #1
 8002a22:	429a      	cmp	r2, r3
 8002a24:	d113      	bne.n	8002a4e <SPI_WaitFifoStateUntilTimeout+0xce>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	2380      	movs	r3, #128	; 0x80
 8002a2c:	021b      	lsls	r3, r3, #8
 8002a2e:	429a      	cmp	r2, r3
 8002a30:	d005      	beq.n	8002a3e <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	689a      	ldr	r2, [r3, #8]
 8002a36:	2380      	movs	r3, #128	; 0x80
 8002a38:	00db      	lsls	r3, r3, #3
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d107      	bne.n	8002a4e <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a3e:	68fb      	ldr	r3, [r7, #12]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	2140      	movs	r1, #64	; 0x40
 8002a4a:	438a      	bics	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a52:	2380      	movs	r3, #128	; 0x80
 8002a54:	019b      	lsls	r3, r3, #6
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d110      	bne.n	8002a7c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4916      	ldr	r1, [pc, #88]	; (8002ac0 <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002a66:	400a      	ands	r2, r1
 8002a68:	601a      	str	r2, [r3, #0]
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	681a      	ldr	r2, [r3, #0]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	2180      	movs	r1, #128	; 0x80
 8002a76:	0189      	lsls	r1, r1, #6
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	225d      	movs	r2, #93	; 0x5d
 8002a80:	2101      	movs	r1, #1
 8002a82:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	225c      	movs	r2, #92	; 0x5c
 8002a88:	2100      	movs	r1, #0
 8002a8a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002a8c:	2303      	movs	r3, #3
 8002a8e:	e010      	b.n	8002ab2 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8002a90:	69bb      	ldr	r3, [r7, #24]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d101      	bne.n	8002a9a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002a96:	2300      	movs	r3, #0
 8002a98:	627b      	str	r3, [r7, #36]	; 0x24
      }      
      count--;
 8002a9a:	69bb      	ldr	r3, [r7, #24]
 8002a9c:	3b01      	subs	r3, #1
 8002a9e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	689b      	ldr	r3, [r3, #8]
 8002aa6:	68ba      	ldr	r2, [r7, #8]
 8002aa8:	4013      	ands	r3, r2
 8002aaa:	687a      	ldr	r2, [r7, #4]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d18e      	bne.n	80029ce <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002ab0:	2300      	movs	r3, #0
}
 8002ab2:	0018      	movs	r0, r3
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	b00a      	add	sp, #40	; 0x28
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	46c0      	nop			; (mov r8, r8)
 8002abc:	20000000 	.word	0x20000000
 8002ac0:	ffffdfff 	.word	0xffffdfff

08002ac4 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	b086      	sub	sp, #24
 8002ac8:	af02      	add	r7, sp, #8
 8002aca:	60f8      	str	r0, [r7, #12]
 8002acc:	60b9      	str	r1, [r7, #8]
 8002ace:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	685a      	ldr	r2, [r3, #4]
 8002ad4:	2382      	movs	r3, #130	; 0x82
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d113      	bne.n	8002b04 <SPI_EndRxTransaction+0x40>
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	2380      	movs	r3, #128	; 0x80
 8002ae2:	021b      	lsls	r3, r3, #8
 8002ae4:	429a      	cmp	r2, r3
 8002ae6:	d005      	beq.n	8002af4 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	2380      	movs	r3, #128	; 0x80
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	429a      	cmp	r2, r3
 8002af2:	d107      	bne.n	8002b04 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	681a      	ldr	r2, [r3, #0]
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2140      	movs	r1, #64	; 0x40
 8002b00:	438a      	bics	r2, r1
 8002b02:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b04:	68ba      	ldr	r2, [r7, #8]
 8002b06:	68f8      	ldr	r0, [r7, #12]
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	9300      	str	r3, [sp, #0]
 8002b0c:	0013      	movs	r3, r2
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2180      	movs	r1, #128	; 0x80
 8002b12:	f7ff fea7 	bl	8002864 <SPI_WaitFlagStateUntilTimeout>
 8002b16:	1e03      	subs	r3, r0, #0
 8002b18:	d007      	beq.n	8002b2a <SPI_EndRxTransaction+0x66>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b1e:	2220      	movs	r2, #32
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002b26:	2303      	movs	r3, #3
 8002b28:	e026      	b.n	8002b78 <SPI_EndRxTransaction+0xb4>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	685a      	ldr	r2, [r3, #4]
 8002b2e:	2382      	movs	r3, #130	; 0x82
 8002b30:	005b      	lsls	r3, r3, #1
 8002b32:	429a      	cmp	r2, r3
 8002b34:	d11f      	bne.n	8002b76 <SPI_EndRxTransaction+0xb2>
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	689a      	ldr	r2, [r3, #8]
 8002b3a:	2380      	movs	r3, #128	; 0x80
 8002b3c:	021b      	lsls	r3, r3, #8
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d005      	beq.n	8002b4e <SPI_EndRxTransaction+0x8a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	689a      	ldr	r2, [r3, #8]
 8002b46:	2380      	movs	r3, #128	; 0x80
 8002b48:	00db      	lsls	r3, r3, #3
 8002b4a:	429a      	cmp	r2, r3
 8002b4c:	d113      	bne.n	8002b76 <SPI_EndRxTransaction+0xb2>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b4e:	68ba      	ldr	r2, [r7, #8]
 8002b50:	23c0      	movs	r3, #192	; 0xc0
 8002b52:	00d9      	lsls	r1, r3, #3
 8002b54:	68f8      	ldr	r0, [r7, #12]
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	9300      	str	r3, [sp, #0]
 8002b5a:	0013      	movs	r3, r2
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	f7ff ff0f 	bl	8002980 <SPI_WaitFifoStateUntilTimeout>
 8002b62:	1e03      	subs	r3, r0, #0
 8002b64:	d007      	beq.n	8002b76 <SPI_EndRxTransaction+0xb2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	431a      	orrs	r2, r3
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8002b72:	2303      	movs	r3, #3
 8002b74:	e000      	b.n	8002b78 <SPI_EndRxTransaction+0xb4>
    }
  }
  return HAL_OK;
 8002b76:	2300      	movs	r3, #0
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b004      	add	sp, #16
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af02      	add	r7, sp, #8
 8002b86:	60f8      	str	r0, [r7, #12]
 8002b88:	60b9      	str	r1, [r7, #8]
 8002b8a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002b8c:	68ba      	ldr	r2, [r7, #8]
 8002b8e:	23c0      	movs	r3, #192	; 0xc0
 8002b90:	0159      	lsls	r1, r3, #5
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	9300      	str	r3, [sp, #0]
 8002b98:	0013      	movs	r3, r2
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f7ff fef0 	bl	8002980 <SPI_WaitFifoStateUntilTimeout>
 8002ba0:	1e03      	subs	r3, r0, #0
 8002ba2:	d007      	beq.n	8002bb4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba8:	2220      	movs	r2, #32
 8002baa:	431a      	orrs	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e027      	b.n	8002c04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bb4:	68ba      	ldr	r2, [r7, #8]
 8002bb6:	68f8      	ldr	r0, [r7, #12]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	9300      	str	r3, [sp, #0]
 8002bbc:	0013      	movs	r3, r2
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	2180      	movs	r1, #128	; 0x80
 8002bc2:	f7ff fe4f 	bl	8002864 <SPI_WaitFlagStateUntilTimeout>
 8002bc6:	1e03      	subs	r3, r0, #0
 8002bc8:	d007      	beq.n	8002bda <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bce:	2220      	movs	r2, #32
 8002bd0:	431a      	orrs	r2, r3
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bd6:	2303      	movs	r3, #3
 8002bd8:	e014      	b.n	8002c04 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	23c0      	movs	r3, #192	; 0xc0
 8002bde:	00d9      	lsls	r1, r3, #3
 8002be0:	68f8      	ldr	r0, [r7, #12]
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	9300      	str	r3, [sp, #0]
 8002be6:	0013      	movs	r3, r2
 8002be8:	2200      	movs	r2, #0
 8002bea:	f7ff fec9 	bl	8002980 <SPI_WaitFifoStateUntilTimeout>
 8002bee:	1e03      	subs	r3, r0, #0
 8002bf0:	d007      	beq.n	8002c02 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bf6:	2220      	movs	r2, #32
 8002bf8:	431a      	orrs	r2, r3
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002bfe:	2303      	movs	r3, #3
 8002c00:	e000      	b.n	8002c04 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	0018      	movs	r0, r3
 8002c06:	46bd      	mov	sp, r7
 8002c08:	b004      	add	sp, #16
 8002c0a:	bd80      	pop	{r7, pc}

08002c0c <__libc_init_array>:
 8002c0c:	b570      	push	{r4, r5, r6, lr}
 8002c0e:	2600      	movs	r6, #0
 8002c10:	4d0c      	ldr	r5, [pc, #48]	; (8002c44 <__libc_init_array+0x38>)
 8002c12:	4c0d      	ldr	r4, [pc, #52]	; (8002c48 <__libc_init_array+0x3c>)
 8002c14:	1b64      	subs	r4, r4, r5
 8002c16:	10a4      	asrs	r4, r4, #2
 8002c18:	42a6      	cmp	r6, r4
 8002c1a:	d109      	bne.n	8002c30 <__libc_init_array+0x24>
 8002c1c:	2600      	movs	r6, #0
 8002c1e:	f000 f821 	bl	8002c64 <_init>
 8002c22:	4d0a      	ldr	r5, [pc, #40]	; (8002c4c <__libc_init_array+0x40>)
 8002c24:	4c0a      	ldr	r4, [pc, #40]	; (8002c50 <__libc_init_array+0x44>)
 8002c26:	1b64      	subs	r4, r4, r5
 8002c28:	10a4      	asrs	r4, r4, #2
 8002c2a:	42a6      	cmp	r6, r4
 8002c2c:	d105      	bne.n	8002c3a <__libc_init_array+0x2e>
 8002c2e:	bd70      	pop	{r4, r5, r6, pc}
 8002c30:	00b3      	lsls	r3, r6, #2
 8002c32:	58eb      	ldr	r3, [r5, r3]
 8002c34:	4798      	blx	r3
 8002c36:	3601      	adds	r6, #1
 8002c38:	e7ee      	b.n	8002c18 <__libc_init_array+0xc>
 8002c3a:	00b3      	lsls	r3, r6, #2
 8002c3c:	58eb      	ldr	r3, [r5, r3]
 8002c3e:	4798      	blx	r3
 8002c40:	3601      	adds	r6, #1
 8002c42:	e7f2      	b.n	8002c2a <__libc_init_array+0x1e>
 8002c44:	08002ce4 	.word	0x08002ce4
 8002c48:	08002ce4 	.word	0x08002ce4
 8002c4c:	08002ce4 	.word	0x08002ce4
 8002c50:	08002ce8 	.word	0x08002ce8

08002c54 <memset>:
 8002c54:	0003      	movs	r3, r0
 8002c56:	1882      	adds	r2, r0, r2
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d100      	bne.n	8002c5e <memset+0xa>
 8002c5c:	4770      	bx	lr
 8002c5e:	7019      	strb	r1, [r3, #0]
 8002c60:	3301      	adds	r3, #1
 8002c62:	e7f9      	b.n	8002c58 <memset+0x4>

08002c64 <_init>:
 8002c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c66:	46c0      	nop			; (mov r8, r8)
 8002c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c6a:	bc08      	pop	{r3}
 8002c6c:	469e      	mov	lr, r3
 8002c6e:	4770      	bx	lr

08002c70 <_fini>:
 8002c70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c72:	46c0      	nop			; (mov r8, r8)
 8002c74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c76:	bc08      	pop	{r3}
 8002c78:	469e      	mov	lr, r3
 8002c7a:	4770      	bx	lr
